
threadx_sht30_reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e8  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800731c  0800731c  0001731c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800756c  0800756c  0001756c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007570  08007570  00017570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  08007574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ff8  2000007c  080075f0  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001074  080075f0  00021074  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d6c4  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004689  00000000  00000000  0003d776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001560  00000000  00000000  00041e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001280  00000000  00000000  00043360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035a7d  00000000  00000000  000445e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e614  00000000  00000000  0007a05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00146c2e  00000000  00000000  00098671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001df29f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005ad4  00000000  00000000  001df2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000007c 	.word	0x2000007c
 8000250:	00000000 	.word	0x00000000
 8000254:	08007304 	.word	0x08007304

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000080 	.word	0x20000080
 8000270:	08007304 	.word	0x08007304

08000274 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000274:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000276:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027a:	4918      	ldr	r1, [pc, #96]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800027c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000280:	4817      	ldr	r0, [pc, #92]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000282:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000284:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000288:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028a:	4816      	ldr	r0, [pc, #88]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800028c:	4913      	ldr	r1, [pc, #76]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800028e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000290:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000296:	f649 413f 	movw	r1, #39999	; 0x9c3f
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029a:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029c:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a0:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a2:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a6:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002aa:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ae:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b4:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f895 	bl	80003f8 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	20000a58 	.word	0x20000a58
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	40ff0000 	.word	0x40ff0000

080002ec <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ec:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f0:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002f8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002fc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000300:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000302:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000306:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030a:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800030e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000312:	f3bf 8f6f 	isb	sy

08000316 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000316:	e7fe      	b.n	8000316 <__tx_wait_here>

08000318 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000318:	4824      	ldr	r0, [pc, #144]	; (80003ac <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031a:	4a25      	ldr	r2, [pc, #148]	; (80003b0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800031c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000320:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000322:	b191      	cbz	r1, 800034a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000324:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000326:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800032e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000332:	d101      	bne.n	8000338 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000334:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000338 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000338:	4c1e      	ldr	r4, [pc, #120]	; (80003b4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800033e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000342:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000344:	b10d      	cbz	r5, 800034a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000346:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000348:	6023      	str	r3, [r4, #0]

0800034a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800034a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800034c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800034e:	b1d1      	cbz	r1, 8000386 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000350:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000352:	b662      	cpsie	i

08000354 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000354:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000356:	4c17      	ldr	r4, [pc, #92]	; (80003b4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000358:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800035e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000360:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000362:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000366:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800036e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000372:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000376:	d101      	bne.n	800037c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000378:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800037c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800037c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000380:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000384:	4770      	bx	lr

08000386 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000386:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000388:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800038c:	b909      	cbnz	r1, 8000392 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800038e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000390:	e7f9      	b.n	8000386 <__tx_ts_wait>

08000392 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000392:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000396:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039a:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 800039e:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003a0:	e7d8      	b.n	8000354 <__tx_ts_restore>
 80003a2:	bf00      	nop

080003a4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a4:	4770      	bx	lr
 80003a6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003a8:	20000af4 	.word	0x20000af4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ac:	20000a5c 	.word	0x20000a5c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b0:	20000a60 	.word	0x20000a60
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b4:	20001060 	.word	0x20001060

080003b8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003b8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ba:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003be:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c2:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003c6:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003c8:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003cc:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ce:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003d6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003d8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003da:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003dc:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003de:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    STR     r3, [r2, #56]                           // Store initial lr
 80003ea:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003ec:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f2:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f4:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003f6:	4770      	bx	lr

080003f8 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003f8:	4922      	ldr	r1, [pc, #136]	; (8000484 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fa:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003fc:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000400:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000404:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000406:	b13a      	cbz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000408:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800040c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800040e:	b91a      	cbnz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000412:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000416:	6018      	str	r0, [r3, #0]

08000418 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	491d      	ldr	r1, [pc, #116]	; (8000490 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800041c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800041e:	b122      	cbz	r2, 800042a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000422:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000426:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000428:	e008      	b.n	800043c <__tx_timer_done>

0800042a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000430:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000432:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000434:	d101      	bne.n	800043a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000438:	6818      	ldr	r0, [r3, #0]

0800043a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043a:	6008      	str	r0, [r1, #0]

0800043c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800043e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000440:	b912      	cbnz	r2, 8000448 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000442:	4914      	ldr	r1, [pc, #80]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000444:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000446:	b1c8      	cbz	r0, 800047c <__tx_timer_nothing_expired>

08000448 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000448:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044a:	4912      	ldr	r1, [pc, #72]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800044c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800044e:	b108      	cbz	r0, 8000454 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000450:	f005 fb5e 	bl	8005b10 <_tx_timer_expiration_process>

08000454 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000458:	b172      	cbz	r2, 8000478 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045a:	f005 facb 	bl	80059f4 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800045e:	4810      	ldr	r0, [pc, #64]	; (80004a0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000460:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000462:	b949      	cbnz	r1, 8000478 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000464:	480f      	ldr	r0, [pc, #60]	; (80004a4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000466:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800046c:	480f      	ldr	r0, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800046e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000472:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000474:	d000      	beq.n	8000478 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000476:	6002      	str	r2, [r0, #0]

08000478 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000478:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800047c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800047c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000480:	4770      	bx	lr
 8000482:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000484:	20000b00 	.word	0x20000b00
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000488:	20001060 	.word	0x20001060
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800048c:	20000b04 	.word	0x20000b04
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000490:	20000b90 	.word	0x20000b90
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000494:	20000b94 	.word	0x20000b94
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000498:	20000b8c 	.word	0x20000b8c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049c:	20000b88 	.word	0x20000b88
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a0:	20000af4 	.word	0x20000af4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a4:	20000a5c 	.word	0x20000a5c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004a8:	20000a60 	.word	0x20000a60
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ac:	e000ed04 	.word	0xe000ed04

080004b0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80004bc:	2334      	movs	r3, #52	; 0x34
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c4:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <tx_application_define+0x40>)
 80004c6:	490b      	ldr	r1, [pc, #44]	; (80004f4 <tx_application_define+0x44>)
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <tx_application_define+0x48>)
 80004ca:	f005 fd57 	bl	8005f7c <_txe_byte_pool_create>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d109      	bne.n	80004e8 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <tx_application_define+0x48>)
 80004d6:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80004d8:	68b8      	ldr	r0, [r7, #8]
 80004da:	f000 f80f 	bl	80004fc <App_ThreadX_Init>
 80004de:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d000      	beq.n	80004e8 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80004e6:	e7fe      	b.n	80004e6 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000098 	.word	0x20000098
 80004f4:	0800731c 	.word	0x0800731c
 80004f8:	20000498 	.word	0x20000498

080004fc <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08c      	sub	sp, #48	; 0x30
 8000500:	af08      	add	r7, sp, #32
 8000502:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	60bb      	str	r3, [r7, #8]
   /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&temperature_read_ptr, "temperature_read", temperature_read_entry, 0x1234,
 800050c:	23b0      	movs	r3, #176	; 0xb0
 800050e:	9306      	str	r3, [sp, #24]
 8000510:	2301      	movs	r3, #1
 8000512:	9305      	str	r3, [sp, #20]
 8000514:	2301      	movs	r3, #1
 8000516:	9304      	str	r3, [sp, #16]
 8000518:	230f      	movs	r3, #15
 800051a:	9303      	str	r3, [sp, #12]
 800051c:	230f      	movs	r3, #15
 800051e:	9302      	str	r3, [sp, #8]
 8000520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	4b07      	ldr	r3, [pc, #28]	; (8000544 <App_ThreadX_Init+0x48>)
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	f241 2334 	movw	r3, #4660	; 0x1234
 800052e:	4a06      	ldr	r2, [pc, #24]	; (8000548 <App_ThreadX_Init+0x4c>)
 8000530:	4906      	ldr	r1, [pc, #24]	; (800054c <App_ThreadX_Init+0x50>)
 8000532:	4807      	ldr	r0, [pc, #28]	; (8000550 <App_ThreadX_Init+0x54>)
 8000534:	f005 fdc2 	bl	80060bc <_txe_thread_create>
		  temperature_read_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000538:	68fb      	ldr	r3, [r7, #12]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200004cc 	.word	0x200004cc
 8000548:	08000561 	.word	0x08000561
 800054c:	08007330 	.word	0x08007330
 8000550:	200008cc 	.word	0x200008cc

08000554 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000558:	f004 fdd2 	bl	8005100 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <temperature_read_entry>:

/* USER CODE BEGIN 1 */
VOID temperature_read_entry(ULONG initial_input)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	while(1)
	{

		sht3x_read_temperature_and_humidity(&handle, &temperature, &humidity); // read
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <temperature_read_entry+0x1c>)
 800056a:	4905      	ldr	r1, [pc, #20]	; (8000580 <temperature_read_entry+0x20>)
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <temperature_read_entry+0x24>)
 800056e:	f000 f9e5 	bl	800093c <sht3x_read_temperature_and_humidity>
		tx_thread_sleep(100);
 8000572:	2064      	movs	r0, #100	; 0x64
 8000574:	f004 ff6c 	bl	8005450 <_tx_thread_sleep>
		sht3x_read_temperature_and_humidity(&handle, &temperature, &humidity); // read
 8000578:	e7f6      	b.n	8000568 <temperature_read_entry+0x8>
 800057a:	bf00      	nop
 800057c:	200009cc 	.word	0x200009cc
 8000580:	200009c8 	.word	0x200009c8
 8000584:	20000000 	.word	0x20000000

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fc7c 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f80b 	bl	80005aa <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000594:	f000 f852 	bl	800063c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f894 	bl	80006c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800059c:	f000 f854 	bl	8000648 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SHT30_Initialization();
 80005a0:	f000 f8d6 	bl	8000750 <SHT30_Initialization>
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80005a4:	f7ff ffd6 	bl	8000554 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x20>

080005aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b09e      	sub	sp, #120	; 0x78
 80005ae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b0:	f107 0318 	add.w	r3, r7, #24
 80005b4:	2260      	movs	r2, #96	; 0x60
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f005 fecb 	bl	8006354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005be:	463b      	mov	r3, r7
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
 80005cc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80005ce:	2000      	movs	r0, #0
 80005d0:	f001 fe94 	bl	80022fc <HAL_PWREx_ControlVoltageScaling>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005da:	f000 f8f9 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005de:	2310      	movs	r3, #16
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005e2:	2301      	movs	r3, #1
 80005e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005e6:	2310      	movs	r3, #16
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80005ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0318 	add.w	r3, r7, #24
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 ff11 	bl	8002420 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000604:	f000 f8e4 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	231f      	movs	r3, #31
 800060a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f002 fdd1 	bl	80031cc <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000630:	f000 f8ce 	bl	80007d0 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3778      	adds	r7, #120	; 0x78
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000640:	f001 fede 	bl	8002400 <HAL_PWREx_EnableVddIO2>

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_I2C1_Init+0x74>)
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <MX_I2C1_Init+0x78>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_I2C1_Init+0x74>)
 8000654:	2204      	movs	r2, #4
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_I2C1_Init+0x74>)
 8000660:	2201      	movs	r2, #1
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000682:	480e      	ldr	r0, [pc, #56]	; (80006bc <MX_I2C1_Init+0x74>)
 8000684:	f000 ff42 	bl	800150c <HAL_I2C_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800068e:	f000 f89f 	bl	80007d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000692:	2100      	movs	r1, #0
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <MX_I2C1_Init+0x74>)
 8000696:	f001 fd99 	bl	80021cc <HAL_I2CEx_ConfigAnalogFilter>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a0:	f000 f896 	bl	80007d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_I2C1_Init+0x74>)
 80006a8:	f001 fddb 	bl	8002262 <HAL_I2CEx_ConfigDigitalFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 f88d 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000097c 	.word	0x2000097c
 80006c0:	40005400 	.word	0x40005400

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_GPIO_Init+0x84>)
 80006dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006e0:	4a19      	ldr	r2, [pc, #100]	; (8000748 <MX_GPIO_Init+0x84>)
 80006e2:	f043 0320 	orr.w	r3, r3, #32
 80006e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_GPIO_Init+0x84>)
 80006ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006f0:	f003 0320 	and.w	r3, r3, #32
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_GPIO_Init+0x84>)
 80006fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_GPIO_Init+0x84>)
 8000700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000704:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_GPIO_Init+0x84>)
 800070a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800070e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHT30_ENABLE_GPIO_Port, SHT30_ENABLE_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <MX_GPIO_Init+0x88>)
 800071e:	f000 fedd 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SHT30_ENABLE_Pin */
  GPIO_InitStruct.Pin = SHT30_ENABLE_Pin;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SHT30_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_GPIO_Init+0x88>)
 800073c:	f000 fcf6 	bl	800112c <HAL_GPIO_Init>

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	46020c00 	.word	0x46020c00
 800074c:	42021400 	.word	0x42021400

08000750 <SHT30_Initialization>:

/* USER CODE BEGIN 4 */
void SHT30_Initialization(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
	/**
	 * @note   This function initializes SHT30 sensor.
	 */

	SHT30_Pin_Reset(); // Restart SHT30.
 8000756:	f000 f811 	bl	800077c <SHT30_Pin_Reset>
	sht3x_handle_t handle = { .i2c_handle = &hi2c1,
 800075a:	4a07      	ldr	r2, [pc, #28]	; (8000778 <SHT30_Initialization+0x28>)
 800075c:	463b      	mov	r3, r7
 800075e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000762:	e883 0003 	stmia.w	r3, {r0, r1}
			.device_address = SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_LOW }; // Define i2c channel and SHT30 sensor's i2c address.
	sht3x_init(&handle); // Run SHT30's library's initialize function with using defined parameters.
 8000766:	463b      	mov	r3, r7
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f8a7 	bl	80008bc <sht3x_init>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	08007344 	.word	0x08007344

0800077c <SHT30_Pin_Reset>:

void SHT30_Pin_Reset(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	/**
	  * @note   This function restarts SHT30 sensor by it's 6th pin.
	  */

	HAL_GPIO_WritePin(SHT30_ENABLE_GPIO_Port, SHT30_ENABLE_Pin, GPIO_PIN_RESET);	// SHT30 nReset Pin LOW
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000786:	4808      	ldr	r0, [pc, #32]	; (80007a8 <SHT30_Pin_Reset+0x2c>)
 8000788:	f000 fea8 	bl	80014dc <HAL_GPIO_WritePin>
	HAL_Delay(100);																	// delay for 100 milliseconds
 800078c:	2064      	movs	r0, #100	; 0x64
 800078e:	f000 fbc9 	bl	8000f24 <HAL_Delay>
	HAL_GPIO_WritePin(SHT30_ENABLE_GPIO_Port, SHT30_ENABLE_Pin, GPIO_PIN_SET);		// SHT30 nReset Pin HIGH
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000798:	4803      	ldr	r0, [pc, #12]	; (80007a8 <SHT30_Pin_Reset+0x2c>)
 800079a:	f000 fe9f 	bl	80014dc <HAL_GPIO_WritePin>
	HAL_Delay(100);																	// delay for 100 milliseconds
 800079e:	2064      	movs	r0, #100	; 0x64
 80007a0:	f000 fbc0 	bl	8000f24 <HAL_Delay>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	42021400 	.word	0x42021400

080007ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d101      	bne.n	80007c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007be:	f000 fb91 	bl	8000ee4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40001000 	.word	0x40001000

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>

080007da <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 80007da:	b480      	push	{r7}
 80007dc:	b087      	sub	sp, #28
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 80007e4:	23ff      	movs	r3, #255	; 0xff
 80007e6:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	e020      	b.n	8000830 <calculate_crc+0x56>
		crc ^= data[i];
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	4413      	add	r3, r2
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	7dfb      	ldrb	r3, [r7, #23]
 80007f8:	4053      	eors	r3, r2
 80007fa:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	e010      	b.n	8000824 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8000802:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000806:	2b00      	cmp	r3, #0
 8000808:	da06      	bge.n	8000818 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 800080a:	7dfb      	ldrb	r3, [r7, #23]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	b2db      	uxtb	r3, r3
 8000810:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000814:	75fb      	strb	r3, [r7, #23]
 8000816:	e002      	b.n	800081e <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8000818:	7dfb      	ldrb	r3, [r7, #23]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	3301      	adds	r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b07      	cmp	r3, #7
 8000828:	d9eb      	bls.n	8000802 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	3301      	adds	r3, #1
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	429a      	cmp	r2, r3
 8000836:	d3da      	bcc.n	80007ee <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8000838:	7dfb      	ldrb	r3, [r7, #23]
}
 800083a:	4618      	mov	r0, r3
 800083c:	371c      	adds	r7, #28
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af02      	add	r7, sp, #8
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	460b      	mov	r3, r1
 8000850:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8000852:	887b      	ldrh	r3, [r7, #2]
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	b29b      	uxth	r3, r3
 8000858:	b2db      	uxtb	r3, r3
 800085a:	733b      	strb	r3, [r7, #12]
 800085c:	887b      	ldrh	r3, [r7, #2]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6818      	ldr	r0, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	889b      	ldrh	r3, [r3, #4]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	b299      	uxth	r1, r3
 800086e:	f107 020c 	add.w	r2, r7, #12
 8000872:	231e      	movs	r3, #30
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2302      	movs	r3, #2
 8000878:	f000 fed8 	bl	800162c <HAL_I2C_Master_Transmit>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000882:	2300      	movs	r3, #0
 8000884:	e000      	b.n	8000888 <sht3x_send_command+0x42>
	}

	return true;
 8000886:	2301      	movs	r3, #1
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	460a      	mov	r2, r1
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	4613      	mov	r3, r2
 800089e:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b29b      	uxth	r3, r3
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af04      	add	r7, sp, #16
 80008c2:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6a1b      	ldr	r3, [r3, #32]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d005      	beq.n	80008da <sht3x_init+0x1e>
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <sht3x_init+0x74>)
 80008d0:	4a18      	ldr	r2, [pc, #96]	; (8000934 <sht3x_init+0x78>)
 80008d2:	2138      	movs	r1, #56	; 0x38
 80008d4:	4818      	ldr	r0, [pc, #96]	; (8000938 <sht3x_init+0x7c>)
 80008d6:	f005 fce3 	bl	80062a0 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	889b      	ldrh	r3, [r3, #4]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	b299      	uxth	r1, r3
 80008e6:	231e      	movs	r3, #30
 80008e8:	9302      	str	r3, [sp, #8]
 80008ea:	2303      	movs	r3, #3
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	2302      	movs	r3, #2
 80008f6:	f24f 322d 	movw	r2, #62253	; 0xf32d
 80008fa:	f001 f881 	bl	8001a00 <HAL_I2C_Mem_Read>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000904:	2300      	movs	r3, #0
 8000906:	e00e      	b.n	8000926 <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2102      	movs	r1, #2
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff63 	bl	80007da <calculate_crc>
 8000914:	4603      	mov	r3, r0
 8000916:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	7bfa      	ldrb	r2, [r7, #15]
 800091c:	429a      	cmp	r2, r3
 800091e:	d001      	beq.n	8000924 <sht3x_init+0x68>
		return false;
 8000920:	2300      	movs	r3, #0
 8000922:	e000      	b.n	8000926 <sht3x_init+0x6a>
	}

	return true;
 8000924:	2301      	movs	r3, #1
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	0800734c 	.word	0x0800734c
 8000934:	080073b4 	.word	0x080073b4
 8000938:	0800738c 	.word	0x0800738c

0800093c <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af02      	add	r7, sp, #8
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8000948:	f642 4106 	movw	r1, #11270	; 0x2c06
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f7ff ff7a 	bl	8000846 <sht3x_send_command>

	HAL_Delay(1);
 8000952:	2001      	movs	r0, #1
 8000954:	f000 fae6 	bl	8000f24 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	6818      	ldr	r0, [r3, #0]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	889b      	ldrh	r3, [r3, #4]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	b299      	uxth	r1, r3
 8000964:	f107 0214 	add.w	r2, r7, #20
 8000968:	231e      	movs	r3, #30
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2306      	movs	r3, #6
 800096e:	f000 ff51 	bl	8001814 <HAL_I2C_Master_Receive>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8000978:	2300      	movs	r3, #0
 800097a:	e050      	b.n	8000a1e <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2102      	movs	r1, #2
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff29 	bl	80007da <calculate_crc>
 8000988:	4603      	mov	r3, r0
 800098a:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	3303      	adds	r3, #3
 8000992:	2102      	movs	r1, #2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff20 	bl	80007da <calculate_crc>
 800099a:	4603      	mov	r3, r0
 800099c:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 800099e:	7dbb      	ldrb	r3, [r7, #22]
 80009a0:	7ffa      	ldrb	r2, [r7, #31]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d103      	bne.n	80009ae <sht3x_read_temperature_and_humidity+0x72>
 80009a6:	7e7b      	ldrb	r3, [r7, #25]
 80009a8:	7fba      	ldrb	r2, [r7, #30]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d001      	beq.n	80009b2 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e035      	b.n	8000a1e <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 80009b2:	7d3b      	ldrb	r3, [r7, #20]
 80009b4:	7d7a      	ldrb	r2, [r7, #21]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff69 	bl	8000890 <uint8_to_uint16>
 80009be:	4603      	mov	r3, r0
 80009c0:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 80009c2:	7dfb      	ldrb	r3, [r7, #23]
 80009c4:	7e3a      	ldrb	r2, [r7, #24]
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff61 	bl	8000890 <uint8_to_uint16>
 80009ce:	4603      	mov	r3, r0
 80009d0:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 80009d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009de:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000a28 <sht3x_read_temperature_and_humidity+0xec>
 80009e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009e6:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000a2c <sht3x_read_temperature_and_humidity+0xf0>
 80009ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000a30 <sht3x_read_temperature_and_humidity+0xf4>
 80009f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 80009fc:	8b7b      	ldrh	r3, [r7, #26]
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a06:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000a34 <sht3x_read_temperature_and_humidity+0xf8>
 8000a0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a0e:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000a2c <sht3x_read_temperature_and_humidity+0xf0>
 8000a12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8000a1c:	2301      	movs	r3, #1
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3720      	adds	r7, #32
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	432f0000 	.word	0x432f0000
 8000a2c:	477fff00 	.word	0x477fff00
 8000a30:	42340000 	.word	0x42340000
 8000a34:	42c80000 	.word	0x42c80000

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b0bc      	sub	sp, #240	; 0xf0
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	22c8      	movs	r2, #200	; 0xc8
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f005 fc73 	bl	8006354 <memset>
  if(hi2c->Instance==I2C1)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <HAL_I2C_MspInit+0xc4>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d145      	bne.n	8000b04 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a78:	f04f 0240 	mov.w	r2, #64	; 0x40
 8000a7c:	f04f 0300 	mov.w	r3, #0
 8000a80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 ff83 	bl	8003998 <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000a98:	f7ff fe9a 	bl	80007d0 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <HAL_I2C_MspInit+0xc8>)
 8000a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aa2:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <HAL_I2C_MspInit+0xc8>)
 8000aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_I2C_MspInit+0xc8>)
 8000aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000aba:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000abe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac2:	2312      	movs	r3, #18
 8000ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ada:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <HAL_I2C_MspInit+0xcc>)
 8000ae2:	f000 fb23 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_I2C_MspInit+0xc8>)
 8000ae8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000aec:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_I2C_MspInit+0xc8>)
 8000aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_I2C_MspInit+0xc8>)
 8000af8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b04:	bf00      	nop
 8000b06:	37f0      	adds	r7, #240	; 0xf0
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	46020c00 	.word	0x46020c00
 8000b14:	42021800 	.word	0x42021800

08000b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08e      	sub	sp, #56	; 0x38
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b28:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <HAL_InitTick+0xcc>)
 8000b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000b2e:	4a2d      	ldr	r2, [pc, #180]	; (8000be4 <HAL_InitTick+0xcc>)
 8000b30:	f043 0310 	orr.w	r3, r3, #16
 8000b34:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <HAL_InitTick+0xcc>)
 8000b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b46:	f107 0210 	add.w	r2, r7, #16
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 fe63 	bl	800381c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b56:	f002 fe4d 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8000b5a:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <HAL_InitTick+0xd0>)
 8000b60:	fba2 2303 	umull	r2, r3, r2, r3
 8000b64:	0c9b      	lsrs	r3, r3, #18
 8000b66:	3b01      	subs	r3, #1
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_InitTick+0xd4>)
 8000b6c:	4a20      	ldr	r2, [pc, #128]	; (8000bf0 <HAL_InitTick+0xd8>)
 8000b6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <HAL_InitTick+0xd4>)
 8000b72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b76:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b78:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <HAL_InitTick+0xd4>)
 8000b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <HAL_InitTick+0xd4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_InitTick+0xd4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000b8a:	4818      	ldr	r0, [pc, #96]	; (8000bec <HAL_InitTick+0xd4>)
 8000b8c:	f003 fdf4 	bl	8004778 <HAL_TIM_Base_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8000b96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d118      	bne.n	8000bd0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b9e:	4813      	ldr	r0, [pc, #76]	; (8000bec <HAL_InitTick+0xd4>)
 8000ba0:	f003 fe4c 	bl	800483c <HAL_TIM_Base_Start_IT>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8000baa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d10e      	bne.n	8000bd0 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d808      	bhi.n	8000bca <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	2031      	movs	r0, #49	; 0x31
 8000bbe:	f000 fa8d 	bl	80010dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc2:	4a0c      	ldr	r2, [pc, #48]	; (8000bf4 <HAL_InitTick+0xdc>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e002      	b.n	8000bd0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000bd0:	2031      	movs	r0, #49	; 0x31
 8000bd2:	f000 fa9d 	bl	8001110 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000bd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3738      	adds	r7, #56	; 0x38
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	46020c00 	.word	0x46020c00
 8000be8:	431bde83 	.word	0x431bde83
 8000bec:	200009d0 	.word	0x200009d0
 8000bf0:	40001000 	.word	0x40001000
 8000bf4:	2000000c 	.word	0x2000000c

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM6_IRQHandler+0x10>)
 8000c2a:	f003 fea7 	bl	800497c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200009d0 	.word	0x200009d0

08000c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return 1;
 8000c3c:	2301      	movs	r3, #1
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_kill>:

int _kill(int pid, int sig)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c52:	f005 fb43 	bl	80062dc <__errno>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2216      	movs	r2, #22
 8000c5a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <_exit>:

void _exit (int status)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ffe7 	bl	8000c48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c7a:	e7fe      	b.n	8000c7a <_exit+0x12>

08000c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	e00a      	b.n	8000ca4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c8e:	e000      	b.n	8000c92 <_read+0x16>
 8000c90:	bf00      	nop
 8000c92:	4601      	mov	r1, r0
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60ba      	str	r2, [r7, #8]
 8000c9a:	b2ca      	uxtb	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbf0      	blt.n	8000c8e <_read+0x12>
  }

  return len;
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	e009      	b.n	8000cdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	60ba      	str	r2, [r7, #8]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e000      	b.n	8000cd6 <_write+0x20>
 8000cd4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbf1      	blt.n	8000cc8 <_write+0x12>
  }
  return len;
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_close>:

int _close(int file)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d16:	605a      	str	r2, [r3, #4]
  return 0;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_isatty>:

int _isatty(int file)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d60:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <_sbrk+0x5c>)
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <_sbrk+0x60>)
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <_sbrk+0x64>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <_sbrk+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d207      	bcs.n	8000d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d88:	f005 faa8 	bl	80062dc <__errno>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	220c      	movs	r2, #12
 8000d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d96:	e009      	b.n	8000dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <_sbrk+0x64>)
 8000da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200c0000 	.word	0x200c0000
 8000db8:	00000400 	.word	0x00000400
 8000dbc:	20000a1c 	.word	0x20000a1c
 8000dc0:	20001078 	.word	0x20001078

08000dc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <SystemInit+0x68>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <SystemInit+0x68>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <SystemInit+0x6c>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <SystemInit+0x6c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <SystemInit+0x6c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <SystemInit+0x6c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <SystemInit+0x6c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <SystemInit+0x6c>)
 8000df6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000dfa:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000dfe:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <SystemInit+0x6c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <SystemInit+0x6c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <SystemInit+0x6c>)
 8000e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <SystemInit+0x6c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <SystemInit+0x68>)
 8000e1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e1e:	609a      	str	r2, [r3, #8]
  #endif
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00
 8000e30:	46020c00 	.word	0x46020c00

08000e34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e3a:	e003      	b.n	8000e44 <LoopCopyDataInit>

08000e3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e42:	3104      	adds	r1, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e44:	480b      	ldr	r0, [pc, #44]	; (8000e74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e4c:	d3f6      	bcc.n	8000e3c <CopyDataInit>
	ldr	r2, =_sbss
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e50:	e002      	b.n	8000e58 <LoopFillZerobss>

08000e52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e52:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e54:	f842 3b04 	str.w	r3, [r2], #4

08000e58 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <LoopForever+0x16>)
	cmp	r2, r3
 8000e5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e5c:	d3f9      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e5e:	f7ff ffb1 	bl	8000dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f005 fa53 	bl	800630c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e66:	f7ff fb8f 	bl	8000588 <main>

08000e6a <LoopForever>:

LoopForever:
    b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000e6c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000e70:	08007574 	.word	0x08007574
	ldr	r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e78:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8000e7c:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8000e80:	20001074 	.word	0x20001074

08000e84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_Init+0x4c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <HAL_Init+0x4c>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f914 	bl	80010c6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000e9e:	f002 fb87 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_Init+0x50>)
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
 8000ea8:	f003 030f 	and.w	r3, r3, #15
 8000eac:	490b      	ldr	r1, [pc, #44]	; (8000edc <HAL_Init+0x54>)
 8000eae:	5ccb      	ldrb	r3, [r1, r3]
 8000eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <HAL_Init+0x58>)
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb8:	200f      	movs	r0, #15
 8000eba:	f7ff fe2d 	bl	8000b18 <HAL_InitTick>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e002      	b.n	8000ece <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fdb6 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40022000 	.word	0x40022000
 8000ed8:	46020c00 	.word	0x46020c00
 8000edc:	080073c0 	.word	0x080073c0
 8000ee0:	20000008 	.word	0x20000008

08000ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000010 	.word	0x20000010
 8000f08:	20000a20 	.word	0x20000a20

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000a20 	.word	0x20000a20

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000010 	.word	0x20000010

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	db0b      	blt.n	8000ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f003 021f 	and.w	r2, r3, #31
 8000fe8:	4907      	ldr	r1, [pc, #28]	; (8001008 <__NVIC_EnableIRQ+0x38>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e100 	.word	0xe000e100

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db0a      	blt.n	8001036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	490c      	ldr	r1, [pc, #48]	; (8001058 <__NVIC_SetPriority+0x4c>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	440b      	add	r3, r1
 8001030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001034:	e00a      	b.n	800104c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	; (800105c <__NVIC_SetPriority+0x50>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	3b04      	subs	r3, #4
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	440b      	add	r3, r1
 800104a:	761a      	strb	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f1c3 0307 	rsb	r3, r3, #7
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf28      	it	cs
 800107e:	2304      	movcs	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3304      	adds	r3, #4
 8001086:	2b06      	cmp	r3, #6
 8001088:	d902      	bls.n	8001090 <NVIC_EncodePriority+0x30>
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3b03      	subs	r3, #3
 800108e:	e000      	b.n	8001092 <NVIC_EncodePriority+0x32>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	4313      	orrs	r3, r2
         );
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ff4c 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ea:	f7ff ff63 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 80010ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	6978      	ldr	r0, [r7, #20]
 80010f6:	f7ff ffb3 	bl	8001060 <NVIC_EncodePriority>
 80010fa:	4602      	mov	r2, r0
 80010fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff82 	bl	800100c <__NVIC_SetPriority>
}
 8001108:	bf00      	nop
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff56 	bl	8000fd0 <__NVIC_EnableIRQ>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800113e:	e1ba      	b.n	80014b6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2101      	movs	r1, #1
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 81aa 	beq.w	80014b0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a55      	ldr	r2, [pc, #340]	; (80012b4 <HAL_GPIO_Init+0x188>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d15d      	bne.n	8001220 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800116a:	2201      	movs	r2, #1
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	4013      	ands	r3, r2
 8001178:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0201 	and.w	r2, r3, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	4313      	orrs	r3, r2
 800118c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001194:	4a48      	ldr	r2, [pc, #288]	; (80012b8 <HAL_GPIO_Init+0x18c>)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800119c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800119e:	4a46      	ldr	r2, [pc, #280]	; (80012b8 <HAL_GPIO_Init+0x18c>)
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4413      	add	r3, r2
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	3208      	adds	r2, #8
 80011b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	220f      	movs	r2, #15
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220b      	movs	r2, #11
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	3208      	adds	r2, #8
 80011ea:	69f9      	ldr	r1, [r7, #28]
 80011ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	4013      	ands	r3, r2
 8001206:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2202      	movs	r2, #2
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	4313      	orrs	r3, r2
 8001216:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e067      	b.n	80012f0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x104>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b12      	cmp	r3, #18
 800122e:	d145      	bne.n	80012bc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	4013      	ands	r3, r2
 8001252:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	f003 020f 	and.w	r2, r3, #15
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	4313      	orrs	r3, r2
 800126c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	69f9      	ldr	r1, [r7, #28]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	4013      	ands	r3, r2
 8001292:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e01e      	b.n	80012f0 <HAL_GPIO_Init+0x1c4>
 80012b2:	bf00      	nop
 80012b4:	46020000 	.word	0x46020000
 80012b8:	08007418 	.word	0x08007418
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0203 	and.w	r2, r3, #3
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d00b      	beq.n	8001310 <HAL_GPIO_Init+0x1e4>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001304:	2b11      	cmp	r3, #17
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b12      	cmp	r3, #18
 800130e:	d130      	bne.n	8001372 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	4013      	ands	r3, r2
 8001326:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	4313      	orrs	r3, r2
 8001338:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001346:	2201      	movs	r2, #1
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	4013      	ands	r3, r2
 8001354:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f003 0201 	and.w	r2, r3, #1
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	4313      	orrs	r3, r2
 800136a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d017      	beq.n	80013aa <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	4013      	ands	r3, r2
 8001390:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d07c      	beq.n	80014b0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80013b6:	4a47      	ldr	r2, [pc, #284]	; (80014d4 <HAL_GPIO_Init+0x3a8>)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3318      	adds	r3, #24
 80013be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	220f      	movs	r2, #15
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	0a9a      	lsrs	r2, r3, #10
 80013de:	4b3e      	ldr	r3, [pc, #248]	; (80014d8 <HAL_GPIO_Init+0x3ac>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	f002 0203 	and.w	r2, r2, #3
 80013e8:	00d2      	lsls	r2, r2, #3
 80013ea:	4093      	lsls	r3, r2
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80013f2:	4938      	ldr	r1, [pc, #224]	; (80014d4 <HAL_GPIO_Init+0x3a8>)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3318      	adds	r3, #24
 80013fa:	69fa      	ldr	r2, [r7, #28]
 80013fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001400:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <HAL_GPIO_Init+0x3a8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43db      	mvns	r3, r3
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	4013      	ands	r3, r2
 800140e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001424:	4a2b      	ldr	r2, [pc, #172]	; (80014d4 <HAL_GPIO_Init+0x3a8>)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <HAL_GPIO_Init+0x3a8>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43db      	mvns	r3, r3
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	4013      	ands	r3, r2
 8001438:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800144e:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <HAL_GPIO_Init+0x3a8>)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <HAL_GPIO_Init+0x3a8>)
 8001456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800145a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43db      	mvns	r3, r3
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	4013      	ands	r3, r2
 8001464:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800147a:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <HAL_GPIO_Init+0x3a8>)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_GPIO_Init+0x3a8>)
 8001484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001488:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43db      	mvns	r3, r3
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	4013      	ands	r3, r2
 8001492:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_GPIO_Init+0x3a8>)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3301      	adds	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	fa22 f303 	lsr.w	r3, r2, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f47f ae3d 	bne.w	8001140 <HAL_GPIO_Init+0x14>
  }
}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	3724      	adds	r7, #36	; 0x24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	46022000 	.word	0x46022000
 80014d8:	002f7f7f 	.word	0x002f7f7f

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e081      	b.n	8001622 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d106      	bne.n	8001538 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff fa88 	bl	8000a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2224      	movs	r2, #36	; 0x24
 800153c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800155c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800156c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d107      	bne.n	8001586 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e006      	b.n	8001594 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001592:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d104      	bne.n	80015a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69d9      	ldr	r1, [r3, #28]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1a      	ldr	r2, [r3, #32]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2220      	movs	r2, #32
 800160e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af02      	add	r7, sp, #8
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	461a      	mov	r2, r3
 8001638:	460b      	mov	r3, r1
 800163a:	817b      	strh	r3, [r7, #10]
 800163c:	4613      	mov	r3, r2
 800163e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b20      	cmp	r3, #32
 800164a:	f040 80da 	bne.w	8001802 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_I2C_Master_Transmit+0x30>
 8001658:	2302      	movs	r3, #2
 800165a:	e0d3      	b.n	8001804 <HAL_I2C_Master_Transmit+0x1d8>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001664:	f7ff fc52 	bl	8000f0c <HAL_GetTick>
 8001668:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2319      	movs	r3, #25
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 fb54 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0be      	b.n	8001804 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2221      	movs	r2, #33	; 0x21
 800168a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2210      	movs	r2, #16
 8001692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	893a      	ldrh	r2, [r7, #8]
 80016a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	2bff      	cmp	r3, #255	; 0xff
 80016b6:	d90e      	bls.n	80016d6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	22ff      	movs	r2, #255	; 0xff
 80016bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	8979      	ldrh	r1, [r7, #10]
 80016c6:	4b51      	ldr	r3, [pc, #324]	; (800180c <HAL_I2C_Master_Transmit+0x1e0>)
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 fd4a 	bl	8002168 <I2C_TransferConfig>
 80016d4:	e06c      	b.n	80017b0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	8979      	ldrh	r1, [r7, #10]
 80016e8:	4b48      	ldr	r3, [pc, #288]	; (800180c <HAL_I2C_Master_Transmit+0x1e0>)
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 fd39 	bl	8002168 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016f6:	e05b      	b.n	80017b0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	6a39      	ldr	r1, [r7, #32]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 fb51 	bl	8001da4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e07b      	b.n	8001804 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001726:	b29b      	uxth	r3, r3
 8001728:	3b01      	subs	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001734:	3b01      	subs	r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001740:	b29b      	uxth	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d034      	beq.n	80017b0 <HAL_I2C_Master_Transmit+0x184>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174a:	2b00      	cmp	r3, #0
 800174c:	d130      	bne.n	80017b0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	2200      	movs	r2, #0
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 fae3 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e04d      	b.n	8001804 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176c:	b29b      	uxth	r3, r3
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	d90e      	bls.n	8001790 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	22ff      	movs	r2, #255	; 0xff
 8001776:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177c:	b2da      	uxtb	r2, r3
 800177e:	8979      	ldrh	r1, [r7, #10]
 8001780:	2300      	movs	r3, #0
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 fced 	bl	8002168 <I2C_TransferConfig>
 800178e:	e00f      	b.n	80017b0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	8979      	ldrh	r1, [r7, #10]
 80017a2:	2300      	movs	r3, #0
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 fcdc 	bl	8002168 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d19e      	bne.n	80016f8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	6a39      	ldr	r1, [r7, #32]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 fb30 	bl	8001e24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e01a      	b.n	8001804 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2220      	movs	r2, #32
 80017d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_I2C_Master_Transmit+0x1e4>)
 80017e2:	400b      	ands	r3, r1
 80017e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2220      	movs	r2, #32
 80017ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001802:	2302      	movs	r3, #2
  }
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	80002000 	.word	0x80002000
 8001810:	fe00e800 	.word	0xfe00e800

08001814 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af02      	add	r7, sp, #8
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	461a      	mov	r2, r3
 8001820:	460b      	mov	r3, r1
 8001822:	817b      	strh	r3, [r7, #10]
 8001824:	4613      	mov	r3, r2
 8001826:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b20      	cmp	r3, #32
 8001832:	f040 80db 	bne.w	80019ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_I2C_Master_Receive+0x30>
 8001840:	2302      	movs	r3, #2
 8001842:	e0d4      	b.n	80019ee <HAL_I2C_Master_Receive+0x1da>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800184c:	f7ff fb5e 	bl	8000f0c <HAL_GetTick>
 8001850:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2319      	movs	r3, #25
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 fa60 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e0bf      	b.n	80019ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2222      	movs	r2, #34	; 0x22
 8001872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2210      	movs	r2, #16
 800187a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	893a      	ldrh	r2, [r7, #8]
 800188e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189a:	b29b      	uxth	r3, r3
 800189c:	2bff      	cmp	r3, #255	; 0xff
 800189e:	d90e      	bls.n	80018be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	22ff      	movs	r2, #255	; 0xff
 80018a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	8979      	ldrh	r1, [r7, #10]
 80018ae:	4b52      	ldr	r3, [pc, #328]	; (80019f8 <HAL_I2C_Master_Receive+0x1e4>)
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 fc56 	bl	8002168 <I2C_TransferConfig>
 80018bc:	e06d      	b.n	800199a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	8979      	ldrh	r1, [r7, #10]
 80018d0:	4b49      	ldr	r3, [pc, #292]	; (80019f8 <HAL_I2C_Master_Receive+0x1e4>)
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 fc45 	bl	8002168 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80018de:	e05c      	b.n	800199a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	6a39      	ldr	r1, [r7, #32]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 fad9 	bl	8001e9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e07c      	b.n	80019ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001910:	3b01      	subs	r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192a:	b29b      	uxth	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d034      	beq.n	800199a <HAL_I2C_Master_Receive+0x186>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001934:	2b00      	cmp	r3, #0
 8001936:	d130      	bne.n	800199a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	2200      	movs	r2, #0
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f9ee 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e04d      	b.n	80019ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001956:	b29b      	uxth	r3, r3
 8001958:	2bff      	cmp	r3, #255	; 0xff
 800195a:	d90e      	bls.n	800197a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	22ff      	movs	r2, #255	; 0xff
 8001960:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001966:	b2da      	uxtb	r2, r3
 8001968:	8979      	ldrh	r1, [r7, #10]
 800196a:	2300      	movs	r3, #0
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 fbf8 	bl	8002168 <I2C_TransferConfig>
 8001978:	e00f      	b.n	800199a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197e:	b29a      	uxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001988:	b2da      	uxtb	r2, r3
 800198a:	8979      	ldrh	r1, [r7, #10]
 800198c:	2300      	movs	r3, #0
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 fbe7 	bl	8002168 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d19d      	bne.n	80018e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	6a39      	ldr	r1, [r7, #32]
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 fa3b 	bl	8001e24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e01a      	b.n	80019ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2220      	movs	r2, #32
 80019be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6859      	ldr	r1, [r3, #4]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_I2C_Master_Receive+0x1e8>)
 80019cc:	400b      	ands	r3, r1
 80019ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2220      	movs	r2, #32
 80019d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e000      	b.n	80019ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80019ec:	2302      	movs	r3, #2
  }
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	80002400 	.word	0x80002400
 80019fc:	fe00e800 	.word	0xfe00e800

08001a00 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	4608      	mov	r0, r1
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4603      	mov	r3, r0
 8001a10:	817b      	strh	r3, [r7, #10]
 8001a12:	460b      	mov	r3, r1
 8001a14:	813b      	strh	r3, [r7, #8]
 8001a16:	4613      	mov	r3, r2
 8001a18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	f040 80fd 	bne.w	8001c22 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <HAL_I2C_Mem_Read+0x34>
 8001a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0f1      	b.n	8001c24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_I2C_Mem_Read+0x4e>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e0ea      	b.n	8001c24 <HAL_I2C_Mem_Read+0x224>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a56:	f7ff fa59 	bl	8000f0c <HAL_GetTick>
 8001a5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2319      	movs	r3, #25
 8001a62:	2201      	movs	r2, #1
 8001a64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 f95b 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0d5      	b.n	8001c24 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2222      	movs	r2, #34	; 0x22
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2240      	movs	r2, #64	; 0x40
 8001a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a3a      	ldr	r2, [r7, #32]
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001aa0:	88f8      	ldrh	r0, [r7, #6]
 8001aa2:	893a      	ldrh	r2, [r7, #8]
 8001aa4:	8979      	ldrh	r1, [r7, #10]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	4603      	mov	r3, r0
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 f8bf 	bl	8001c34 <I2C_RequestMemoryRead>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0ad      	b.n	8001c24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	2bff      	cmp	r3, #255	; 0xff
 8001ad0:	d90e      	bls.n	8001af0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	22ff      	movs	r2, #255	; 0xff
 8001ad6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	8979      	ldrh	r1, [r7, #10]
 8001ae0:	4b52      	ldr	r3, [pc, #328]	; (8001c2c <HAL_I2C_Mem_Read+0x22c>)
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 fb3d 	bl	8002168 <I2C_TransferConfig>
 8001aee:	e00f      	b.n	8001b10 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	8979      	ldrh	r1, [r7, #10]
 8001b02:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <HAL_I2C_Mem_Read+0x22c>)
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 fb2c 	bl	8002168 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b16:	2200      	movs	r2, #0
 8001b18:	2104      	movs	r1, #4
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f902 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e07c      	b.n	8001c24 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d034      	beq.n	8001bd0 <HAL_I2C_Mem_Read+0x1d0>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d130      	bne.n	8001bd0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b74:	2200      	movs	r2, #0
 8001b76:	2180      	movs	r1, #128	; 0x80
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 f8d3 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e04d      	b.n	8001c24 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	2bff      	cmp	r3, #255	; 0xff
 8001b90:	d90e      	bls.n	8001bb0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	22ff      	movs	r2, #255	; 0xff
 8001b96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	8979      	ldrh	r1, [r7, #10]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 fadd 	bl	8002168 <I2C_TransferConfig>
 8001bae:	e00f      	b.n	8001bd0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	8979      	ldrh	r1, [r7, #10]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 facc 	bl	8002168 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d19a      	bne.n	8001b10 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f920 	bl	8001e24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e01a      	b.n	8001c24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_I2C_Mem_Read+0x230>)
 8001c02:	400b      	ands	r3, r1
 8001c04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
  }
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	80002400 	.word	0x80002400
 8001c30:	fe00e800 	.word	0xfe00e800

08001c34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	4608      	mov	r0, r1
 8001c3e:	4611      	mov	r1, r2
 8001c40:	461a      	mov	r2, r3
 8001c42:	4603      	mov	r3, r0
 8001c44:	817b      	strh	r3, [r7, #10]
 8001c46:	460b      	mov	r3, r1
 8001c48:	813b      	strh	r3, [r7, #8]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	8979      	ldrh	r1, [r7, #10]
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <I2C_RequestMemoryRead+0xa4>)
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fa84 	bl	8002168 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	69b9      	ldr	r1, [r7, #24]
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 f89d 	bl	8001da4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e02c      	b.n	8001cce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d105      	bne.n	8001c86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c7a:	893b      	ldrh	r3, [r7, #8]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
 8001c84:	e015      	b.n	8001cb2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c86:	893b      	ldrh	r3, [r7, #8]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	69b9      	ldr	r1, [r7, #24]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 f883 	bl	8001da4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e012      	b.n	8001cce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca8:	893b      	ldrh	r3, [r7, #8]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2140      	movs	r1, #64	; 0x40
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 f831 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	80002000 	.word	0x80002000

08001cdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d103      	bne.n	8001cfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d007      	beq.n	8001d18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	619a      	str	r2, [r3, #24]
  }
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d34:	e022      	b.n	8001d7c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d3c:	d01e      	beq.n	8001d7c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3e:	f7ff f8e5 	bl	8000f0c <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d302      	bcc.n	8001d54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d113      	bne.n	8001d7c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	f043 0220 	orr.w	r2, r3, #32
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e00f      	b.n	8001d9c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	4013      	ands	r3, r2
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d0cd      	beq.n	8001d36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001db0:	e02c      	b.n	8001e0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f8ea 	bl	8001f90 <I2C_IsErrorOccurred>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e02a      	b.n	8001e1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dcc:	d01e      	beq.n	8001e0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dce:	f7ff f89d 	bl	8000f0c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d302      	bcc.n	8001de4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d113      	bne.n	8001e0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de8:	f043 0220 	orr.w	r2, r3, #32
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e007      	b.n	8001e1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d1cb      	bne.n	8001db2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e30:	e028      	b.n	8001e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f8aa 	bl	8001f90 <I2C_IsErrorOccurred>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e026      	b.n	8001e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e46:	f7ff f861 	bl	8000f0c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d302      	bcc.n	8001e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d113      	bne.n	8001e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	f043 0220 	orr.w	r2, r3, #32
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e007      	b.n	8001e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d1cf      	bne.n	8001e32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ea8:	e064      	b.n	8001f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f86e 	bl	8001f90 <I2C_IsErrorOccurred>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e062      	b.n	8001f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d138      	bne.n	8001f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d105      	bne.n	8001ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e04e      	b.n	8001f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b10      	cmp	r3, #16
 8001ef2:	d107      	bne.n	8001f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2210      	movs	r2, #16
 8001efa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2204      	movs	r2, #4
 8001f00:	645a      	str	r2, [r3, #68]	; 0x44
 8001f02:	e002      	b.n	8001f0a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001f1e:	400b      	ands	r3, r1
 8001f20:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2220      	movs	r2, #32
 8001f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e022      	b.n	8001f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3e:	f7fe ffe5 	bl	8000f0c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d302      	bcc.n	8001f54 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10f      	bne.n	8001f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f58:	f043 0220 	orr.w	r2, r3, #32
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e007      	b.n	8001f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d193      	bne.n	8001eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	fe00e800 	.word	0xfe00e800

08001f90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d075      	beq.n	80020a8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fc4:	e056      	b.n	8002074 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fcc:	d052      	beq.n	8002074 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fce:	f7fe ff9d 	bl	8000f0c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d302      	bcc.n	8001fe4 <I2C_IsErrorOccurred+0x54>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d147      	bne.n	8002074 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ff6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002006:	d12e      	bne.n	8002066 <I2C_IsErrorOccurred+0xd6>
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800200e:	d02a      	beq.n	8002066 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002010:	7cfb      	ldrb	r3, [r7, #19]
 8002012:	2b20      	cmp	r3, #32
 8002014:	d027      	beq.n	8002066 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002024:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002026:	f7fe ff71 	bl	8000f0c <HAL_GetTick>
 800202a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800202c:	e01b      	b.n	8002066 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800202e:	f7fe ff6d 	bl	8000f0c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b19      	cmp	r3, #25
 800203a:	d914      	bls.n	8002066 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	f043 0220 	orr.w	r2, r3, #32
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b20      	cmp	r3, #32
 8002072:	d1dc      	bne.n	800202e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b20      	cmp	r3, #32
 8002080:	d003      	beq.n	800208a <I2C_IsErrorOccurred+0xfa>
 8002082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002086:	2b00      	cmp	r3, #0
 8002088:	d09d      	beq.n	8001fc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800208a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800208e:	2b00      	cmp	r3, #0
 8002090:	d103      	bne.n	800209a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2220      	movs	r2, #32
 8002098:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00b      	beq.n	80020f4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	f043 0308 	orr.w	r3, r3, #8
 80020e2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800210e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01c      	beq.n	8002158 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7ff fddc 	bl	8001cdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6859      	ldr	r1, [r3, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <I2C_IsErrorOccurred+0x1d4>)
 8002130:	400b      	ands	r3, r1
 8002132:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	431a      	orrs	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800215c:	4618      	mov	r0, r3
 800215e:	3728      	adds	r7, #40	; 0x28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	fe00e800 	.word	0xfe00e800

08002168 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	817b      	strh	r3, [r7, #10]
 8002176:	4613      	mov	r3, r2
 8002178:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800217a:	897b      	ldrh	r3, [r7, #10]
 800217c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002180:	7a7b      	ldrb	r3, [r7, #9]
 8002182:	041b      	lsls	r3, r3, #16
 8002184:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002188:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	4313      	orrs	r3, r2
 8002192:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002196:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <I2C_TransferConfig+0x60>)
 80021a8:	430b      	orrs	r3, r1
 80021aa:	43db      	mvns	r3, r3
 80021ac:	ea02 0103 	and.w	r1, r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	03ff63ff 	.word	0x03ff63ff

080021cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d138      	bne.n	8002254 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e032      	b.n	8002256 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2224      	movs	r2, #36	; 0x24
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800221e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6819      	ldr	r1, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0201 	orr.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	e000      	b.n	8002256 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002254:	2302      	movs	r3, #2
  }
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b20      	cmp	r3, #32
 8002276:	d139      	bne.n	80022ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002282:	2302      	movs	r3, #2
 8002284:	e033      	b.n	80022ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2224      	movs	r2, #36	; 0x24
 8002292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	e000      	b.n	80022ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022ec:	2302      	movs	r3, #2
  }
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002304:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800230c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	d101      	bne.n	800231a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e057      	b.n	80023ca <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002320:	d90a      	bls.n	8002338 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002322:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4313      	orrs	r3, r2
 800232e:	4a2a      	ldr	r2, [pc, #168]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002334:	60d3      	str	r3, [r2, #12]
 8002336:	e007      	b.n	8002348 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002340:	4925      	ldr	r1, [pc, #148]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4313      	orrs	r3, r2
 8002346:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002348:	4b24      	ldr	r3, [pc, #144]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a24      	ldr	r2, [pc, #144]	; (80023e0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	099b      	lsrs	r3, r3, #6
 8002354:	2232      	movs	r2, #50	; 0x32
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	3301      	adds	r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002366:	e002      	b.n	800236e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3b01      	subs	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800236e:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <HAL_PWREx_ControlVoltageScaling+0x84>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f3      	bne.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d01b      	beq.n	80023be <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a15      	ldr	r2, [pc, #84]	; (80023e0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	2232      	movs	r2, #50	; 0x32
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	099b      	lsrs	r3, r3, #6
 80023a0:	3301      	adds	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80023a4:	e002      	b.n	80023ac <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <HAL_PWREx_ControlVoltageScaling+0xc2>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f3      	bne.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e000      	b.n	80023ca <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	46020800 	.word	0x46020800
 80023dc:	20000008 	.word	0x20000008
 80023e0:	10624dd3 	.word	0x10624dd3

080023e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <HAL_PWREx_GetVoltageRange+0x18>)
 80023ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	46020800 	.word	0x46020800

08002400 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_PWREx_EnableVddIO2+0x1c>)
 800240a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800240e:	6113      	str	r3, [r2, #16]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	46020800 	.word	0x46020800

08002420 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08e      	sub	sp, #56	; 0x38
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	f000 bec3 	b.w	80031c0 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243a:	4b9c      	ldr	r3, [pc, #624]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002444:	4b99      	ldr	r3, [pc, #612]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8172 	beq.w	8002740 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <HAL_RCC_OscConfig+0x52>
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	2b0c      	cmp	r3, #12
 8002466:	f040 80e4 	bne.w	8002632 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	2b01      	cmp	r3, #1
 800246e:	f040 80e0 	bne.w	8002632 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002472:	4b8e      	ldr	r3, [pc, #568]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d006      	beq.n	800248c <HAL_RCC_OscConfig+0x6c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	f000 be9a 	b.w	80031c0 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002490:	4b86      	ldr	r3, [pc, #536]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <HAL_RCC_OscConfig+0x86>
 800249c:	4b83      	ldr	r3, [pc, #524]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80024a4:	e005      	b.n	80024b2 <HAL_RCC_OscConfig+0x92>
 80024a6:	4b81      	ldr	r3, [pc, #516]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 80024a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024ac:	041b      	lsls	r3, r3, #16
 80024ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d255      	bcs.n	8002562 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	4618      	mov	r0, r3
 80024c2:	f001 f9e3 	bl	800388c <RCC_SetFlashLatencyFromMSIRange>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	f000 be77 	b.w	80031c0 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80024d2:	4b76      	ldr	r3, [pc, #472]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	4a75      	ldr	r2, [pc, #468]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 80024d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024dc:	6093      	str	r3, [r2, #8]
 80024de:	4b73      	ldr	r3, [pc, #460]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	4970      	ldr	r1, [pc, #448]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80024f8:	d309      	bcc.n	800250e <HAL_RCC_OscConfig+0xee>
 80024fa:	4b6c      	ldr	r3, [pc, #432]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f023 021f 	bic.w	r2, r3, #31
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4969      	ldr	r1, [pc, #420]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002508:	4313      	orrs	r3, r2
 800250a:	60cb      	str	r3, [r1, #12]
 800250c:	e07e      	b.n	800260c <HAL_RCC_OscConfig+0x1ec>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	da0a      	bge.n	800252c <HAL_RCC_OscConfig+0x10c>
 8002516:	4b65      	ldr	r3, [pc, #404]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	015b      	lsls	r3, r3, #5
 8002524:	4961      	ldr	r1, [pc, #388]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002526:	4313      	orrs	r3, r2
 8002528:	60cb      	str	r3, [r1, #12]
 800252a:	e06f      	b.n	800260c <HAL_RCC_OscConfig+0x1ec>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d30a      	bcc.n	800254c <HAL_RCC_OscConfig+0x12c>
 8002536:	4b5d      	ldr	r3, [pc, #372]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	029b      	lsls	r3, r3, #10
 8002544:	4959      	ldr	r1, [pc, #356]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002546:	4313      	orrs	r3, r2
 8002548:	60cb      	str	r3, [r1, #12]
 800254a:	e05f      	b.n	800260c <HAL_RCC_OscConfig+0x1ec>
 800254c:	4b57      	ldr	r3, [pc, #348]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	03db      	lsls	r3, r3, #15
 800255a:	4954      	ldr	r1, [pc, #336]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 800255c:	4313      	orrs	r3, r2
 800255e:	60cb      	str	r3, [r1, #12]
 8002560:	e054      	b.n	800260c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002562:	4b52      	ldr	r3, [pc, #328]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4a51      	ldr	r2, [pc, #324]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002568:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800256c:	6093      	str	r3, [r2, #8]
 800256e:	4b4f      	ldr	r3, [pc, #316]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	494c      	ldr	r1, [pc, #304]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 800257c:	4313      	orrs	r3, r2
 800257e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002588:	d309      	bcc.n	800259e <HAL_RCC_OscConfig+0x17e>
 800258a:	4b48      	ldr	r3, [pc, #288]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f023 021f 	bic.w	r2, r3, #31
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4945      	ldr	r1, [pc, #276]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002598:	4313      	orrs	r3, r2
 800259a:	60cb      	str	r3, [r1, #12]
 800259c:	e028      	b.n	80025f0 <HAL_RCC_OscConfig+0x1d0>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	da0a      	bge.n	80025bc <HAL_RCC_OscConfig+0x19c>
 80025a6:	4b41      	ldr	r3, [pc, #260]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	015b      	lsls	r3, r3, #5
 80025b4:	493d      	ldr	r1, [pc, #244]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60cb      	str	r3, [r1, #12]
 80025ba:	e019      	b.n	80025f0 <HAL_RCC_OscConfig+0x1d0>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c4:	d30a      	bcc.n	80025dc <HAL_RCC_OscConfig+0x1bc>
 80025c6:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	029b      	lsls	r3, r3, #10
 80025d4:	4935      	ldr	r1, [pc, #212]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60cb      	str	r3, [r1, #12]
 80025da:	e009      	b.n	80025f0 <HAL_RCC_OscConfig+0x1d0>
 80025dc:	4b33      	ldr	r3, [pc, #204]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	03db      	lsls	r3, r3, #15
 80025ea:	4930      	ldr	r1, [pc, #192]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 f946 	bl	800388c <RCC_SetFlashLatencyFromMSIRange>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	f000 bdda 	b.w	80031c0 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800260c:	f001 f8d8 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_RCC_OscConfig+0x290>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe fa7f 	bl	8000b18 <HAL_InitTick>
 800261a:	4603      	mov	r3, r0
 800261c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 808a 	beq.w	800273e <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800262a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800262e:	f000 bdc7 	b.w	80031c0 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d066      	beq.n	8002708 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1b      	ldr	r2, [pc, #108]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002646:	f7fe fc61 	bl	8000f0c <HAL_GetTick>
 800264a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800264c:	e009      	b.n	8002662 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800264e:	f7fe fc5d 	bl	8000f0c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d902      	bls.n	8002662 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	f000 bdaf 	b.w	80031c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0ef      	beq.n	800264e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002674:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002678:	6093      	str	r3, [r2, #8]
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	4909      	ldr	r1, [pc, #36]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002688:	4313      	orrs	r3, r2
 800268a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002694:	d30e      	bcc.n	80026b4 <HAL_RCC_OscConfig+0x294>
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f023 021f 	bic.w	r2, r3, #31
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4902      	ldr	r1, [pc, #8]	; (80026ac <HAL_RCC_OscConfig+0x28c>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60cb      	str	r3, [r1, #12]
 80026a8:	e04a      	b.n	8002740 <HAL_RCC_OscConfig+0x320>
 80026aa:	bf00      	nop
 80026ac:	46020c00 	.word	0x46020c00
 80026b0:	2000000c 	.word	0x2000000c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	da0a      	bge.n	80026d2 <HAL_RCC_OscConfig+0x2b2>
 80026bc:	4b9b      	ldr	r3, [pc, #620]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	015b      	lsls	r3, r3, #5
 80026ca:	4998      	ldr	r1, [pc, #608]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60cb      	str	r3, [r1, #12]
 80026d0:	e036      	b.n	8002740 <HAL_RCC_OscConfig+0x320>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026da:	d30a      	bcc.n	80026f2 <HAL_RCC_OscConfig+0x2d2>
 80026dc:	4b93      	ldr	r3, [pc, #588]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	029b      	lsls	r3, r3, #10
 80026ea:	4990      	ldr	r1, [pc, #576]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60cb      	str	r3, [r1, #12]
 80026f0:	e026      	b.n	8002740 <HAL_RCC_OscConfig+0x320>
 80026f2:	4b8e      	ldr	r3, [pc, #568]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	03db      	lsls	r3, r3, #15
 8002700:	498a      	ldr	r1, [pc, #552]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 8002702:	4313      	orrs	r3, r2
 8002704:	60cb      	str	r3, [r1, #12]
 8002706:	e01b      	b.n	8002740 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002708:	4b88      	ldr	r3, [pc, #544]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a87      	ldr	r2, [pc, #540]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 800270e:	f023 0301 	bic.w	r3, r3, #1
 8002712:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002714:	f7fe fbfa 	bl	8000f0c <HAL_GetTick>
 8002718:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800271a:	e009      	b.n	8002730 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800271c:	f7fe fbf6 	bl	8000f0c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d902      	bls.n	8002730 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	f000 bd48 	b.w	80031c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002730:	4b7e      	ldr	r3, [pc, #504]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1ef      	bne.n	800271c <HAL_RCC_OscConfig+0x2fc>
 800273c:	e000      	b.n	8002740 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800273e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 8094 	beq.w	8002876 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	2b08      	cmp	r3, #8
 8002752:	d005      	beq.n	8002760 <HAL_RCC_OscConfig+0x340>
 8002754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d110      	bne.n	800277c <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	2b03      	cmp	r3, #3
 800275e:	d10d      	bne.n	800277c <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	4b72      	ldr	r3, [pc, #456]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8083 	beq.w	8002874 <HAL_RCC_OscConfig+0x454>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d17e      	bne.n	8002874 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	f000 bd22 	b.w	80031c0 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002784:	d106      	bne.n	8002794 <HAL_RCC_OscConfig+0x374>
 8002786:	4b69      	ldr	r3, [pc, #420]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a68      	ldr	r2, [pc, #416]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e041      	b.n	8002818 <HAL_RCC_OscConfig+0x3f8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800279c:	d112      	bne.n	80027c4 <HAL_RCC_OscConfig+0x3a4>
 800279e:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a62      	ldr	r2, [pc, #392]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b60      	ldr	r3, [pc, #384]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a5f      	ldr	r2, [pc, #380]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80027b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b5d      	ldr	r3, [pc, #372]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a5c      	ldr	r2, [pc, #368]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e029      	b.n	8002818 <HAL_RCC_OscConfig+0x3f8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80027cc:	d112      	bne.n	80027f4 <HAL_RCC_OscConfig+0x3d4>
 80027ce:	4b57      	ldr	r3, [pc, #348]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a56      	ldr	r2, [pc, #344]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80027d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4b54      	ldr	r3, [pc, #336]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a53      	ldr	r2, [pc, #332]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80027e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b51      	ldr	r3, [pc, #324]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a50      	ldr	r2, [pc, #320]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e011      	b.n	8002818 <HAL_RCC_OscConfig+0x3f8>
 80027f4:	4b4d      	ldr	r3, [pc, #308]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a4c      	ldr	r2, [pc, #304]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80027fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b4a      	ldr	r3, [pc, #296]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a49      	ldr	r2, [pc, #292]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 8002806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a46      	ldr	r2, [pc, #280]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 8002812:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d014      	beq.n	800284a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8002820:	f7fe fb74 	bl	8000f0c <HAL_GetTick>
 8002824:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002826:	e009      	b.n	800283c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe fb70 	bl	8000f0c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d902      	bls.n	800283c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	f000 bcc2 	b.w	80031c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800283c:	4b3b      	ldr	r3, [pc, #236]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ef      	beq.n	8002828 <HAL_RCC_OscConfig+0x408>
 8002848:	e015      	b.n	8002876 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800284a:	f7fe fb5f 	bl	8000f0c <HAL_GetTick>
 800284e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002850:	e009      	b.n	8002866 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002852:	f7fe fb5b 	bl	8000f0c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b64      	cmp	r3, #100	; 0x64
 800285e:	d902      	bls.n	8002866 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	f000 bcad 	b.w	80031c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002866:	4b31      	ldr	r3, [pc, #196]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1ef      	bne.n	8002852 <HAL_RCC_OscConfig+0x432>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d066      	beq.n	8002950 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	2b04      	cmp	r3, #4
 8002886:	d005      	beq.n	8002894 <HAL_RCC_OscConfig+0x474>
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d11a      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	2b02      	cmp	r3, #2
 8002892:	d117      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002894:	4b25      	ldr	r3, [pc, #148]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d006      	beq.n	80028ae <HAL_RCC_OscConfig+0x48e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d102      	bne.n	80028ae <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f000 bc89 	b.w	80031c0 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80028ae:	4b1f      	ldr	r3, [pc, #124]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	041b      	lsls	r3, r3, #16
 80028bc:	491b      	ldr	r1, [pc, #108]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028c2:	e045      	b.n	8002950 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d024      	beq.n	8002916 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80028cc:	4b17      	ldr	r3, [pc, #92]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a16      	ldr	r2, [pc, #88]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80028d8:	f7fe fb18 	bl	8000f0c <HAL_GetTick>
 80028dc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028de:	e009      	b.n	80028f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e0:	f7fe fb14 	bl	8000f0c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d902      	bls.n	80028f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	f000 bc66 	b.w	80031c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f4:	4b0d      	ldr	r3, [pc, #52]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ef      	beq.n	80028e0 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	041b      	lsls	r3, r3, #16
 800290e:	4907      	ldr	r1, [pc, #28]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 8002910:	4313      	orrs	r3, r2
 8002912:	610b      	str	r3, [r1, #16]
 8002914:	e01c      	b.n	8002950 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a04      	ldr	r2, [pc, #16]	; (800292c <HAL_RCC_OscConfig+0x50c>)
 800291c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002920:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002922:	f7fe faf3 	bl	8000f0c <HAL_GetTick>
 8002926:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002928:	e00c      	b.n	8002944 <HAL_RCC_OscConfig+0x524>
 800292a:	bf00      	nop
 800292c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002930:	f7fe faec 	bl	8000f0c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d902      	bls.n	8002944 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	f000 bc3e 	b.w	80031c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002944:	4baf      	ldr	r3, [pc, #700]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ef      	bne.n	8002930 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80c7 	beq.w	8002aec <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002964:	4ba7      	ldr	r3, [pc, #668]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d111      	bne.n	8002996 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002972:	4ba4      	ldr	r3, [pc, #656]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002978:	4aa2      	ldr	r2, [pc, #648]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002982:	4ba0      	ldr	r3, [pc, #640]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002990:	2301      	movs	r3, #1
 8002992:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002996:	4b9c      	ldr	r3, [pc, #624]	; (8002c08 <HAL_RCC_OscConfig+0x7e8>)
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d118      	bne.n	80029d4 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80029a2:	4b99      	ldr	r3, [pc, #612]	; (8002c08 <HAL_RCC_OscConfig+0x7e8>)
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	4a98      	ldr	r2, [pc, #608]	; (8002c08 <HAL_RCC_OscConfig+0x7e8>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ae:	f7fe faad 	bl	8000f0c <HAL_GetTick>
 80029b2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b6:	f7fe faa9 	bl	8000f0c <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e3fb      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029c8:	4b8f      	ldr	r3, [pc, #572]	; (8002c08 <HAL_RCC_OscConfig+0x7e8>)
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d05f      	beq.n	8002a9c <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80029dc:	4b89      	ldr	r3, [pc, #548]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 80029de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029e2:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699a      	ldr	r2, [r3, #24]
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d037      	beq.n	8002a62 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d006      	beq.n	8002a0a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e3da      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01b      	beq.n	8002a4c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8002a14:	4b7b      	ldr	r3, [pc, #492]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a1a:	4a7a      	ldr	r2, [pc, #488]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002a1c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002a20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002a24:	f7fe fa72 	bl	8000f0c <HAL_GetTick>
 8002a28:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2c:	f7fe fa6e 	bl	8000f0c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e3c0      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a3e:	4b71      	ldr	r3, [pc, #452]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1ef      	bne.n	8002a2c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002a4c:	4b6d      	ldr	r3, [pc, #436]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	496a      	ldr	r1, [pc, #424]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002a62:	4b68      	ldr	r3, [pc, #416]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a68:	4a66      	ldr	r2, [pc, #408]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002a6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002a72:	f7fe fa4b 	bl	8000f0c <HAL_GetTick>
 8002a76:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7a:	f7fe fa47 	bl	8000f0c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e399      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002a8c:	4b5d      	ldr	r3, [pc, #372]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ef      	beq.n	8002a7a <HAL_RCC_OscConfig+0x65a>
 8002a9a:	e01b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002a9c:	4b59      	ldr	r3, [pc, #356]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002aa2:	4a58      	ldr	r2, [pc, #352]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002aa4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002aa8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002aac:	f7fe fa2e 	bl	8000f0c <HAL_GetTick>
 8002ab0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab4:	f7fe fa2a 	bl	8000f0c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e37c      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002ac6:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ef      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ad4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d107      	bne.n	8002aec <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002adc:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae2:	4a48      	ldr	r2, [pc, #288]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002ae4:	f023 0304 	bic.w	r3, r3, #4
 8002ae8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8112 	beq.w	8002d1e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b00:	4b40      	ldr	r3, [pc, #256]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d111      	bne.n	8002b32 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b14:	4a3b      	ldr	r2, [pc, #236]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002b1e:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b32:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <HAL_RCC_OscConfig+0x7e8>)
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d118      	bne.n	8002b70 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002b3e:	4b32      	ldr	r3, [pc, #200]	; (8002c08 <HAL_RCC_OscConfig+0x7e8>)
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	4a31      	ldr	r2, [pc, #196]	; (8002c08 <HAL_RCC_OscConfig+0x7e8>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4a:	f7fe f9df 	bl	8000f0c <HAL_GetTick>
 8002b4e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b52:	f7fe f9db 	bl	8000f0c <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e32d      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b64:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <HAL_RCC_OscConfig+0x7e8>)
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01f      	beq.n	8002bbc <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d010      	beq.n	8002baa <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b88:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b8e:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b98:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b9e:	4a19      	ldr	r2, [pc, #100]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ba8:	e018      	b.n	8002bdc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bb0:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002bba:	e00f      	b.n	8002bdc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bc2:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bd2:	4a0c      	ldr	r2, [pc, #48]	; (8002c04 <HAL_RCC_OscConfig+0x7e4>)
 8002bd4:	f023 0304 	bic.w	r3, r3, #4
 8002bd8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d058      	beq.n	8002c96 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8002be4:	f7fe f992 	bl	8000f0c <HAL_GetTick>
 8002be8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bea:	e00f      	b.n	8002c0c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f7fe f98e 	bl	8000f0c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d906      	bls.n	8002c0c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e2de      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
 8002c02:	bf00      	nop
 8002c04:	46020c00 	.word	0x46020c00
 8002c08:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0c:	4b9c      	ldr	r3, [pc, #624]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002c0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0e8      	beq.n	8002bec <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01b      	beq.n	8002c5e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c26:	4b96      	ldr	r3, [pc, #600]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c2c:	4a94      	ldr	r2, [pc, #592]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c38:	f7fe f968 	bl	8000f0c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e2b8      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c4e:	4b8c      	ldr	r3, [pc, #560]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ed      	beq.n	8002c38 <HAL_RCC_OscConfig+0x818>
 8002c5c:	e053      	b.n	8002d06 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c5e:	4b88      	ldr	r3, [pc, #544]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c64:	4a86      	ldr	r2, [pc, #536]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c70:	f7fe f94c 	bl	8000f0c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e29c      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c86:	4b7e      	ldr	r3, [pc, #504]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ed      	bne.n	8002c70 <HAL_RCC_OscConfig+0x850>
 8002c94:	e037      	b.n	8002d06 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002c96:	f7fe f939 	bl	8000f0c <HAL_GetTick>
 8002c9a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fe f935 	bl	8000f0c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e285      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cb4:	4b72      	ldr	r3, [pc, #456]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1ed      	bne.n	8002c9e <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002cc2:	4b6f      	ldr	r3, [pc, #444]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01a      	beq.n	8002d06 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002cd0:	4b6b      	ldr	r3, [pc, #428]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002cd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cd6:	4a6a      	ldr	r2, [pc, #424]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cdc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7fe f913 	bl	8000f0c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e263      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cf8:	4b61      	ldr	r3, [pc, #388]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1ed      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d06:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0e:	4b5c      	ldr	r3, [pc, #368]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d14:	4a5a      	ldr	r2, [pc, #360]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002d16:	f023 0304 	bic.w	r3, r3, #4
 8002d1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d036      	beq.n	8002d98 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d019      	beq.n	8002d66 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002d32:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a52      	ldr	r2, [pc, #328]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002d38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d3c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d3e:	f7fe f8e5 	bl	8000f0c <HAL_GetTick>
 8002d42:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d46:	f7fe f8e1 	bl	8000f0c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e233      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002d58:	4b49      	ldr	r3, [pc, #292]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x926>
 8002d64:	e018      	b.n	8002d98 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002d66:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a45      	ldr	r2, [pc, #276]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d70:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d72:	f7fe f8cb 	bl	8000f0c <HAL_GetTick>
 8002d76:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d7a:	f7fe f8c7 	bl	8000f0c <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e219      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002d8c:	4b3c      	ldr	r3, [pc, #240]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f0      	bne.n	8002d7a <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d036      	beq.n	8002e12 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d019      	beq.n	8002de0 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002dac:	4b34      	ldr	r3, [pc, #208]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a33      	ldr	r2, [pc, #204]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002db8:	f7fe f8a8 	bl	8000f0c <HAL_GetTick>
 8002dbc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002dc0:	f7fe f8a4 	bl	8000f0c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e1f6      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002dd2:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x9a0>
 8002dde:	e018      	b.n	8002e12 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a26      	ldr	r2, [pc, #152]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002dec:	f7fe f88e 	bl	8000f0c <HAL_GetTick>
 8002df0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002df4:	f7fe f88a 	bl	8000f0c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e1dc      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002e06:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d07f      	beq.n	8002f1e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d062      	beq.n	8002eec <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e30:	6093      	str	r3, [r2, #8]
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	4910      	ldr	r1, [pc, #64]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002e4c:	d309      	bcc.n	8002e62 <HAL_RCC_OscConfig+0xa42>
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f023 021f 	bic.w	r2, r3, #31
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4909      	ldr	r1, [pc, #36]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60cb      	str	r3, [r1, #12]
 8002e60:	e02a      	b.n	8002eb8 <HAL_RCC_OscConfig+0xa98>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	da0c      	bge.n	8002e84 <HAL_RCC_OscConfig+0xa64>
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	015b      	lsls	r3, r3, #5
 8002e78:	4901      	ldr	r1, [pc, #4]	; (8002e80 <HAL_RCC_OscConfig+0xa60>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60cb      	str	r3, [r1, #12]
 8002e7e:	e01b      	b.n	8002eb8 <HAL_RCC_OscConfig+0xa98>
 8002e80:	46020c00 	.word	0x46020c00
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8c:	d30a      	bcc.n	8002ea4 <HAL_RCC_OscConfig+0xa84>
 8002e8e:	4ba5      	ldr	r3, [pc, #660]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	029b      	lsls	r3, r3, #10
 8002e9c:	49a1      	ldr	r1, [pc, #644]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60cb      	str	r3, [r1, #12]
 8002ea2:	e009      	b.n	8002eb8 <HAL_RCC_OscConfig+0xa98>
 8002ea4:	4b9f      	ldr	r3, [pc, #636]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	03db      	lsls	r3, r3, #15
 8002eb2:	499c      	ldr	r1, [pc, #624]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002eb8:	4b9a      	ldr	r3, [pc, #616]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a99      	ldr	r2, [pc, #612]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002ebe:	f043 0310 	orr.w	r3, r3, #16
 8002ec2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002ec4:	f7fe f822 	bl	8000f0c <HAL_GetTick>
 8002ec8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002ecc:	f7fe f81e 	bl	8000f0c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e170      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002ede:	4b91      	ldr	r3, [pc, #580]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0xaac>
 8002eea:	e018      	b.n	8002f1e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002eec:	4b8d      	ldr	r3, [pc, #564]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a8c      	ldr	r2, [pc, #560]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002ef2:	f023 0310 	bic.w	r3, r3, #16
 8002ef6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002ef8:	f7fe f808 	bl	8000f0c <HAL_GetTick>
 8002efc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002f00:	f7fe f804 	bl	8000f0c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e156      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002f12:	4b84      	ldr	r3, [pc, #528]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 814b 	beq.w	80031be <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f2e:	4b7d      	ldr	r3, [pc, #500]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	f000 80fa 	beq.w	8003130 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	f040 80cc 	bne.w	80030de <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002f46:	4b77      	ldr	r3, [pc, #476]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a76      	ldr	r2, [pc, #472]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f50:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f52:	f7fd ffdb 	bl	8000f0c <HAL_GetTick>
 8002f56:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5a:	f7fd ffd7 	bl	8000f0c <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e129      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f6c:	4b6d      	ldr	r3, [pc, #436]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f0      	bne.n	8002f5a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f78:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d111      	bne.n	8002faa <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	4b67      	ldr	r3, [pc, #412]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8c:	4a65      	ldr	r2, [pc, #404]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002f8e:	f043 0304 	orr.w	r3, r3, #4
 8002f92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002f96:	4b63      	ldr	r3, [pc, #396]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002faa:	4b5f      	ldr	r3, [pc, #380]	; (8003128 <HAL_RCC_OscConfig+0xd08>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fb6:	d102      	bne.n	8002fbe <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002fbe:	4b5a      	ldr	r3, [pc, #360]	; (8003128 <HAL_RCC_OscConfig+0xd08>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	4a59      	ldr	r2, [pc, #356]	; (8003128 <HAL_RCC_OscConfig+0xd08>)
 8002fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002fca:	4b56      	ldr	r3, [pc, #344]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd2:	f023 0303 	bic.w	r3, r3, #3
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fde:	3a01      	subs	r2, #1
 8002fe0:	0212      	lsls	r2, r2, #8
 8002fe2:	4311      	orrs	r1, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	494e      	ldr	r1, [pc, #312]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	628b      	str	r3, [r1, #40]	; 0x28
 8002ff0:	4b4c      	ldr	r3, [pc, #304]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8002ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff4:	4b4d      	ldr	r3, [pc, #308]	; (800312c <HAL_RCC_OscConfig+0xd0c>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ffc:	3a01      	subs	r2, #1
 8002ffe:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003006:	3a01      	subs	r2, #1
 8003008:	0252      	lsls	r2, r2, #9
 800300a:	b292      	uxth	r2, r2
 800300c:	4311      	orrs	r1, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003012:	3a01      	subs	r2, #1
 8003014:	0412      	lsls	r2, r2, #16
 8003016:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800301a:	4311      	orrs	r1, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003020:	3a01      	subs	r2, #1
 8003022:	0612      	lsls	r2, r2, #24
 8003024:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003028:	430a      	orrs	r2, r1
 800302a:	493e      	ldr	r1, [pc, #248]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 800302c:	4313      	orrs	r3, r2
 800302e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003030:	4b3c      	ldr	r3, [pc, #240]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	4a3b      	ldr	r2, [pc, #236]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8003036:	f023 0310 	bic.w	r3, r3, #16
 800303a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800303c:	4b39      	ldr	r3, [pc, #228]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003044:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800304c:	00d2      	lsls	r2, r2, #3
 800304e:	4935      	ldr	r1, [pc, #212]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8003050:	4313      	orrs	r3, r2
 8003052:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003054:	4b33      	ldr	r3, [pc, #204]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	4a32      	ldr	r2, [pc, #200]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 800305a:	f043 0310 	orr.w	r3, r3, #16
 800305e:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003060:	4b30      	ldr	r3, [pc, #192]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	f023 020c 	bic.w	r2, r3, #12
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	492d      	ldr	r1, [pc, #180]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 800306e:	4313      	orrs	r3, r2
 8003070:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003072:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003076:	2b01      	cmp	r3, #1
 8003078:	d105      	bne.n	8003086 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800307a:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <HAL_RCC_OscConfig+0xd08>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	4a2a      	ldr	r2, [pc, #168]	; (8003128 <HAL_RCC_OscConfig+0xd08>)
 8003080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003084:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003086:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800308a:	2b01      	cmp	r3, #1
 800308c:	d107      	bne.n	800309e <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b25      	ldr	r3, [pc, #148]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8003090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003094:	4a23      	ldr	r2, [pc, #140]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8003096:	f023 0304 	bic.w	r3, r3, #4
 800309a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800309e:	4b21      	ldr	r3, [pc, #132]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	4a20      	ldr	r2, [pc, #128]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 80030a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80030aa:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 80030b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80030b6:	f7fd ff29 	bl	8000f0c <HAL_GetTick>
 80030ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030be:	f7fd ff25 	bl	8000f0c <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e077      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0xc9e>
 80030dc:	e06f      	b.n	80031be <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a10      	ldr	r2, [pc, #64]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 80030e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80030ea:	f7fd ff0f 	bl	8000f0c <HAL_GetTick>
 80030ee:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fd ff0b 	bl	8000f0c <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e05d      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003104:	4b07      	ldr	r3, [pc, #28]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	4a03      	ldr	r2, [pc, #12]	; (8003124 <HAL_RCC_OscConfig+0xd04>)
 8003116:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800311a:	f023 0303 	bic.w	r3, r3, #3
 800311e:	6293      	str	r3, [r2, #40]	; 0x28
 8003120:	e04d      	b.n	80031be <HAL_RCC_OscConfig+0xd9e>
 8003122:	bf00      	nop
 8003124:	46020c00 	.word	0x46020c00
 8003128:	46020800 	.word	0x46020800
 800312c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003130:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <HAL_RCC_OscConfig+0xda8>)
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003136:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <HAL_RCC_OscConfig+0xda8>)
 8003138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	2b01      	cmp	r3, #1
 8003142:	d03a      	beq.n	80031ba <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f003 0203 	and.w	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d133      	bne.n	80031ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d12a      	bne.n	80031ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	0b1b      	lsrs	r3, r3, #12
 8003168:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d122      	bne.n	80031ba <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d11a      	bne.n	80031ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	0a5b      	lsrs	r3, r3, #9
 8003188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003190:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d111      	bne.n	80031ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d108      	bne.n	80031ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	0e1b      	lsrs	r3, r3, #24
 80031ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d001      	beq.n	80031be <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3738      	adds	r7, #56	; 0x38
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	46020c00 	.word	0x46020c00

080031cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e1d9      	b.n	8003594 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b9b      	ldr	r3, [pc, #620]	; (8003450 <HAL_RCC_ClockConfig+0x284>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d910      	bls.n	8003210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b98      	ldr	r3, [pc, #608]	; (8003450 <HAL_RCC_ClockConfig+0x284>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 020f 	bic.w	r2, r3, #15
 80031f6:	4996      	ldr	r1, [pc, #600]	; (8003450 <HAL_RCC_ClockConfig+0x284>)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b94      	ldr	r3, [pc, #592]	; (8003450 <HAL_RCC_ClockConfig+0x284>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e1c1      	b.n	8003594 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	4b8c      	ldr	r3, [pc, #560]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003228:	429a      	cmp	r2, r3
 800322a:	d908      	bls.n	800323e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800322c:	4b89      	ldr	r3, [pc, #548]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	4986      	ldr	r1, [pc, #536]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 800323a:	4313      	orrs	r3, r2
 800323c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d012      	beq.n	8003270 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	4b81      	ldr	r3, [pc, #516]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003258:	429a      	cmp	r2, r3
 800325a:	d909      	bls.n	8003270 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800325c:	4b7d      	ldr	r3, [pc, #500]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	497a      	ldr	r1, [pc, #488]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 800326c:	4313      	orrs	r3, r2
 800326e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d010      	beq.n	800329e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	4b74      	ldr	r3, [pc, #464]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003288:	429a      	cmp	r2, r3
 800328a:	d908      	bls.n	800329e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b71      	ldr	r3, [pc, #452]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	496e      	ldr	r1, [pc, #440]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 800329a:	4313      	orrs	r3, r2
 800329c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d010      	beq.n	80032cc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	4b69      	ldr	r3, [pc, #420]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d908      	bls.n	80032cc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80032ba:	4b66      	ldr	r3, [pc, #408]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f023 020f 	bic.w	r2, r3, #15
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	4963      	ldr	r1, [pc, #396]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80d2 	beq.w	800347e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80032da:	2300      	movs	r3, #0
 80032dc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d143      	bne.n	800336e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032e6:	4b5b      	ldr	r3, [pc, #364]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 80032e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d110      	bne.n	8003316 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80032f4:	4b57      	ldr	r3, [pc, #348]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 80032f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fa:	4a56      	ldr	r2, [pc, #344]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 80032fc:	f043 0304 	orr.w	r3, r3, #4
 8003300:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003304:	4b53      	ldr	r3, [pc, #332]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 8003306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003316:	f7fd fdf9 	bl	8000f0c <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800331c:	4b4e      	ldr	r3, [pc, #312]	; (8003458 <HAL_RCC_ClockConfig+0x28c>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00f      	beq.n	8003348 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003328:	e008      	b.n	800333c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800332a:	f7fd fdef 	bl	8000f0c <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e12b      	b.n	8003594 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800333c:	4b46      	ldr	r3, [pc, #280]	; (8003458 <HAL_RCC_ClockConfig+0x28c>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003348:	7dfb      	ldrb	r3, [r7, #23]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800334e:	4b41      	ldr	r3, [pc, #260]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 8003350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003354:	4a3f      	ldr	r2, [pc, #252]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 8003356:	f023 0304 	bic.w	r3, r3, #4
 800335a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800335e:	4b3d      	ldr	r3, [pc, #244]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d121      	bne.n	80033ae <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e112      	b.n	8003594 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d107      	bne.n	8003386 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003376:	4b37      	ldr	r3, [pc, #220]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d115      	bne.n	80033ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e106      	b.n	8003594 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800338e:	4b31      	ldr	r3, [pc, #196]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0fa      	b.n	8003594 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800339e:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e0f2      	b.n	8003594 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80033ae:	4b29      	ldr	r3, [pc, #164]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f023 0203 	bic.w	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4926      	ldr	r1, [pc, #152]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80033c0:	f7fd fda4 	bl	8000f0c <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d112      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d0:	f7fd fd9c 	bl	8000f0c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e0d6      	b.n	8003594 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e6:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d1ee      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x204>
 80033f2:	e044      	b.n	800347e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d112      	bne.n	8003422 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fe:	f7fd fd85 	bl	8000f0c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0bf      	b.n	8003594 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b08      	cmp	r3, #8
 800341e:	d1ee      	bne.n	80033fe <HAL_RCC_ClockConfig+0x232>
 8003420:	e02d      	b.n	800347e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d123      	bne.n	8003472 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800342a:	e00a      	b.n	8003442 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342c:	f7fd fd6e 	bl	8000f0c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e0a8      	b.n	8003594 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <HAL_RCC_ClockConfig+0x288>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1ee      	bne.n	800342c <HAL_RCC_ClockConfig+0x260>
 800344e:	e016      	b.n	800347e <HAL_RCC_ClockConfig+0x2b2>
 8003450:	40022000 	.word	0x40022000
 8003454:	46020c00 	.word	0x46020c00
 8003458:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800345c:	f7fd fd56 	bl	8000f0c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e090      	b.n	8003594 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003472:	4b4a      	ldr	r3, [pc, #296]	; (800359c <HAL_RCC_ClockConfig+0x3d0>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b04      	cmp	r3, #4
 800347c:	d1ee      	bne.n	800345c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d010      	beq.n	80034ac <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	4b43      	ldr	r3, [pc, #268]	; (800359c <HAL_RCC_ClockConfig+0x3d0>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	429a      	cmp	r2, r3
 8003498:	d208      	bcs.n	80034ac <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800349a:	4b40      	ldr	r3, [pc, #256]	; (800359c <HAL_RCC_ClockConfig+0x3d0>)
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f023 020f 	bic.w	r2, r3, #15
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	493d      	ldr	r1, [pc, #244]	; (800359c <HAL_RCC_ClockConfig+0x3d0>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ac:	4b3c      	ldr	r3, [pc, #240]	; (80035a0 <HAL_RCC_ClockConfig+0x3d4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d210      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ba:	4b39      	ldr	r3, [pc, #228]	; (80035a0 <HAL_RCC_ClockConfig+0x3d4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 020f 	bic.w	r2, r3, #15
 80034c2:	4937      	ldr	r1, [pc, #220]	; (80035a0 <HAL_RCC_ClockConfig+0x3d4>)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <HAL_RCC_ClockConfig+0x3d4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e05b      	b.n	8003594 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d010      	beq.n	800350a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	4b2b      	ldr	r3, [pc, #172]	; (800359c <HAL_RCC_ClockConfig+0x3d0>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d208      	bcs.n	800350a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4b28      	ldr	r3, [pc, #160]	; (800359c <HAL_RCC_ClockConfig+0x3d0>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4925      	ldr	r1, [pc, #148]	; (800359c <HAL_RCC_ClockConfig+0x3d0>)
 8003506:	4313      	orrs	r3, r2
 8003508:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d012      	beq.n	800353c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	4b20      	ldr	r3, [pc, #128]	; (800359c <HAL_RCC_ClockConfig+0x3d0>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003524:	429a      	cmp	r2, r3
 8003526:	d209      	bcs.n	800353c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003528:	4b1c      	ldr	r3, [pc, #112]	; (800359c <HAL_RCC_ClockConfig+0x3d0>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	4919      	ldr	r1, [pc, #100]	; (800359c <HAL_RCC_ClockConfig+0x3d0>)
 8003538:	4313      	orrs	r3, r2
 800353a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	d010      	beq.n	800356a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	4b13      	ldr	r3, [pc, #76]	; (800359c <HAL_RCC_ClockConfig+0x3d0>)
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003554:	429a      	cmp	r2, r3
 8003556:	d208      	bcs.n	800356a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003558:	4b10      	ldr	r3, [pc, #64]	; (800359c <HAL_RCC_ClockConfig+0x3d0>)
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	490d      	ldr	r1, [pc, #52]	; (800359c <HAL_RCC_ClockConfig+0x3d0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800356a:	f000 f821 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 800356e:	4602      	mov	r2, r0
 8003570:	4b0a      	ldr	r3, [pc, #40]	; (800359c <HAL_RCC_ClockConfig+0x3d0>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	490a      	ldr	r1, [pc, #40]	; (80035a4 <HAL_RCC_ClockConfig+0x3d8>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
 8003580:	4a09      	ldr	r2, [pc, #36]	; (80035a8 <HAL_RCC_ClockConfig+0x3dc>)
 8003582:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_RCC_ClockConfig+0x3e0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7fd fac5 	bl	8000b18 <HAL_InitTick>
 800358e:	4603      	mov	r3, r0
 8003590:	73fb      	strb	r3, [r7, #15]

  return status;
 8003592:	7bfb      	ldrb	r3, [r7, #15]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	46020c00 	.word	0x46020c00
 80035a0:	40022000 	.word	0x40022000
 80035a4:	080073c0 	.word	0x080073c0
 80035a8:	20000008 	.word	0x20000008
 80035ac:	2000000c 	.word	0x2000000c

080035b0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b08b      	sub	sp, #44	; 0x2c
 80035b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035be:	4b7b      	ldr	r3, [pc, #492]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035c8:	4b78      	ldr	r3, [pc, #480]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_GetSysClockFreq+0x34>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d121      	bne.n	8003622 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d11e      	bne.n	8003622 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80035e4:	4b71      	ldr	r3, [pc, #452]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d107      	bne.n	8003600 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80035f0:	4b6e      	ldr	r3, [pc, #440]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 80035f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035f6:	0b1b      	lsrs	r3, r3, #12
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
 80035fe:	e005      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003600:	4b6a      	ldr	r3, [pc, #424]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	0f1b      	lsrs	r3, r3, #28
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800360c:	4a68      	ldr	r2, [pc, #416]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x200>)
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003614:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d110      	bne.n	800363e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003620:	e00d      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003622:	4b62      	ldr	r3, [pc, #392]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b04      	cmp	r3, #4
 800362c:	d102      	bne.n	8003634 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800362e:	4b61      	ldr	r3, [pc, #388]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003630:	623b      	str	r3, [r7, #32]
 8003632:	e004      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b08      	cmp	r3, #8
 8003638:	d101      	bne.n	800363e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800363a:	4b5e      	ldr	r3, [pc, #376]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800363c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b0c      	cmp	r3, #12
 8003642:	f040 80ac 	bne.w	800379e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003646:	4b59      	ldr	r3, [pc, #356]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003650:	4b56      	ldr	r3, [pc, #344]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	0a1b      	lsrs	r3, r3, #8
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	3301      	adds	r3, #1
 800365c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800365e:	4b53      	ldr	r3, [pc, #332]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800366a:	4b50      	ldr	r3, [pc, #320]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	08db      	lsrs	r3, r3, #3
 8003670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003682:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8086 	beq.w	800379a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b02      	cmp	r3, #2
 8003692:	d003      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0xec>
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b03      	cmp	r3, #3
 8003698:	d022      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x130>
 800369a:	e043      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a6:	eddf 6a44 	vldr	s13, [pc, #272]	; 80037b8 <HAL_RCC_GetSysClockFreq+0x208>
 80036aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ae:	4b3f      	ldr	r3, [pc, #252]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80036be:	ed97 6a01 	vldr	s12, [r7, #4]
 80036c2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80037bc <HAL_RCC_GetSysClockFreq+0x20c>
 80036c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80036ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036da:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80036de:	e046      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ea:	eddf 6a33 	vldr	s13, [pc, #204]	; 80037b8 <HAL_RCC_GetSysClockFreq+0x208>
 80036ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036f2:	4b2e      	ldr	r3, [pc, #184]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003702:	ed97 6a01 	vldr	s12, [r7, #4]
 8003706:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80037bc <HAL_RCC_GetSysClockFreq+0x20c>
 800370a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800370e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003716:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003722:	e024      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	ee07 3a90 	vmov	s15, r3
 8003734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800373c:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 800373e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003744:	ee07 3a90 	vmov	s15, r3
 8003748:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800374c:	ed97 6a01 	vldr	s12, [r7, #4]
 8003750:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80037bc <HAL_RCC_GetSysClockFreq+0x20c>
 8003754:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003758:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800375c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003760:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003768:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800376c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800376e:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003772:	0e1b      	lsrs	r3, r3, #24
 8003774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003778:	3301      	adds	r3, #1
 800377a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003786:	edd7 6a07 	vldr	s13, [r7, #28]
 800378a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800378e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003792:	ee17 3a90 	vmov	r3, s15
 8003796:	623b      	str	r3, [r7, #32]
 8003798:	e001      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800379e:	6a3b      	ldr	r3, [r7, #32]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	372c      	adds	r7, #44	; 0x2c
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	46020c00 	.word	0x46020c00
 80037b0:	080073d8 	.word	0x080073d8
 80037b4:	00f42400 	.word	0x00f42400
 80037b8:	4b742400 	.word	0x4b742400
 80037bc:	46000000 	.word	0x46000000

080037c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80037c4:	f7ff fef4 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <HAL_RCC_GetHCLKFreq+0x28>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	4906      	ldr	r1, [pc, #24]	; (80037ec <HAL_RCC_GetHCLKFreq+0x2c>)
 80037d4:	5ccb      	ldrb	r3, [r1, r3]
 80037d6:	fa22 f303 	lsr.w	r3, r2, r3
 80037da:	4a05      	ldr	r2, [pc, #20]	; (80037f0 <HAL_RCC_GetHCLKFreq+0x30>)
 80037dc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80037de:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <HAL_RCC_GetHCLKFreq+0x30>)
 80037e0:	681b      	ldr	r3, [r3, #0]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	46020c00 	.word	0x46020c00
 80037ec:	080073c0 	.word	0x080073c0
 80037f0:	20000008 	.word	0x20000008

080037f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80037f8:	f7ff ffe2 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b05      	ldr	r3, [pc, #20]	; (8003814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	4903      	ldr	r1, [pc, #12]	; (8003818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800380a:	5ccb      	ldrb	r3, [r1, r3]
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003810:	4618      	mov	r0, r3
 8003812:	bd80      	pop	{r7, pc}
 8003814:	46020c00 	.word	0x46020c00
 8003818:	080073d0 	.word	0x080073d0

0800381c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	221f      	movs	r2, #31
 800382a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800382c:	4b15      	ldr	r3, [pc, #84]	; (8003884 <HAL_RCC_GetClockConfig+0x68>)
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	f003 0203 	and.w	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8003838:	4b12      	ldr	r3, [pc, #72]	; (8003884 <HAL_RCC_GetClockConfig+0x68>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f003 020f 	and.w	r2, r3, #15
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <HAL_RCC_GetClockConfig+0x68>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <HAL_RCC_GetClockConfig+0x68>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_RCC_GetClockConfig+0x68>)
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800386a:	4b07      	ldr	r3, [pc, #28]	; (8003888 <HAL_RCC_GetClockConfig+0x6c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 020f 	and.w	r2, r3, #15
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	601a      	str	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	46020c00 	.word	0x46020c00
 8003888:	40022000 	.word	0x40022000

0800388c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003894:	4b3e      	ldr	r3, [pc, #248]	; (8003990 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038a2:	f7fe fd9f 	bl	80023e4 <HAL_PWREx_GetVoltageRange>
 80038a6:	6178      	str	r0, [r7, #20]
 80038a8:	e019      	b.n	80038de <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038aa:	4b39      	ldr	r3, [pc, #228]	; (8003990 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b0:	4a37      	ldr	r2, [pc, #220]	; (8003990 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038b2:	f043 0304 	orr.w	r3, r3, #4
 80038b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80038ba:	4b35      	ldr	r3, [pc, #212]	; (8003990 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038c8:	f7fe fd8c 	bl	80023e4 <HAL_PWREx_GetVoltageRange>
 80038cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038ce:	4b30      	ldr	r3, [pc, #192]	; (8003990 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d4:	4a2e      	ldr	r2, [pc, #184]	; (8003990 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038d6:	f023 0304 	bic.w	r3, r3, #4
 80038da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038e4:	d003      	beq.n	80038ee <RCC_SetFlashLatencyFromMSIRange+0x62>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ec:	d109      	bne.n	8003902 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038f4:	d202      	bcs.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80038f6:	2301      	movs	r3, #1
 80038f8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80038fa:	e033      	b.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003900:	e030      	b.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003908:	d208      	bcs.n	800391c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003910:	d102      	bne.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003912:	2303      	movs	r3, #3
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	e025      	b.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e035      	b.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003922:	d90f      	bls.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003930:	d902      	bls.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	e015      	b.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003938:	2301      	movs	r3, #1
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	e012      	b.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800393e:	2300      	movs	r3, #0
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	e00f      	b.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800394a:	d109      	bne.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003952:	d102      	bne.n	800395a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003954:	2301      	movs	r3, #1
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	e004      	b.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800395a:	2302      	movs	r3, #2
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	e001      	b.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003960:	2301      	movs	r3, #1
 8003962:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 020f 	bic.w	r2, r3, #15
 800396c:	4909      	ldr	r1, [pc, #36]	; (8003994 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003974:	4b07      	ldr	r3, [pc, #28]	; (8003994 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	429a      	cmp	r2, r3
 8003980:	d001      	beq.n	8003986 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	46020c00 	.word	0x46020c00
 8003994:	40022000 	.word	0x40022000

08003998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800399c:	b0ba      	sub	sp, #232	; 0xe8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	f002 0401 	and.w	r4, r2, #1
 80039bc:	2500      	movs	r5, #0
 80039be:	ea54 0305 	orrs.w	r3, r4, r5
 80039c2:	d00b      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80039c4:	4bcb      	ldr	r3, [pc, #812]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ca:	f023 0103 	bic.w	r1, r3, #3
 80039ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d4:	4ac7      	ldr	r2, [pc, #796]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039d6:	430b      	orrs	r3, r1
 80039d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f002 0802 	and.w	r8, r2, #2
 80039e8:	f04f 0900 	mov.w	r9, #0
 80039ec:	ea58 0309 	orrs.w	r3, r8, r9
 80039f0:	d00b      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80039f2:	4bc0      	ldr	r3, [pc, #768]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f8:	f023 010c 	bic.w	r1, r3, #12
 80039fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a02:	4abc      	ldr	r2, [pc, #752]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a04:	430b      	orrs	r3, r1
 8003a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a12:	f002 0a04 	and.w	sl, r2, #4
 8003a16:	f04f 0b00 	mov.w	fp, #0
 8003a1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a1e:	d00b      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003a20:	4bb4      	ldr	r3, [pc, #720]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a26:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a30:	4ab0      	ldr	r2, [pc, #704]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a32:	430b      	orrs	r3, r1
 8003a34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f002 0308 	and.w	r3, r2, #8
 8003a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003a52:	460b      	mov	r3, r1
 8003a54:	4313      	orrs	r3, r2
 8003a56:	d00b      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003a58:	4ba6      	ldr	r3, [pc, #664]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a68:	4aa2      	ldr	r2, [pc, #648]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f002 0310 	and.w	r3, r2, #16
 8003a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003a90:	4b98      	ldr	r3, [pc, #608]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa0:	4a94      	ldr	r2, [pc, #592]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	f002 0320 	and.w	r3, r2, #32
 8003ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003abe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	d00b      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003ac8:	4b8a      	ldr	r3, [pc, #552]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ace:	f023 0107 	bic.w	r1, r3, #7
 8003ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad8:	4a86      	ldr	r2, [pc, #536]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ada:	430b      	orrs	r3, r1
 8003adc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ae0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003aec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003af6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4313      	orrs	r3, r2
 8003afe:	d00b      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003b00:	4b7c      	ldr	r3, [pc, #496]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b06:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b10:	4a78      	ldr	r2, [pc, #480]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b12:	430b      	orrs	r3, r1
 8003b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b2e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b32:	460b      	mov	r3, r1
 8003b34:	4313      	orrs	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003b38:	4b6e      	ldr	r3, [pc, #440]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b48:	4a6a      	ldr	r2, [pc, #424]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b66:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	d00b      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003b70:	4b60      	ldr	r3, [pc, #384]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	4a5c      	ldr	r2, [pc, #368]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b82:	430b      	orrs	r3, r1
 8003b84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b90:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003ba8:	4b52      	ldr	r3, [pc, #328]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bae:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb8:	4a4e      	ldr	r2, [pc, #312]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003bcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003bd6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003be0:	4b44      	ldr	r3, [pc, #272]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003be2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003be6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003bea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf0:	4a40      	ldr	r2, [pc, #256]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c00:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c0e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003c12:	460b      	mov	r3, r1
 8003c14:	4313      	orrs	r3, r2
 8003c16:	d00b      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003c18:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c1e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c28:	4a32      	ldr	r2, [pc, #200]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003c30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003c3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	d00c      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003c50:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c62:	4a24      	ldr	r2, [pc, #144]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c64:	430b      	orrs	r3, r1
 8003c66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003c76:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c78:	2300      	movs	r3, #0
 8003c7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c7c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003c80:	460b      	mov	r3, r1
 8003c82:	4313      	orrs	r3, r2
 8003c84:	d04f      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	2b80      	cmp	r3, #128	; 0x80
 8003c90:	d02d      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003c92:	2b80      	cmp	r3, #128	; 0x80
 8003c94:	d827      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003c96:	2b60      	cmp	r3, #96	; 0x60
 8003c98:	d02e      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c9a:	2b60      	cmp	r3, #96	; 0x60
 8003c9c:	d823      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	d006      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003ca2:	2b40      	cmp	r3, #64	; 0x40
 8003ca4:	d81f      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x326>
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d011      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003cae:	e01a      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cba:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cbc:	e01d      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fc27 	bl	8004518 <RCCEx_PLL2_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cd0:	e013      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cd6:	332c      	adds	r3, #44	; 0x2c
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fcb5 	bl	8004648 <RCCEx_PLL3_Config>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ce4:	e009      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003cec:	e005      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8003cee:	bf00      	nop
 8003cf0:	e003      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003cf2:	bf00      	nop
 8003cf4:	46020c00 	.word	0x46020c00
        break;
 8003cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003d02:	4bb6      	ldr	r3, [pc, #728]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003d04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d08:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003d0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d14:	4ab1      	ldr	r2, [pc, #708]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003d16:	430b      	orrs	r3, r1
 8003d18:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d1c:	e003      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003d22:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003d32:	673b      	str	r3, [r7, #112]	; 0x70
 8003d34:	2300      	movs	r3, #0
 8003d36:	677b      	str	r3, [r7, #116]	; 0x74
 8003d38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	d053      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4e:	d033      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d54:	d82c      	bhi.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d5a:	d02f      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d60:	d826      	bhi.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d66:	d008      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8003d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6c:	d820      	bhi.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d76:	d011      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003d78:	e01a      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d7a:	4b98      	ldr	r3, [pc, #608]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	4a97      	ldr	r2, [pc, #604]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d86:	e01a      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d8c:	3308      	adds	r3, #8
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fbc2 	bl	8004518 <RCCEx_PLL2_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d9a:	e010      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003da0:	332c      	adds	r3, #44	; 0x2c
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fc50 	bl	8004648 <RCCEx_PLL3_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003dae:	e006      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003db6:	e002      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8003db8:	bf00      	nop
 8003dba:	e000      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8003dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dbe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003dc6:	4b85      	ldr	r3, [pc, #532]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003dc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003dcc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003dd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd8:	4a80      	ldr	r2, [pc, #512]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003de0:	e003      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003de6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003df6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003df8:	2300      	movs	r3, #0
 8003dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dfc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003e00:	460b      	mov	r3, r1
 8003e02:	4313      	orrs	r3, r2
 8003e04:	d046      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e0e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003e12:	d028      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003e14:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003e18:	d821      	bhi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e1e:	d022      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e24:	d81b      	bhi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003e26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e2a:	d01c      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003e2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e30:	d815      	bhi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e36:	d008      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3c:	d80f      	bhi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d011      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d00e      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003e48:	e009      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e4e:	3308      	adds	r3, #8
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb61 	bl	8004518 <RCCEx_PLL2_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003e5c:	e004      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003e64:	e000      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8003e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e68:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10d      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003e70:	4b5a      	ldr	r3, [pc, #360]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e76:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e82:	4a56      	ldr	r2, [pc, #344]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003e84:	430b      	orrs	r3, r1
 8003e86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e8a:	e003      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003e90:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003e94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003ea0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ea6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	d03f      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003eb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d81e      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x562>
 8003ebc:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003f03 	.word	0x08003f03
 8003ec8:	08003ed9 	.word	0x08003ed9
 8003ecc:	08003ee7 	.word	0x08003ee7
 8003ed0:	08003f03 	.word	0x08003f03
 8003ed4:	08003f03 	.word	0x08003f03
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ed8:	4b40      	ldr	r3, [pc, #256]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	4a3f      	ldr	r2, [pc, #252]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003ee4:	e00e      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003eea:	332c      	adds	r3, #44	; 0x2c
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fbab 	bl	8004648 <RCCEx_PLL3_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003ef8:	e004      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003f00:	e000      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8003f02:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003f04:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10d      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003f0c:	4b33      	ldr	r3, [pc, #204]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003f0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f12:	f023 0107 	bic.w	r1, r3, #7
 8003f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	4a2f      	ldr	r2, [pc, #188]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003f20:	430b      	orrs	r3, r1
 8003f22:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003f26:	e003      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f28:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003f2c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003f30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003f3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f3e:	2300      	movs	r3, #0
 8003f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f42:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003f46:	460b      	mov	r3, r1
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	d04d      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f58:	d028      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003f5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f5e:	d821      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003f60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f64:	d024      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003f66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f6a:	d81b      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f70:	d00e      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f76:	d815      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01b      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f80:	d110      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f82:	4b16      	ldr	r3, [pc, #88]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	4a15      	ldr	r2, [pc, #84]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003f8e:	e012      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f94:	332c      	adds	r3, #44	; 0x2c
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fb56 	bl	8004648 <RCCEx_PLL3_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003faa:	e004      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003fac:	bf00      	nop
 8003fae:	e002      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003fb0:	bf00      	nop
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003fb4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003fb6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d110      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fc4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003fc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd0:	4a02      	ldr	r2, [pc, #8]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8003fda:	bf00      	nop
 8003fdc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003fe4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003ff4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	657b      	str	r3, [r7, #84]	; 0x54
 8003ffa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003ffe:	460b      	mov	r3, r1
 8004000:	4313      	orrs	r3, r2
 8004002:	f000 80b5 	beq.w	8004170 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004006:	2300      	movs	r3, #0
 8004008:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400c:	4b9d      	ldr	r3, [pc, #628]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800400e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d113      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	4b9a      	ldr	r3, [pc, #616]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800401c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004020:	4a98      	ldr	r2, [pc, #608]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004022:	f043 0304 	orr.w	r3, r3, #4
 8004026:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800402a:	4b96      	ldr	r3, [pc, #600]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800402c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004038:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004042:	4b91      	ldr	r3, [pc, #580]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004046:	4a90      	ldr	r2, [pc, #576]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800404e:	f7fc ff5d 	bl	8000f0c <HAL_GetTick>
 8004052:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004056:	e00b      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004058:	f7fc ff58 	bl	8000f0c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d903      	bls.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800406e:	e005      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004070:	4b85      	ldr	r3, [pc, #532]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0ed      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800407c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d165      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004084:	4b7f      	ldr	r3, [pc, #508]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800408a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004096:	2b00      	cmp	r3, #0
 8004098:	d023      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800409a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800409e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80040a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d01b      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040aa:	4b76      	ldr	r3, [pc, #472]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040b8:	4b72      	ldr	r3, [pc, #456]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040be:	4a71      	ldr	r2, [pc, #452]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040c8:	4b6e      	ldr	r3, [pc, #440]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040ce:	4a6d      	ldr	r2, [pc, #436]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040d8:	4a6a      	ldr	r2, [pc, #424]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d019      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ee:	f7fc ff0d 	bl	8000f0c <HAL_GetTick>
 80040f2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f6:	e00d      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f8:	f7fc ff08 	bl	8000f0c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004102:	1ad2      	subs	r2, r2, r3
 8004104:	f241 3388 	movw	r3, #5000	; 0x1388
 8004108:	429a      	cmp	r2, r3
 800410a:	d903      	bls.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8004112:	e006      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004114:	4b5b      	ldr	r3, [pc, #364]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0ea      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8004122:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10d      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800412a:	4b56      	ldr	r3, [pc, #344]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800412c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004130:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004134:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004138:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800413c:	4a51      	ldr	r2, [pc, #324]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800413e:	430b      	orrs	r3, r1
 8004140:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004144:	e008      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004146:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800414a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800414e:	e003      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004150:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004154:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004158:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800415c:	2b01      	cmp	r3, #1
 800415e:	d107      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004160:	4b48      	ldr	r3, [pc, #288]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004166:	4a47      	ldr	r2, [pc, #284]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004168:	f023 0304 	bic.w	r3, r3, #4
 800416c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004178:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800417c:	64bb      	str	r3, [r7, #72]	; 0x48
 800417e:	2300      	movs	r3, #0
 8004180:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004182:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004186:	460b      	mov	r3, r1
 8004188:	4313      	orrs	r3, r2
 800418a:	d042      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800418c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004190:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004194:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004198:	d022      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800419a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800419e:	d81b      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80041a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a4:	d011      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x832>
 80041a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041aa:	d815      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d019      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80041b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041b4:	d110      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ba:	3308      	adds	r3, #8
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 f9ab 	bl	8004518 <RCCEx_PLL2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80041c8:	e00d      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ca:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	4a2d      	ldr	r2, [pc, #180]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80041d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80041d6:	e006      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80041de:	e002      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80041e0:	bf00      	nop
 80041e2:	e000      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80041e4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80041e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10d      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80041ee:	4b25      	ldr	r3, [pc, #148]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80041f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80041f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004200:	4a20      	ldr	r2, [pc, #128]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004202:	430b      	orrs	r3, r1
 8004204:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004208:	e003      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800420e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800421e:	643b      	str	r3, [r7, #64]	; 0x40
 8004220:	2300      	movs	r3, #0
 8004222:	647b      	str	r3, [r7, #68]	; 0x44
 8004224:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004228:	460b      	mov	r3, r1
 800422a:	4313      	orrs	r3, r2
 800422c:	d032      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800422e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423a:	d00b      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800423c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004240:	d804      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424a:	d007      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004252:	e004      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8004254:	bf00      	nop
 8004256:	e002      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8004258:	bf00      	nop
 800425a:	e000      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800425c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800425e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d112      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004266:	4b07      	ldr	r3, [pc, #28]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004268:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800426c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004270:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004274:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004278:	4a02      	ldr	r2, [pc, #8]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800427a:	430b      	orrs	r3, r1
 800427c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004280:	e008      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8004282:	bf00      	nop
 8004284:	46020c00 	.word	0x46020c00
 8004288:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004290:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004294:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80042a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80042a2:	2300      	movs	r3, #0
 80042a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80042aa:	460b      	mov	r3, r1
 80042ac:	4313      	orrs	r3, r2
 80042ae:	d00c      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80042b0:	4b98      	ldr	r3, [pc, #608]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80042b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80042b6:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80042ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042c2:	4a94      	ldr	r2, [pc, #592]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80042c4:	430b      	orrs	r3, r1
 80042c6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80042ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80042d6:	633b      	str	r3, [r7, #48]	; 0x30
 80042d8:	2300      	movs	r3, #0
 80042da:	637b      	str	r3, [r7, #52]	; 0x34
 80042dc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80042e0:	460b      	mov	r3, r1
 80042e2:	4313      	orrs	r3, r2
 80042e4:	d019      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80042e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f2:	d105      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042f4:	4b87      	ldr	r3, [pc, #540]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	4a86      	ldr	r2, [pc, #536]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80042fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fe:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004300:	4b84      	ldr	r3, [pc, #528]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004302:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004306:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800430a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800430e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004312:	4a80      	ldr	r2, [pc, #512]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004314:	430b      	orrs	r3, r1
 8004316:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800431a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800431e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004322:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
 8004328:	2300      	movs	r3, #0
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800432c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004330:	460b      	mov	r3, r1
 8004332:	4313      	orrs	r3, r2
 8004334:	d00c      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004336:	4b77      	ldr	r3, [pc, #476]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800433c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004344:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004348:	4972      	ldr	r1, [pc, #456]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004350:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800435c:	623b      	str	r3, [r7, #32]
 800435e:	2300      	movs	r3, #0
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
 8004362:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004366:	460b      	mov	r3, r1
 8004368:	4313      	orrs	r3, r2
 800436a:	d00c      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800436c:	4b69      	ldr	r3, [pc, #420]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800436e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004372:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800437a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800437e:	4965      	ldr	r1, [pc, #404]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800439c:	460b      	mov	r3, r1
 800439e:	4313      	orrs	r3, r2
 80043a0:	d00c      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80043a2:	4b5c      	ldr	r3, [pc, #368]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80043a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043a8:	f023 0218 	bic.w	r2, r3, #24
 80043ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043b4:	4957      	ldr	r1, [pc, #348]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80043d2:	460b      	mov	r3, r1
 80043d4:	4313      	orrs	r3, r2
 80043d6:	d032      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80043d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043e4:	d105      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e6:	4b4b      	ldr	r3, [pc, #300]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	4a4a      	ldr	r2, [pc, #296]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80043ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f0:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80043f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043fe:	d108      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004400:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004404:	3308      	adds	r3, #8
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f886 	bl	8004518 <RCCEx_PLL2_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8004412:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10d      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800441a:	4b3e      	ldr	r3, [pc, #248]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800441c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004424:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004428:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800442c:	4939      	ldr	r1, [pc, #228]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004434:	e003      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004436:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800443a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800443e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004454:	460b      	mov	r3, r1
 8004456:	4313      	orrs	r3, r2
 8004458:	d03a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800445a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800445e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004462:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004466:	d00e      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8004468:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800446c:	d815      	bhi.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d017      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004472:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004476:	d110      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004478:	4b26      	ldr	r3, [pc, #152]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	4a25      	ldr	r2, [pc, #148]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800447e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004482:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004484:	e00e      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800448a:	3308      	adds	r3, #8
 800448c:	4618      	mov	r0, r3
 800448e:	f000 f843 	bl	8004518 <RCCEx_PLL2_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004498:	e004      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80044a0:	e000      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80044a2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80044a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10d      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80044ac:	4b19      	ldr	r3, [pc, #100]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80044ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044be:	4915      	ldr	r1, [pc, #84]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80044c6:	e003      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80044cc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80044d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	2300      	movs	r3, #0
 80044e0:	607b      	str	r3, [r7, #4]
 80044e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044e6:	460b      	mov	r3, r1
 80044e8:	4313      	orrs	r3, r2
 80044ea:	d00c      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80044ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044f2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80044f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80044fe:	4905      	ldr	r1, [pc, #20]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004506:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800450a:	4618      	mov	r0, r3
 800450c:	37e8      	adds	r7, #232	; 0xe8
 800450e:	46bd      	mov	sp, r7
 8004510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004514:	46020c00 	.word	0x46020c00

08004518 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004520:	4b47      	ldr	r3, [pc, #284]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a46      	ldr	r2, [pc, #280]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 8004526:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800452a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800452c:	f7fc fcee 	bl	8000f0c <HAL_GetTick>
 8004530:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004532:	e008      	b.n	8004546 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004534:	f7fc fcea 	bl	8000f0c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e077      	b.n	8004636 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004546:	4b3e      	ldr	r3, [pc, #248]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004552:	4b3b      	ldr	r3, [pc, #236]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6811      	ldr	r1, [r2, #0]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6852      	ldr	r2, [r2, #4]
 8004566:	3a01      	subs	r2, #1
 8004568:	0212      	lsls	r2, r2, #8
 800456a:	430a      	orrs	r2, r1
 800456c:	4934      	ldr	r1, [pc, #208]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 800456e:	4313      	orrs	r3, r2
 8004570:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004572:	4b33      	ldr	r3, [pc, #204]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 8004574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004576:	4b33      	ldr	r3, [pc, #204]	; (8004644 <RCCEx_PLL2_Config+0x12c>)
 8004578:	4013      	ands	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6892      	ldr	r2, [r2, #8]
 800457e:	3a01      	subs	r2, #1
 8004580:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	68d2      	ldr	r2, [r2, #12]
 8004588:	3a01      	subs	r2, #1
 800458a:	0252      	lsls	r2, r2, #9
 800458c:	b292      	uxth	r2, r2
 800458e:	4311      	orrs	r1, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6912      	ldr	r2, [r2, #16]
 8004594:	3a01      	subs	r2, #1
 8004596:	0412      	lsls	r2, r2, #16
 8004598:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6952      	ldr	r2, [r2, #20]
 80045a2:	3a01      	subs	r2, #1
 80045a4:	0612      	lsls	r2, r2, #24
 80045a6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80045aa:	430a      	orrs	r2, r1
 80045ac:	4924      	ldr	r1, [pc, #144]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80045b2:	4b23      	ldr	r3, [pc, #140]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	f023 020c 	bic.w	r2, r3, #12
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	4920      	ldr	r1, [pc, #128]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80045c4:	4b1e      	ldr	r3, [pc, #120]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 80045c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	491c      	ldr	r1, [pc, #112]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80045d2:	4b1b      	ldr	r3, [pc, #108]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	4a1a      	ldr	r2, [pc, #104]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 80045d8:	f023 0310 	bic.w	r3, r3, #16
 80045dc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045de:	4b18      	ldr	r3, [pc, #96]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	69d2      	ldr	r2, [r2, #28]
 80045ee:	00d2      	lsls	r2, r2, #3
 80045f0:	4913      	ldr	r1, [pc, #76]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	4a11      	ldr	r2, [pc, #68]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 80045fc:	f043 0310 	orr.w	r3, r3, #16
 8004600:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a0e      	ldr	r2, [pc, #56]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 8004608:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800460c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800460e:	f7fc fc7d 	bl	8000f0c <HAL_GetTick>
 8004612:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004614:	e008      	b.n	8004628 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004616:	f7fc fc79 	bl	8000f0c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e006      	b.n	8004636 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <RCCEx_PLL2_Config+0x128>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0

}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	46020c00 	.word	0x46020c00
 8004644:	80800000 	.word	0x80800000

08004648 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004650:	4b47      	ldr	r3, [pc, #284]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a46      	ldr	r2, [pc, #280]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 8004656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800465a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800465c:	f7fc fc56 	bl	8000f0c <HAL_GetTick>
 8004660:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004662:	e008      	b.n	8004676 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004664:	f7fc fc52 	bl	8000f0c <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e077      	b.n	8004766 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004676:	4b3e      	ldr	r3, [pc, #248]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004682:	4b3b      	ldr	r3, [pc, #236]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800468a:	f023 0303 	bic.w	r3, r3, #3
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6811      	ldr	r1, [r2, #0]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6852      	ldr	r2, [r2, #4]
 8004696:	3a01      	subs	r2, #1
 8004698:	0212      	lsls	r2, r2, #8
 800469a:	430a      	orrs	r2, r1
 800469c:	4934      	ldr	r1, [pc, #208]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	630b      	str	r3, [r1, #48]	; 0x30
 80046a2:	4b33      	ldr	r3, [pc, #204]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 80046a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a6:	4b33      	ldr	r3, [pc, #204]	; (8004774 <RCCEx_PLL3_Config+0x12c>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6892      	ldr	r2, [r2, #8]
 80046ae:	3a01      	subs	r2, #1
 80046b0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	68d2      	ldr	r2, [r2, #12]
 80046b8:	3a01      	subs	r2, #1
 80046ba:	0252      	lsls	r2, r2, #9
 80046bc:	b292      	uxth	r2, r2
 80046be:	4311      	orrs	r1, r2
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6912      	ldr	r2, [r2, #16]
 80046c4:	3a01      	subs	r2, #1
 80046c6:	0412      	lsls	r2, r2, #16
 80046c8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80046cc:	4311      	orrs	r1, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6952      	ldr	r2, [r2, #20]
 80046d2:	3a01      	subs	r2, #1
 80046d4:	0612      	lsls	r2, r2, #24
 80046d6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80046da:	430a      	orrs	r2, r1
 80046dc:	4924      	ldr	r1, [pc, #144]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80046e2:	4b23      	ldr	r3, [pc, #140]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	f023 020c 	bic.w	r2, r3, #12
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	4920      	ldr	r1, [pc, #128]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80046f4:	4b1e      	ldr	r3, [pc, #120]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 80046f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	491c      	ldr	r1, [pc, #112]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 8004708:	f023 0310 	bic.w	r3, r3, #16
 800470c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800470e:	4b18      	ldr	r3, [pc, #96]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 8004710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004716:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	69d2      	ldr	r2, [r2, #28]
 800471e:	00d2      	lsls	r2, r2, #3
 8004720:	4913      	ldr	r1, [pc, #76]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 8004722:	4313      	orrs	r3, r2
 8004724:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004726:	4b12      	ldr	r3, [pc, #72]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	4a11      	ldr	r2, [pc, #68]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 800472c:	f043 0310 	orr.w	r3, r3, #16
 8004730:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004732:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a0e      	ldr	r2, [pc, #56]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 8004738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800473e:	f7fc fbe5 	bl	8000f0c <HAL_GetTick>
 8004742:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004744:	e008      	b.n	8004758 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004746:	f7fc fbe1 	bl	8000f0c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e006      	b.n	8004766 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <RCCEx_PLL3_Config+0x128>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	46020c00 	.word	0x46020c00
 8004774:	80800000 	.word	0x80800000

08004778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e049      	b.n	800481e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f841 	bl	8004826 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f000 fa88 	bl	8004ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d001      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e072      	b.n	800493a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a35      	ldr	r2, [pc, #212]	; (8004948 <HAL_TIM_Base_Start_IT+0x10c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d040      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xbc>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a34      	ldr	r2, [pc, #208]	; (800494c <HAL_TIM_Base_Start_IT+0x110>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d03b      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xbc>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004888:	d036      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xbc>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004892:	d031      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xbc>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2d      	ldr	r2, [pc, #180]	; (8004950 <HAL_TIM_Base_Start_IT+0x114>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d02c      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xbc>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2c      	ldr	r2, [pc, #176]	; (8004954 <HAL_TIM_Base_Start_IT+0x118>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d027      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xbc>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <HAL_TIM_Base_Start_IT+0x11c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d022      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xbc>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a29      	ldr	r2, [pc, #164]	; (800495c <HAL_TIM_Base_Start_IT+0x120>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d01d      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xbc>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a27      	ldr	r2, [pc, #156]	; (8004960 <HAL_TIM_Base_Start_IT+0x124>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d018      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xbc>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a26      	ldr	r2, [pc, #152]	; (8004964 <HAL_TIM_Base_Start_IT+0x128>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d013      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xbc>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a24      	ldr	r2, [pc, #144]	; (8004968 <HAL_TIM_Base_Start_IT+0x12c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00e      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xbc>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a23      	ldr	r2, [pc, #140]	; (800496c <HAL_TIM_Base_Start_IT+0x130>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d009      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xbc>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a21      	ldr	r2, [pc, #132]	; (8004970 <HAL_TIM_Base_Start_IT+0x134>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xbc>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a20      	ldr	r2, [pc, #128]	; (8004974 <HAL_TIM_Base_Start_IT+0x138>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d115      	bne.n	8004924 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <HAL_TIM_Base_Start_IT+0x13c>)
 8004900:	4013      	ands	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b06      	cmp	r3, #6
 8004908:	d015      	beq.n	8004936 <HAL_TIM_Base_Start_IT+0xfa>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004910:	d011      	beq.n	8004936 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0201 	orr.w	r2, r2, #1
 8004920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004922:	e008      	b.n	8004936 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	e000      	b.n	8004938 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004936:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40012c00 	.word	0x40012c00
 800494c:	50012c00 	.word	0x50012c00
 8004950:	40000400 	.word	0x40000400
 8004954:	50000400 	.word	0x50000400
 8004958:	40000800 	.word	0x40000800
 800495c:	50000800 	.word	0x50000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	50000c00 	.word	0x50000c00
 8004968:	40013400 	.word	0x40013400
 800496c:	50013400 	.word	0x50013400
 8004970:	40014000 	.word	0x40014000
 8004974:	50014000 	.word	0x50014000
 8004978:	00010007 	.word	0x00010007

0800497c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	d122      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b02      	cmp	r3, #2
 800499e:	d11b      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0202 	mvn.w	r2, #2
 80049a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f965 	bl	8004c8e <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f957 	bl	8004c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f968 	bl	8004ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d122      	bne.n	8004a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d11b      	bne.n	8004a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0204 	mvn.w	r2, #4
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f93b 	bl	8004c8e <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f92d 	bl	8004c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f93e 	bl	8004ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0208 	mvn.w	r2, #8
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2204      	movs	r2, #4
 8004a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f911 	bl	8004c8e <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f903 	bl	8004c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f914 	bl	8004ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0210 	mvn.w	r2, #16
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2208      	movs	r2, #8
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f8e7 	bl	8004c8e <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8d9 	bl	8004c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8ea 	bl	8004ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d10e      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d107      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0201 	mvn.w	r2, #1
 8004af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fb fe56 	bl	80007ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b80      	cmp	r3, #128	; 0x80
 8004b0c:	d10e      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d107      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f9d4 	bl	8004ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	d10e      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b46:	2b80      	cmp	r3, #128	; 0x80
 8004b48:	d107      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f9c7 	bl	8004ee8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b40      	cmp	r3, #64	; 0x40
 8004b66:	d10e      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b72:	2b40      	cmp	r3, #64	; 0x40
 8004b74:	d107      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f898 	bl	8004cb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d10e      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	d107      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f06f 0220 	mvn.w	r2, #32
 8004baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f987 	bl	8004ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc0:	d10f      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd0:	d107      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f98d 	bl	8004efc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bf0:	d10f      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c00:	d107      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f97f 	bl	8004f10 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c20:	d10f      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c30:	d107      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f971 	bl	8004f24 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c50:	d10f      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c60:	d107      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f963 	bl	8004f38 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a68      	ldr	r2, [pc, #416]	; (8004e80 <TIM_Base_SetConfig+0x1b4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d02b      	beq.n	8004d3c <TIM_Base_SetConfig+0x70>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a67      	ldr	r2, [pc, #412]	; (8004e84 <TIM_Base_SetConfig+0x1b8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d027      	beq.n	8004d3c <TIM_Base_SetConfig+0x70>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf2:	d023      	beq.n	8004d3c <TIM_Base_SetConfig+0x70>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cfa:	d01f      	beq.n	8004d3c <TIM_Base_SetConfig+0x70>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a62      	ldr	r2, [pc, #392]	; (8004e88 <TIM_Base_SetConfig+0x1bc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d01b      	beq.n	8004d3c <TIM_Base_SetConfig+0x70>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a61      	ldr	r2, [pc, #388]	; (8004e8c <TIM_Base_SetConfig+0x1c0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d017      	beq.n	8004d3c <TIM_Base_SetConfig+0x70>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a60      	ldr	r2, [pc, #384]	; (8004e90 <TIM_Base_SetConfig+0x1c4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d013      	beq.n	8004d3c <TIM_Base_SetConfig+0x70>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a5f      	ldr	r2, [pc, #380]	; (8004e94 <TIM_Base_SetConfig+0x1c8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00f      	beq.n	8004d3c <TIM_Base_SetConfig+0x70>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a5e      	ldr	r2, [pc, #376]	; (8004e98 <TIM_Base_SetConfig+0x1cc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00b      	beq.n	8004d3c <TIM_Base_SetConfig+0x70>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a5d      	ldr	r2, [pc, #372]	; (8004e9c <TIM_Base_SetConfig+0x1d0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d007      	beq.n	8004d3c <TIM_Base_SetConfig+0x70>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a5c      	ldr	r2, [pc, #368]	; (8004ea0 <TIM_Base_SetConfig+0x1d4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <TIM_Base_SetConfig+0x70>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a5b      	ldr	r2, [pc, #364]	; (8004ea4 <TIM_Base_SetConfig+0x1d8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d108      	bne.n	8004d4e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a4b      	ldr	r2, [pc, #300]	; (8004e80 <TIM_Base_SetConfig+0x1b4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d043      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a4a      	ldr	r2, [pc, #296]	; (8004e84 <TIM_Base_SetConfig+0x1b8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d03f      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d64:	d03b      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d6c:	d037      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a45      	ldr	r2, [pc, #276]	; (8004e88 <TIM_Base_SetConfig+0x1bc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d033      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a44      	ldr	r2, [pc, #272]	; (8004e8c <TIM_Base_SetConfig+0x1c0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d02f      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a43      	ldr	r2, [pc, #268]	; (8004e90 <TIM_Base_SetConfig+0x1c4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d02b      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a42      	ldr	r2, [pc, #264]	; (8004e94 <TIM_Base_SetConfig+0x1c8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d027      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a41      	ldr	r2, [pc, #260]	; (8004e98 <TIM_Base_SetConfig+0x1cc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d023      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a40      	ldr	r2, [pc, #256]	; (8004e9c <TIM_Base_SetConfig+0x1d0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01f      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a3f      	ldr	r2, [pc, #252]	; (8004ea0 <TIM_Base_SetConfig+0x1d4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01b      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a3e      	ldr	r2, [pc, #248]	; (8004ea4 <TIM_Base_SetConfig+0x1d8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d017      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a3d      	ldr	r2, [pc, #244]	; (8004ea8 <TIM_Base_SetConfig+0x1dc>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a3c      	ldr	r2, [pc, #240]	; (8004eac <TIM_Base_SetConfig+0x1e0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00f      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a3b      	ldr	r2, [pc, #236]	; (8004eb0 <TIM_Base_SetConfig+0x1e4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a3a      	ldr	r2, [pc, #232]	; (8004eb4 <TIM_Base_SetConfig+0x1e8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a39      	ldr	r2, [pc, #228]	; (8004eb8 <TIM_Base_SetConfig+0x1ec>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_Base_SetConfig+0x112>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a38      	ldr	r2, [pc, #224]	; (8004ebc <TIM_Base_SetConfig+0x1f0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d108      	bne.n	8004df0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a1a      	ldr	r2, [pc, #104]	; (8004e80 <TIM_Base_SetConfig+0x1b4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d023      	beq.n	8004e64 <TIM_Base_SetConfig+0x198>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a19      	ldr	r2, [pc, #100]	; (8004e84 <TIM_Base_SetConfig+0x1b8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d01f      	beq.n	8004e64 <TIM_Base_SetConfig+0x198>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a1e      	ldr	r2, [pc, #120]	; (8004ea0 <TIM_Base_SetConfig+0x1d4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d01b      	beq.n	8004e64 <TIM_Base_SetConfig+0x198>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ea4 <TIM_Base_SetConfig+0x1d8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d017      	beq.n	8004e64 <TIM_Base_SetConfig+0x198>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <TIM_Base_SetConfig+0x1dc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d013      	beq.n	8004e64 <TIM_Base_SetConfig+0x198>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a1b      	ldr	r2, [pc, #108]	; (8004eac <TIM_Base_SetConfig+0x1e0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00f      	beq.n	8004e64 <TIM_Base_SetConfig+0x198>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a1a      	ldr	r2, [pc, #104]	; (8004eb0 <TIM_Base_SetConfig+0x1e4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00b      	beq.n	8004e64 <TIM_Base_SetConfig+0x198>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <TIM_Base_SetConfig+0x1e8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d007      	beq.n	8004e64 <TIM_Base_SetConfig+0x198>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <TIM_Base_SetConfig+0x1ec>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <TIM_Base_SetConfig+0x198>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <TIM_Base_SetConfig+0x1f0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d103      	bne.n	8004e6c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	615a      	str	r2, [r3, #20]
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40012c00 	.word	0x40012c00
 8004e84:	50012c00 	.word	0x50012c00
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	50000400 	.word	0x50000400
 8004e90:	40000800 	.word	0x40000800
 8004e94:	50000800 	.word	0x50000800
 8004e98:	40000c00 	.word	0x40000c00
 8004e9c:	50000c00 	.word	0x50000c00
 8004ea0:	40013400 	.word	0x40013400
 8004ea4:	50013400 	.word	0x50013400
 8004ea8:	40014000 	.word	0x40014000
 8004eac:	50014000 	.word	0x50014000
 8004eb0:	40014400 	.word	0x40014400
 8004eb4:	50014400 	.word	0x50014400
 8004eb8:	40014800 	.word	0x40014800
 8004ebc:	50014800 	.word	0x50014800

08004ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08e      	sub	sp, #56	; 0x38
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8004f5a:	2234      	movs	r2, #52	; 0x34
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f001 f9f8 	bl	8006354 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	f023 0303 	bic.w	r3, r3, #3
 8004f6a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f1a3 0208 	sub.w	r2, r3, #8
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2202      	movs	r2, #2
 8004f98:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8004f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa8:	3b04      	subs	r3, #4
 8004faa:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8004fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb8:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8004fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8004fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fde:	3304      	adds	r3, #4
 8004fe0:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	4a1f      	ldr	r2, [pc, #124]	; (8005068 <_tx_byte_pool_create+0x11c>)
 8004fea:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff6:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8004ff8:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8004ffa:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8004ffc:	b672      	cpsid	i
#endif
    return(int_posture);
 8004ffe:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8005000:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4a19      	ldr	r2, [pc, #100]	; (800506c <_tx_byte_pool_create+0x120>)
 8005006:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8005008:	4b19      	ldr	r3, [pc, #100]	; (8005070 <_tx_byte_pool_create+0x124>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d109      	bne.n	8005024 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8005010:	4a18      	ldr	r2, [pc, #96]	; (8005074 <_tx_byte_pool_create+0x128>)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	631a      	str	r2, [r3, #48]	; 0x30
 8005022:	e011      	b.n	8005048 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8005024:	4b13      	ldr	r3, [pc, #76]	; (8005074 <_tx_byte_pool_create+0x128>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a3a      	ldr	r2, [r7, #32]
 8005046:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8005048:	4b09      	ldr	r3, [pc, #36]	; (8005070 <_tx_byte_pool_create+0x124>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3301      	adds	r3, #1
 800504e:	4a08      	ldr	r2, [pc, #32]	; (8005070 <_tx_byte_pool_create+0x124>)
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f383 8810 	msr	PRIMASK, r3
}
 800505c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3738      	adds	r7, #56	; 0x38
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	ffffeeee 	.word	0xffffeeee
 800506c:	42595445 	.word	0x42595445
 8005070:	20000a50 	.word	0x20000a50
 8005074:	20000a4c 	.word	0x20000a4c

08005078 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800507c:	f000 f960 	bl	8005340 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8005080:	f000 fd68 	bl	8005b54 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8005084:	4b12      	ldr	r3, [pc, #72]	; (80050d0 <_tx_initialize_high_level+0x58>)
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <_tx_initialize_high_level+0x5c>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8005090:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <_tx_initialize_high_level+0x60>)
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	4b11      	ldr	r3, [pc, #68]	; (80050dc <_tx_initialize_high_level+0x64>)
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800509c:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <_tx_initialize_high_level+0x68>)
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <_tx_initialize_high_level+0x6c>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80050a8:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <_tx_initialize_high_level+0x70>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <_tx_initialize_high_level+0x74>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80050b4:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <_tx_initialize_high_level+0x78>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <_tx_initialize_high_level+0x7c>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80050c0:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <_tx_initialize_high_level+0x80>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <_tx_initialize_high_level+0x84>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
#endif
}
 80050cc:	bf00      	nop
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000a24 	.word	0x20000a24
 80050d4:	20000a28 	.word	0x20000a28
 80050d8:	20000a2c 	.word	0x20000a2c
 80050dc:	20000a30 	.word	0x20000a30
 80050e0:	20000a34 	.word	0x20000a34
 80050e4:	20000a38 	.word	0x20000a38
 80050e8:	20000a44 	.word	0x20000a44
 80050ec:	20000a48 	.word	0x20000a48
 80050f0:	20000a4c 	.word	0x20000a4c
 80050f4:	20000a50 	.word	0x20000a50
 80050f8:	20000a3c 	.word	0x20000a3c
 80050fc:	20000a40 	.word	0x20000a40

08005100 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8005104:	4b10      	ldr	r3, [pc, #64]	; (8005148 <_tx_initialize_kernel_enter+0x48>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800510c:	d00c      	beq.n	8005128 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800510e:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <_tx_initialize_kernel_enter+0x48>)
 8005110:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8005114:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8005116:	f7fb f8ad 	bl	8000274 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800511a:	f7ff ffad 	bl	8005078 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <_tx_initialize_kernel_enter+0x4c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3301      	adds	r3, #1
 8005124:	4a09      	ldr	r2, [pc, #36]	; (800514c <_tx_initialize_kernel_enter+0x4c>)
 8005126:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <_tx_initialize_kernel_enter+0x48>)
 800512a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800512e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <_tx_initialize_kernel_enter+0x50>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f7fb f9bb 	bl	80004b0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800513a:	4b03      	ldr	r3, [pc, #12]	; (8005148 <_tx_initialize_kernel_enter+0x48>)
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8005140:	f7fb f8d4 	bl	80002ec <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8005144:	bf00      	nop
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20000014 	.word	0x20000014
 800514c:	20000af4 	.word	0x20000af4
 8005150:	20000a54 	.word	0x20000a54

08005154 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b092      	sub	sp, #72	; 0x48
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8005162:	2300      	movs	r3, #0
 8005164:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8005166:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005168:	21ef      	movs	r1, #239	; 0xef
 800516a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800516c:	f001 f8f2 	bl	8006354 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8005170:	22b0      	movs	r2, #176	; 0xb0
 8005172:	2100      	movs	r1, #0
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f001 f8ed 	bl	8006354 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005190:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005196:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800519c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051aa:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051b0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80051ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80051be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051c0:	3b01      	subs	r3, #1
 80051c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051c4:	4413      	add	r3, r2
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051cc:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80051ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d007      	beq.n	80051e6 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80051e4:	e006      	b.n	80051f4 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051ea:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2203      	movs	r2, #3
 80051f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4a48      	ldr	r2, [pc, #288]	; (8005320 <_tx_thread_create+0x1cc>)
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8005206:	4947      	ldr	r1, [pc, #284]	; (8005324 <_tx_thread_create+0x1d0>)
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f7fb f8d5 	bl	80003b8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800520e:	f3ef 8310 	mrs	r3, PRIMASK
 8005212:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005216:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005218:	b672      	cpsid	i
    return(int_posture);
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800521c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4a41      	ldr	r2, [pc, #260]	; (8005328 <_tx_thread_create+0x1d4>)
 8005222:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8005224:	4b41      	ldr	r3, [pc, #260]	; (800532c <_tx_thread_create+0x1d8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10b      	bne.n	8005244 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800522c:	4a40      	ldr	r2, [pc, #256]	; (8005330 <_tx_thread_create+0x1dc>)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005242:	e016      	b.n	8005272 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8005244:	4b3a      	ldr	r3, [pc, #232]	; (8005330 <_tx_thread_create+0x1dc>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800524a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005250:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8005252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800526e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8005272:	4b2e      	ldr	r3, [pc, #184]	; (800532c <_tx_thread_create+0x1d8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3301      	adds	r3, #1
 8005278:	4a2c      	ldr	r2, [pc, #176]	; (800532c <_tx_thread_create+0x1d8>)
 800527a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800527c:	4b2d      	ldr	r3, [pc, #180]	; (8005334 <_tx_thread_create+0x1e0>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3301      	adds	r3, #1
 8005282:	4a2c      	ldr	r2, [pc, #176]	; (8005334 <_tx_thread_create+0x1e0>)
 8005284:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8005286:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005288:	2b01      	cmp	r3, #1
 800528a:	d129      	bne.n	80052e0 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800528c:	f3ef 8305 	mrs	r3, IPSR
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8005292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8005294:	4b28      	ldr	r3, [pc, #160]	; (8005338 <_tx_thread_create+0x1e4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4313      	orrs	r3, r2
 800529a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800529e:	d30d      	bcc.n	80052bc <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80052a0:	4b26      	ldr	r3, [pc, #152]	; (800533c <_tx_thread_create+0x1e8>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80052a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d009      	beq.n	80052c0 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80052ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b0:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80052b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80052ba:	e001      	b.n	80052c0 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	647b      	str	r3, [r7, #68]	; 0x44
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	f383 8810 	msr	PRIMASK, r3
}
 80052ca:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f979 	bl	80055c4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80052d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01e      	beq.n	8005316 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80052d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80052de:	e01a      	b.n	8005316 <_tx_thread_create+0x1c2>
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f383 8810 	msr	PRIMASK, r3
}
 80052ea:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80052ec:	f3ef 8310 	mrs	r3, PRIMASK
 80052f0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80052f2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80052f4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80052f6:	b672      	cpsid	i
    return(int_posture);
 80052f8:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80052fa:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80052fc:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <_tx_thread_create+0x1e0>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3b01      	subs	r3, #1
 8005302:	4a0c      	ldr	r2, [pc, #48]	; (8005334 <_tx_thread_create+0x1e0>)
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f383 8810 	msr	PRIMASK, r3
}
 8005310:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005312:	f000 f91d 	bl	8005550 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3748      	adds	r7, #72	; 0x48
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	08005a99 	.word	0x08005a99
 8005324:	080053b9 	.word	0x080053b9
 8005328:	54485244 	.word	0x54485244
 800532c:	20000a68 	.word	0x20000a68
 8005330:	20000a64 	.word	0x20000a64
 8005334:	20000af4 	.word	0x20000af4
 8005338:	20000014 	.word	0x20000014
 800533c:	20000a60 	.word	0x20000a60

08005340 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8005344:	4b12      	ldr	r3, [pc, #72]	; (8005390 <_tx_thread_initialize+0x50>)
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800534a:	4b12      	ldr	r3, [pc, #72]	; (8005394 <_tx_thread_initialize+0x54>)
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	4b11      	ldr	r3, [pc, #68]	; (8005398 <_tx_thread_initialize+0x58>)
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8005356:	4b11      	ldr	r3, [pc, #68]	; (800539c <_tx_thread_initialize+0x5c>)
 8005358:	2220      	movs	r2, #32
 800535a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800535c:	2280      	movs	r2, #128	; 0x80
 800535e:	2100      	movs	r1, #0
 8005360:	480f      	ldr	r0, [pc, #60]	; (80053a0 <_tx_thread_initialize+0x60>)
 8005362:	f000 fff7 	bl	8006354 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8005366:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <_tx_thread_initialize+0x64>)
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800536c:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <_tx_thread_initialize+0x68>)
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8005372:	4b0e      	ldr	r3, [pc, #56]	; (80053ac <_tx_thread_initialize+0x6c>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8005378:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <_tx_thread_initialize+0x70>)
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800537e:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <_tx_thread_initialize+0x74>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8005386:	4a0b      	ldr	r2, [pc, #44]	; (80053b4 <_tx_thread_initialize+0x74>)
 8005388:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000a5c 	.word	0x20000a5c
 8005394:	20000a60 	.word	0x20000a60
 8005398:	20000a6c 	.word	0x20000a6c
 800539c:	20000a70 	.word	0x20000a70
 80053a0:	20000a74 	.word	0x20000a74
 80053a4:	20000a64 	.word	0x20000a64
 80053a8:	20000a68 	.word	0x20000a68
 80053ac:	20000af4 	.word	0x20000af4
 80053b0:	20000af8 	.word	0x20000af8
 80053b4:	20000afc 	.word	0x20000afc

080053b8 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80053be:	4b21      	ldr	r3, [pc, #132]	; (8005444 <_tx_thread_shell_entry+0x8c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053cc:	4610      	mov	r0, r2
 80053ce:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80053d0:	4b1d      	ldr	r3, [pc, #116]	; (8005448 <_tx_thread_shell_entry+0x90>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80053d8:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <_tx_thread_shell_entry+0x90>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69f8      	ldr	r0, [r7, #28]
 80053de:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80053e0:	f3ef 8310 	mrs	r3, PRIMASK
 80053e4:	607b      	str	r3, [r7, #4]
    return(posture);
 80053e6:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80053e8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80053ea:	b672      	cpsid	i
    return(int_posture);
 80053ec:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80053ee:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2201      	movs	r2, #1
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	2201      	movs	r2, #1
 80053fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2200      	movs	r2, #0
 8005400:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8005402:	4b12      	ldr	r3, [pc, #72]	; (800544c <_tx_thread_shell_entry+0x94>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3301      	adds	r3, #1
 8005408:	4a10      	ldr	r2, [pc, #64]	; (800544c <_tx_thread_shell_entry+0x94>)
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f383 8810 	msr	PRIMASK, r3
}
 8005416:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8005418:	f3ef 8314 	mrs	r3, CONTROL
 800541c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800541e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f023 0304 	bic.w	r3, r3, #4
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f383 8814 	msr	CONTROL, r3
}
 8005434:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8005436:	69f8      	ldr	r0, [r7, #28]
 8005438:	f000 f9c4 	bl	80057c4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800543c:	bf00      	nop
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	20000a5c 	.word	0x20000a5c
 8005448:	20000af8 	.word	0x20000af8
 800544c:	20000af4 	.word	0x20000af4

08005450 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08e      	sub	sp, #56	; 0x38
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005458:	f3ef 8310 	mrs	r3, PRIMASK
 800545c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8005462:	b672      	cpsid	i
    return(int_posture);
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8005466:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8005468:	4b35      	ldr	r3, [pc, #212]	; (8005540 <_tx_thread_sleep+0xf0>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d108      	bne.n	8005486 <_tx_thread_sleep+0x36>
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	f383 8810 	msr	PRIMASK, r3
}
 800547e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8005480:	2313      	movs	r3, #19
 8005482:	637b      	str	r3, [r7, #52]	; 0x34
 8005484:	e056      	b.n	8005534 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005486:	f3ef 8305 	mrs	r3, IPSR
 800548a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800548c:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800548e:	4b2d      	ldr	r3, [pc, #180]	; (8005544 <_tx_thread_sleep+0xf4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4313      	orrs	r3, r2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d008      	beq.n	80054aa <_tx_thread_sleep+0x5a>
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	f383 8810 	msr	PRIMASK, r3
}
 80054a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80054a4:	2313      	movs	r3, #19
 80054a6:	637b      	str	r3, [r7, #52]	; 0x34
 80054a8:	e044      	b.n	8005534 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ac:	4a26      	ldr	r2, [pc, #152]	; (8005548 <_tx_thread_sleep+0xf8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d108      	bne.n	80054c4 <_tx_thread_sleep+0x74>
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f383 8810 	msr	PRIMASK, r3
}
 80054bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80054be:	2313      	movs	r3, #19
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
 80054c2:	e037      	b.n	8005534 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d108      	bne.n	80054dc <_tx_thread_sleep+0x8c>
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f383 8810 	msr	PRIMASK, r3
}
 80054d4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80054d6:	2300      	movs	r3, #0
 80054d8:	637b      	str	r3, [r7, #52]	; 0x34
 80054da:	e02b      	b.n	8005534 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80054dc:	4b1b      	ldr	r3, [pc, #108]	; (800554c <_tx_thread_sleep+0xfc>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d008      	beq.n	80054f6 <_tx_thread_sleep+0xa6>
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f383 8810 	msr	PRIMASK, r3
}
 80054ee:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80054f0:	2313      	movs	r3, #19
 80054f2:	637b      	str	r3, [r7, #52]	; 0x34
 80054f4:	e01e      	b.n	8005534 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	2204      	movs	r2, #4
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fe:	2201      	movs	r2, #1
 8005500:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	2200      	movs	r2, #0
 8005506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8005510:	4b0e      	ldr	r3, [pc, #56]	; (800554c <_tx_thread_sleep+0xfc>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3301      	adds	r3, #1
 8005516:	4a0d      	ldr	r2, [pc, #52]	; (800554c <_tx_thread_sleep+0xfc>)
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f383 8810 	msr	PRIMASK, r3
}
 8005524:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8005526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005528:	f000 f94c 	bl	80057c4 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005532:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8005534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005536:	4618      	mov	r0, r3
 8005538:	3738      	adds	r7, #56	; 0x38
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000a5c 	.word	0x20000a5c
 8005544:	20000014 	.word	0x20000014
 8005548:	20000ba4 	.word	0x20000ba4
 800554c:	20000af4 	.word	0x20000af4

08005550 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	; 0x24
 8005554:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005556:	4b17      	ldr	r3, [pc, #92]	; (80055b4 <_tx_thread_system_preempt_check+0x64>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d121      	bne.n	80055a6 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8005562:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <_tx_thread_system_preempt_check+0x68>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8005568:	4b14      	ldr	r3, [pc, #80]	; (80055bc <_tx_thread_system_preempt_check+0x6c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	429a      	cmp	r2, r3
 8005574:	d017      	beq.n	80055a6 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005576:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <_tx_thread_system_preempt_check+0x70>)
 8005578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800557c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800557e:	f3ef 8305 	mrs	r3, IPSR
 8005582:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8005584:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10c      	bne.n	80055a4 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800558a:	f3ef 8310 	mrs	r3, PRIMASK
 800558e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8005590:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8005592:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005594:	b662      	cpsie	i
}
 8005596:	bf00      	nop
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f383 8810 	msr	PRIMASK, r3
}
 80055a2:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80055a4:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80055a6:	bf00      	nop
 80055a8:	3724      	adds	r7, #36	; 0x24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20000af4 	.word	0x20000af4
 80055b8:	20000a5c 	.word	0x20000a5c
 80055bc:	20000a60 	.word	0x20000a60
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b096      	sub	sp, #88	; 0x58
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80055cc:	f3ef 8310 	mrs	r3, PRIMASK
 80055d0:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80055d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80055d4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80055d6:	b672      	cpsid	i
    return(int_posture);
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80055da:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	334c      	adds	r3, #76	; 0x4c
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fb91 	bl	8005d10 <_tx_timer_system_deactivate>
 80055ee:	e002      	b.n	80055f6 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80055f6:	4b6c      	ldr	r3, [pc, #432]	; (80057a8 <_tx_thread_system_resume+0x1e4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	4a6a      	ldr	r2, [pc, #424]	; (80057a8 <_tx_thread_system_resume+0x1e4>)
 80055fe:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	2b00      	cmp	r3, #0
 8005606:	f040 8083 	bne.w	8005710 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 8097 	beq.w	8005742 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005618:	2b00      	cmp	r3, #0
 800561a:	d172      	bne.n	8005702 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8005628:	4a60      	ldr	r2, [pc, #384]	; (80057ac <_tx_thread_system_resume+0x1e8>)
 800562a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005630:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8005632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d154      	bne.n	80056e2 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8005638:	495c      	ldr	r1, [pc, #368]	; (80057ac <_tx_thread_system_resume+0x1e8>)
 800563a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800564e:	2201      	movs	r2, #1
 8005650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8005658:	4b55      	ldr	r3, [pc, #340]	; (80057b0 <_tx_thread_system_resume+0x1ec>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800565e:	4313      	orrs	r3, r2
 8005660:	4a53      	ldr	r2, [pc, #332]	; (80057b0 <_tx_thread_system_resume+0x1ec>)
 8005662:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8005664:	4b53      	ldr	r3, [pc, #332]	; (80057b4 <_tx_thread_system_resume+0x1f0>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800566a:	429a      	cmp	r2, r3
 800566c:	d269      	bcs.n	8005742 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800566e:	4a51      	ldr	r2, [pc, #324]	; (80057b4 <_tx_thread_system_resume+0x1f0>)
 8005670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005672:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8005674:	4b50      	ldr	r3, [pc, #320]	; (80057b8 <_tx_thread_system_resume+0x1f4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800567a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567c:	2b00      	cmp	r3, #0
 800567e:	d103      	bne.n	8005688 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8005680:	4a4d      	ldr	r2, [pc, #308]	; (80057b8 <_tx_thread_system_resume+0x1f4>)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	e05c      	b.n	8005742 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8005688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800568a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800568e:	429a      	cmp	r2, r3
 8005690:	d257      	bcs.n	8005742 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8005692:	4a49      	ldr	r2, [pc, #292]	; (80057b8 <_tx_thread_system_resume+0x1f4>)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800569c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569e:	f383 8810 	msr	PRIMASK, r3
}
 80056a2:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80056a4:	4b40      	ldr	r3, [pc, #256]	; (80057a8 <_tx_thread_system_resume+0x1e4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80056aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d174      	bne.n	800579a <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80056b0:	4b42      	ldr	r3, [pc, #264]	; (80057bc <_tx_thread_system_resume+0x1f8>)
 80056b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80056b8:	f3ef 8305 	mrs	r3, IPSR
 80056bc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10c      	bne.n	80056de <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80056c4:	f3ef 8310 	mrs	r3, PRIMASK
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 80056cc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80056ce:	b662      	cpsie	i
}
 80056d0:	bf00      	nop
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	f383 8810 	msr	PRIMASK, r3
}
 80056dc:	bf00      	nop
}
 80056de:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80056e0:	e05b      	b.n	800579a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80056e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80056e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80056ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056f8:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056fe:	621a      	str	r2, [r3, #32]
 8005700:	e01f      	b.n	8005742 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2203      	movs	r2, #3
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
 800570e:	e018      	b.n	8005742 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	2b01      	cmp	r3, #1
 8005716:	d014      	beq.n	8005742 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	2b02      	cmp	r3, #2
 800571e:	d010      	beq.n	8005742 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005724:	2b00      	cmp	r3, #0
 8005726:	d106      	bne.n	8005736 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
 8005734:	e005      	b.n	8005742 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2203      	movs	r2, #3
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8005742:	4b1f      	ldr	r3, [pc, #124]	; (80057c0 <_tx_thread_system_resume+0x1fc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	63bb      	str	r3, [r7, #56]	; 0x38
 8005748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800574a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	f383 8810 	msr	PRIMASK, r3
}
 8005752:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8005754:	4b18      	ldr	r3, [pc, #96]	; (80057b8 <_tx_thread_system_resume+0x1f4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800575a:	429a      	cmp	r2, r3
 800575c:	d020      	beq.n	80057a0 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800575e:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <_tx_thread_system_resume+0x1e4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8005764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d11a      	bne.n	80057a0 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800576a:	4b14      	ldr	r3, [pc, #80]	; (80057bc <_tx_thread_system_resume+0x1f8>)
 800576c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005770:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005772:	f3ef 8305 	mrs	r3, IPSR
 8005776:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005778:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10f      	bne.n	800579e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800577e:	f3ef 8310 	mrs	r3, PRIMASK
 8005782:	613b      	str	r3, [r7, #16]
    return(posture);
 8005784:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8005786:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005788:	b662      	cpsie	i
}
 800578a:	bf00      	nop
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f383 8810 	msr	PRIMASK, r3
}
 8005796:	bf00      	nop
}
 8005798:	e001      	b.n	800579e <_tx_thread_system_resume+0x1da>
                                return;
 800579a:	bf00      	nop
 800579c:	e000      	b.n	80057a0 <_tx_thread_system_resume+0x1dc>
 800579e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80057a0:	3758      	adds	r7, #88	; 0x58
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000af4 	.word	0x20000af4
 80057ac:	20000a74 	.word	0x20000a74
 80057b0:	20000a6c 	.word	0x20000a6c
 80057b4:	20000a70 	.word	0x20000a70
 80057b8:	20000a60 	.word	0x20000a60
 80057bc:	e000ed04 	.word	0xe000ed04
 80057c0:	20000a5c 	.word	0x20000a5c

080057c4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b09e      	sub	sp, #120	; 0x78
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80057cc:	4b81      	ldr	r3, [pc, #516]	; (80059d4 <_tx_thread_system_suspend+0x210>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80057d2:	f3ef 8310 	mrs	r3, PRIMASK
 80057d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 80057d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 80057da:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 80057dc:	b672      	cpsid	i
    return(int_posture);
 80057de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80057e0:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d112      	bne.n	8005810 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ee:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80057f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d008      	beq.n	8005808 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80057f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057fc:	d004      	beq.n	8005808 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	334c      	adds	r3, #76	; 0x4c
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fa22 	bl	8005c4c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	4a72      	ldr	r2, [pc, #456]	; (80059d8 <_tx_thread_system_suspend+0x214>)
 800580e:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8005810:	4b72      	ldr	r3, [pc, #456]	; (80059dc <_tx_thread_system_suspend+0x218>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3b01      	subs	r3, #1
 8005816:	4a71      	ldr	r2, [pc, #452]	; (80059dc <_tx_thread_system_suspend+0x218>)
 8005818:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	2b01      	cmp	r3, #1
 8005820:	f040 80a6 	bne.w	8005970 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8005836:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	429a      	cmp	r2, r3
 800583c:	d015      	beq.n	800586a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8005844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005846:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005848:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800584a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800584c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800584e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8005850:	4a63      	ldr	r2, [pc, #396]	; (80059e0 <_tx_thread_system_suspend+0x21c>)
 8005852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d157      	bne.n	800590e <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800585e:	4960      	ldr	r1, [pc, #384]	; (80059e0 <_tx_thread_system_suspend+0x21c>)
 8005860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005862:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005868:	e051      	b.n	800590e <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800586a:	4a5d      	ldr	r2, [pc, #372]	; (80059e0 <_tx_thread_system_suspend+0x21c>)
 800586c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800586e:	2100      	movs	r1, #0
 8005870:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8005874:	2201      	movs	r2, #1
 8005876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800587e:	4b59      	ldr	r3, [pc, #356]	; (80059e4 <_tx_thread_system_suspend+0x220>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005884:	43db      	mvns	r3, r3
 8005886:	4013      	ands	r3, r2
 8005888:	4a56      	ldr	r2, [pc, #344]	; (80059e4 <_tx_thread_system_suspend+0x220>)
 800588a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800588c:	2300      	movs	r3, #0
 800588e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8005890:	4b54      	ldr	r3, [pc, #336]	; (80059e4 <_tx_thread_system_suspend+0x220>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8005896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005898:	2b00      	cmp	r3, #0
 800589a:	d12b      	bne.n	80058f4 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800589c:	4b52      	ldr	r3, [pc, #328]	; (80059e8 <_tx_thread_system_suspend+0x224>)
 800589e:	2220      	movs	r2, #32
 80058a0:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80058a2:	4b52      	ldr	r3, [pc, #328]	; (80059ec <_tx_thread_system_suspend+0x228>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058aa:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80058ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ae:	f383 8810 	msr	PRIMASK, r3
}
 80058b2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80058b4:	4b49      	ldr	r3, [pc, #292]	; (80059dc <_tx_thread_system_suspend+0x218>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 80058ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f040 8081 	bne.w	80059c4 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80058c2:	4b4b      	ldr	r3, [pc, #300]	; (80059f0 <_tx_thread_system_suspend+0x22c>)
 80058c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80058ca:	f3ef 8305 	mrs	r3, IPSR
 80058ce:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 80058d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10c      	bne.n	80058f0 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80058d6:	f3ef 8310 	mrs	r3, PRIMASK
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 80058dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 80058de:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 80058e0:	b662      	cpsie	i
}
 80058e2:	bf00      	nop
 80058e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e6:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80058e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ea:	f383 8810 	msr	PRIMASK, r3
}
 80058ee:	bf00      	nop
}
 80058f0:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80058f2:	e067      	b.n	80059c4 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80058f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058f6:	fa93 f3a3 	rbit	r3, r3
 80058fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80058fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058fe:	fab3 f383 	clz	r3, r3
 8005902:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8005904:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005908:	4413      	add	r3, r2
 800590a:	4a37      	ldr	r2, [pc, #220]	; (80059e8 <_tx_thread_system_suspend+0x224>)
 800590c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800590e:	4b37      	ldr	r3, [pc, #220]	; (80059ec <_tx_thread_system_suspend+0x228>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	429a      	cmp	r2, r3
 8005916:	d12b      	bne.n	8005970 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005918:	4b33      	ldr	r3, [pc, #204]	; (80059e8 <_tx_thread_system_suspend+0x224>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a30      	ldr	r2, [pc, #192]	; (80059e0 <_tx_thread_system_suspend+0x21c>)
 800591e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005922:	4a32      	ldr	r2, [pc, #200]	; (80059ec <_tx_thread_system_suspend+0x228>)
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005928:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	f383 8810 	msr	PRIMASK, r3
}
 8005930:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005932:	4b2a      	ldr	r3, [pc, #168]	; (80059dc <_tx_thread_system_suspend+0x218>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8005938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800593a:	2b00      	cmp	r3, #0
 800593c:	d144      	bne.n	80059c8 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800593e:	4b2c      	ldr	r3, [pc, #176]	; (80059f0 <_tx_thread_system_suspend+0x22c>)
 8005940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005944:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005946:	f3ef 8305 	mrs	r3, IPSR
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10c      	bne.n	800596c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005952:	f3ef 8310 	mrs	r3, PRIMASK
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800595c:	b662      	cpsie	i
}
 800595e:	bf00      	nop
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	f383 8810 	msr	PRIMASK, r3
}
 800596a:	bf00      	nop
}
 800596c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800596e:	e02b      	b.n	80059c8 <_tx_thread_system_suspend+0x204>
 8005970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005972:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f383 8810 	msr	PRIMASK, r3
}
 800597a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800597c:	4b1b      	ldr	r3, [pc, #108]	; (80059ec <_tx_thread_system_suspend+0x228>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005982:	429a      	cmp	r2, r3
 8005984:	d022      	beq.n	80059cc <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005986:	4b15      	ldr	r3, [pc, #84]	; (80059dc <_tx_thread_system_suspend+0x218>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800598c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800598e:	2b00      	cmp	r3, #0
 8005990:	d11c      	bne.n	80059cc <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005992:	4b17      	ldr	r3, [pc, #92]	; (80059f0 <_tx_thread_system_suspend+0x22c>)
 8005994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005998:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800599a:	f3ef 8305 	mrs	r3, IPSR
 800599e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80059a0:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10c      	bne.n	80059c0 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80059a6:	f3ef 8310 	mrs	r3, PRIMASK
 80059aa:	617b      	str	r3, [r7, #20]
    return(posture);
 80059ac:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 80059ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80059b0:	b662      	cpsie	i
}
 80059b2:	bf00      	nop
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f383 8810 	msr	PRIMASK, r3
}
 80059be:	bf00      	nop
}
 80059c0:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80059c2:	e003      	b.n	80059cc <_tx_thread_system_suspend+0x208>
                return;
 80059c4:	bf00      	nop
 80059c6:	e002      	b.n	80059ce <_tx_thread_system_suspend+0x20a>
            return;
 80059c8:	bf00      	nop
 80059ca:	e000      	b.n	80059ce <_tx_thread_system_suspend+0x20a>
    return;
 80059cc:	bf00      	nop
}
 80059ce:	3778      	adds	r7, #120	; 0x78
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20000a5c 	.word	0x20000a5c
 80059d8:	20001060 	.word	0x20001060
 80059dc:	20000af4 	.word	0x20000af4
 80059e0:	20000a74 	.word	0x20000a74
 80059e4:	20000a6c 	.word	0x20000a6c
 80059e8:	20000a70 	.word	0x20000a70
 80059ec:	20000a60 	.word	0x20000a60
 80059f0:	e000ed04 	.word	0xe000ed04

080059f4 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80059fa:	4b21      	ldr	r3, [pc, #132]	; (8005a80 <_tx_thread_time_slice+0x8c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005a00:	f3ef 8310 	mrs	r3, PRIMASK
 8005a04:	60fb      	str	r3, [r7, #12]
    return(posture);
 8005a06:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8005a08:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005a0a:	b672      	cpsid	i
    return(int_posture);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8005a0e:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005a10:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <_tx_thread_time_slice+0x90>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d024      	beq.n	8005a66 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d120      	bne.n	8005a66 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <_tx_thread_time_slice+0x94>)
 8005a32:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d013      	beq.n	8005a66 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d10d      	bne.n	8005a66 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	6a12      	ldr	r2, [r2, #32]
 8005a52:	490e      	ldr	r1, [pc, #56]	; (8005a8c <_tx_thread_time_slice+0x98>)
 8005a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005a58:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <_tx_thread_time_slice+0x9c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a0b      	ldr	r2, [pc, #44]	; (8005a8c <_tx_thread_time_slice+0x98>)
 8005a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a62:	4a0c      	ldr	r2, [pc, #48]	; (8005a94 <_tx_thread_time_slice+0xa0>)
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f383 8810 	msr	PRIMASK, r3
}
 8005a70:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000a5c 	.word	0x20000a5c
 8005a84:	20000b04 	.word	0x20000b04
 8005a88:	20001060 	.word	0x20001060
 8005a8c:	20000a74 	.word	0x20000a74
 8005a90:	20000a70 	.word	0x20000a70
 8005a94:	20000a60 	.word	0x20000a60

08005a98 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	; 0x28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa8:	617b      	str	r3, [r7, #20]
    return(posture);
 8005aaa:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8005aac:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005aae:	b672      	cpsid	i
    return(int_posture);
 8005ab0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8005ab2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d10e      	bne.n	8005ada <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8005abc:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <_tx_thread_timeout+0x74>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	4a12      	ldr	r2, [pc, #72]	; (8005b0c <_tx_thread_timeout+0x74>)
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f383 8810 	msr	PRIMASK, r3
}
 8005ad0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8005ad2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ad4:	f7ff fd76 	bl	80055c4 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8005ad8:	e013      	b.n	8005b02 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ade:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ae6:	61bb      	str	r3, [r7, #24]
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f383 8810 	msr	PRIMASK, r3
}
 8005af2:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	69b9      	ldr	r1, [r7, #24]
 8005afe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b00:	4798      	blx	r3
}
 8005b02:	bf00      	nop
 8005b04:	3728      	adds	r7, #40	; 0x28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000af4 	.word	0x20000af4

08005b10 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005b16:	f3ef 8310 	mrs	r3, PRIMASK
 8005b1a:	607b      	str	r3, [r7, #4]
    return(posture);
 8005b1c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8005b1e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005b20:	b672      	cpsid	i
    return(int_posture);
 8005b22:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8005b24:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8005b26:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <_tx_timer_expiration_process+0x3c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	4a07      	ldr	r2, [pc, #28]	; (8005b4c <_tx_timer_expiration_process+0x3c>)
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f383 8810 	msr	PRIMASK, r3
}
 8005b3a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8005b3c:	4804      	ldr	r0, [pc, #16]	; (8005b50 <_tx_timer_expiration_process+0x40>)
 8005b3e:	f7ff fd41 	bl	80055c4 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8005b42:	bf00      	nop
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000af4 	.word	0x20000af4
 8005b50:	20000ba4 	.word	0x20000ba4

08005b54 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8005b54:	b590      	push	{r4, r7, lr}
 8005b56:	b089      	sub	sp, #36	; 0x24
 8005b58:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8005b5a:	4b28      	ldr	r3, [pc, #160]	; (8005bfc <_tx_timer_initialize+0xa8>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8005b60:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <_tx_timer_initialize+0xac>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005b66:	4b27      	ldr	r3, [pc, #156]	; (8005c04 <_tx_timer_initialize+0xb0>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8005b6c:	4b26      	ldr	r3, [pc, #152]	; (8005c08 <_tx_timer_initialize+0xb4>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8005b72:	4b26      	ldr	r3, [pc, #152]	; (8005c0c <_tx_timer_initialize+0xb8>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005b78:	2280      	movs	r2, #128	; 0x80
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	4824      	ldr	r0, [pc, #144]	; (8005c10 <_tx_timer_initialize+0xbc>)
 8005b7e:	f000 fbe9 	bl	8006354 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8005b82:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <_tx_timer_initialize+0xc0>)
 8005b84:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <_tx_timer_initialize+0xbc>)
 8005b86:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8005b88:	4b23      	ldr	r3, [pc, #140]	; (8005c18 <_tx_timer_initialize+0xc4>)
 8005b8a:	4a21      	ldr	r2, [pc, #132]	; (8005c10 <_tx_timer_initialize+0xbc>)
 8005b8c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8005b8e:	4b23      	ldr	r3, [pc, #140]	; (8005c1c <_tx_timer_initialize+0xc8>)
 8005b90:	4a23      	ldr	r2, [pc, #140]	; (8005c20 <_tx_timer_initialize+0xcc>)
 8005b92:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8005b94:	4b21      	ldr	r3, [pc, #132]	; (8005c1c <_tx_timer_initialize+0xc8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	4a20      	ldr	r2, [pc, #128]	; (8005c1c <_tx_timer_initialize+0xc8>)
 8005b9c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8005b9e:	4b21      	ldr	r3, [pc, #132]	; (8005c24 <_tx_timer_initialize+0xd0>)
 8005ba0:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <_tx_timer_initialize+0xd4>)
 8005ba2:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8005ba4:	4b21      	ldr	r3, [pc, #132]	; (8005c2c <_tx_timer_initialize+0xd8>)
 8005ba6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005baa:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8005bac:	4b20      	ldr	r3, [pc, #128]	; (8005c30 <_tx_timer_initialize+0xdc>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8005bb2:	4b1c      	ldr	r3, [pc, #112]	; (8005c24 <_tx_timer_initialize+0xd0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1d      	ldr	r2, [pc, #116]	; (8005c2c <_tx_timer_initialize+0xd8>)
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	491d      	ldr	r1, [pc, #116]	; (8005c30 <_tx_timer_initialize+0xdc>)
 8005bbc:	6809      	ldr	r1, [r1, #0]
 8005bbe:	481c      	ldr	r0, [pc, #112]	; (8005c30 <_tx_timer_initialize+0xdc>)
 8005bc0:	6800      	ldr	r0, [r0, #0]
 8005bc2:	2400      	movs	r4, #0
 8005bc4:	9405      	str	r4, [sp, #20]
 8005bc6:	2400      	movs	r4, #0
 8005bc8:	9404      	str	r4, [sp, #16]
 8005bca:	9003      	str	r0, [sp, #12]
 8005bcc:	9102      	str	r1, [sp, #8]
 8005bce:	9201      	str	r2, [sp, #4]
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	4b18      	ldr	r3, [pc, #96]	; (8005c34 <_tx_timer_initialize+0xe0>)
 8005bd4:	4a18      	ldr	r2, [pc, #96]	; (8005c38 <_tx_timer_initialize+0xe4>)
 8005bd6:	4919      	ldr	r1, [pc, #100]	; (8005c3c <_tx_timer_initialize+0xe8>)
 8005bd8:	4819      	ldr	r0, [pc, #100]	; (8005c40 <_tx_timer_initialize+0xec>)
 8005bda:	f7ff fabb 	bl	8005154 <_tx_thread_create>
 8005bde:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e5      	bne.n	8005bb2 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8005be6:	4b17      	ldr	r3, [pc, #92]	; (8005c44 <_tx_timer_initialize+0xf0>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8005bec:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <_tx_timer_initialize+0xf4>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd90      	pop	{r4, r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000b00 	.word	0x20000b00
 8005c00:	20001060 	.word	0x20001060
 8005c04:	20000b04 	.word	0x20000b04
 8005c08:	20000b94 	.word	0x20000b94
 8005c0c:	20000ba0 	.word	0x20000ba0
 8005c10:	20000b08 	.word	0x20000b08
 8005c14:	20000b88 	.word	0x20000b88
 8005c18:	20000b90 	.word	0x20000b90
 8005c1c:	20000b8c 	.word	0x20000b8c
 8005c20:	20000b84 	.word	0x20000b84
 8005c24:	20000c54 	.word	0x20000c54
 8005c28:	20000c60 	.word	0x20000c60
 8005c2c:	20000c58 	.word	0x20000c58
 8005c30:	20000c5c 	.word	0x20000c5c
 8005c34:	4154494d 	.word	0x4154494d
 8005c38:	08005d81 	.word	0x08005d81
 8005c3c:	080073a0 	.word	0x080073a0
 8005c40:	20000ba4 	.word	0x20000ba4
 8005c44:	20000b98 	.word	0x20000b98
 8005c48:	20000b9c 	.word	0x20000b9c

08005c4c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b089      	sub	sp, #36	; 0x24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d04a      	beq.n	8005cf6 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c66:	d046      	beq.n	8005cf6 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d142      	bne.n	8005cf6 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d902      	bls.n	8005c7c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8005c76:	231f      	movs	r3, #31
 8005c78:	61bb      	str	r3, [r7, #24]
 8005c7a:	e002      	b.n	8005c82 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8005c82:	4b20      	ldr	r3, [pc, #128]	; (8005d04 <_tx_timer_system_activate+0xb8>)
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8005c8e:	4b1e      	ldr	r3, [pc, #120]	; (8005d08 <_tx_timer_system_activate+0xbc>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d30b      	bcc.n	8005cb0 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8005c98:	4b1b      	ldr	r3, [pc, #108]	; (8005d08 <_tx_timer_system_activate+0xbc>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	109b      	asrs	r3, r3, #2
 8005ca2:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8005ca4:	4b19      	ldr	r3, [pc, #100]	; (8005d0c <_tx_timer_system_activate+0xc0>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d109      	bne.n	8005ccc <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	e011      	b.n	8005cf0 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8005cf6:	bf00      	nop
 8005cf8:	3724      	adds	r7, #36	; 0x24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	20000b90 	.word	0x20000b90
 8005d08:	20000b8c 	.word	0x20000b8c
 8005d0c:	20000b88 	.word	0x20000b88

08005d10 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d026      	beq.n	8005d72 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d108      	bne.n	8005d44 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d117      	bne.n	8005d6c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	e013      	b.n	8005d6c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d105      	bne.n	8005d6c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	619a      	str	r2, [r3, #24]
    }
}
 8005d72:	bf00      	nop
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
	...

08005d80 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b098      	sub	sp, #96	; 0x60
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8005d88:	2300      	movs	r3, #0
 8005d8a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a73      	ldr	r2, [pc, #460]	; (8005f5c <_tx_timer_thread_entry+0x1dc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	f040 80de 	bne.w	8005f52 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005d96:	f3ef 8310 	mrs	r3, PRIMASK
 8005d9a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8005d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8005d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8005da0:	b672      	cpsid	i
    return(int_posture);
 8005da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8005da4:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8005da6:	4b6e      	ldr	r3, [pc, #440]	; (8005f60 <_tx_timer_thread_entry+0x1e0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f107 020c 	add.w	r2, r7, #12
 8005dba:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8005dbc:	4b68      	ldr	r3, [pc, #416]	; (8005f60 <_tx_timer_thread_entry+0x1e0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8005dc4:	4b66      	ldr	r3, [pc, #408]	; (8005f60 <_tx_timer_thread_entry+0x1e0>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4a65      	ldr	r2, [pc, #404]	; (8005f60 <_tx_timer_thread_entry+0x1e0>)
 8005dcc:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8005dce:	4b64      	ldr	r3, [pc, #400]	; (8005f60 <_tx_timer_thread_entry+0x1e0>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b64      	ldr	r3, [pc, #400]	; (8005f64 <_tx_timer_thread_entry+0x1e4>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d103      	bne.n	8005de2 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8005dda:	4b63      	ldr	r3, [pc, #396]	; (8005f68 <_tx_timer_thread_entry+0x1e8>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a60      	ldr	r2, [pc, #384]	; (8005f60 <_tx_timer_thread_entry+0x1e0>)
 8005de0:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8005de2:	4b62      	ldr	r3, [pc, #392]	; (8005f6c <_tx_timer_thread_entry+0x1ec>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dea:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	f383 8810 	msr	PRIMASK, r3
}
 8005df2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005df4:	f3ef 8310 	mrs	r3, PRIMASK
 8005df8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8005dfe:	b672      	cpsid	i
    return(int_posture);
 8005e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8005e02:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8005e04:	e07f      	b.n	8005f06 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8005e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d102      	bne.n	8005e22 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	e00e      	b.n	8005e40 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8005e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e2c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e32:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8005e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e36:	f107 020c 	add.w	r2, r7, #12
 8005e3a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8005e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e3e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8005e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d911      	bls.n	8005e6c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8005e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8005e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e52:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e5a:	f107 0208 	add.w	r2, r7, #8
 8005e5e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8005e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e64:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8005e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	e01a      	b.n	8005ea2 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8005e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8005e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8005e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e7e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8005e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d009      	beq.n	8005e9c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8a:	f107 0208 	add.w	r2, r7, #8
 8005e8e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8005e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e94:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8005e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	e002      	b.n	8005ea2 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8005e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8005ea2:	4a33      	ldr	r2, [pc, #204]	; (8005f70 <_tx_timer_thread_entry+0x1f0>)
 8005ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	f383 8810 	msr	PRIMASK, r3
}
 8005eb2:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8005eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8005eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ebc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005ebe:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8005eca:	b672      	cpsid	i
    return(int_posture);
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8005ece:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8005ed0:	4b27      	ldr	r3, [pc, #156]	; (8005f70 <_tx_timer_thread_entry+0x1f0>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d105      	bne.n	8005eea <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8005ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8005ee4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005ee6:	f7ff feb1 	bl	8005c4c <_tx_timer_system_activate>
 8005eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eec:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f383 8810 	msr	PRIMASK, r3
}
 8005ef4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8005efa:	623b      	str	r3, [r7, #32]
    return(posture);
 8005efc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005efe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005f00:	b672      	cpsid	i
    return(int_posture);
 8005f02:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8005f04:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f47f af7c 	bne.w	8005e06 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8005f0e:	4b17      	ldr	r3, [pc, #92]	; (8005f6c <_tx_timer_thread_entry+0x1ec>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d116      	bne.n	8005f44 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8005f16:	4b17      	ldr	r3, [pc, #92]	; (8005f74 <_tx_timer_thread_entry+0x1f4>)
 8005f18:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f22:	2201      	movs	r2, #1
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <_tx_timer_thread_entry+0x1f8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	4a12      	ldr	r2, [pc, #72]	; (8005f78 <_tx_timer_thread_entry+0x1f8>)
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f32:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f383 8810 	msr	PRIMASK, r3
}
 8005f3a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005f3c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005f3e:	f7ff fc41 	bl	80057c4 <_tx_thread_system_suspend>
 8005f42:	e728      	b.n	8005d96 <_tx_timer_thread_entry+0x16>
 8005f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f46:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f383 8810 	msr	PRIMASK, r3
}
 8005f4e:	bf00      	nop
            TX_DISABLE
 8005f50:	e721      	b.n	8005d96 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8005f52:	bf00      	nop
 8005f54:	3760      	adds	r7, #96	; 0x60
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	4154494d 	.word	0x4154494d
 8005f60:	20000b90 	.word	0x20000b90
 8005f64:	20000b8c 	.word	0x20000b8c
 8005f68:	20000b88 	.word	0x20000b88
 8005f6c:	20000b94 	.word	0x20000b94
 8005f70:	20000ba0 	.word	0x20000ba0
 8005f74:	20000ba4 	.word	0x20000ba4
 8005f78:	20000af4 	.word	0x20000af4

08005f7c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b092      	sub	sp, #72	; 0x48
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d102      	bne.n	8005f9a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005f94:	2302      	movs	r3, #2
 8005f96:	647b      	str	r3, [r7, #68]	; 0x44
 8005f98:	e075      	b.n	8006086 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8005f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f9c:	2b34      	cmp	r3, #52	; 0x34
 8005f9e:	d002      	beq.n	8005fa6 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa4:	e06f      	b.n	8006086 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005fb0:	b672      	cpsid	i
    return(int_posture);
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005fb4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005fb6:	4b3b      	ldr	r3, [pc, #236]	; (80060a4 <_txe_byte_pool_create+0x128>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	4a39      	ldr	r2, [pc, #228]	; (80060a4 <_txe_byte_pool_create+0x128>)
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	f383 8810 	msr	PRIMASK, r3
}
 8005fca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8005fcc:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <_txe_byte_pool_create+0x12c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd6:	e009      	b.n	8005fec <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d00b      	beq.n	8005ff8 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8005fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe8:	3301      	adds	r3, #1
 8005fea:	643b      	str	r3, [r7, #64]	; 0x40
 8005fec:	4b2f      	ldr	r3, [pc, #188]	; (80060ac <_txe_byte_pool_create+0x130>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d3f0      	bcc.n	8005fd8 <_txe_byte_pool_create+0x5c>
 8005ff6:	e000      	b.n	8005ffa <_txe_byte_pool_create+0x7e>
                break;
 8005ff8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8005ffe:	623b      	str	r3, [r7, #32]
    return(posture);
 8006000:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006002:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006004:	b672      	cpsid	i
    return(int_posture);
 8006006:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8006008:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800600a:	4b26      	ldr	r3, [pc, #152]	; (80060a4 <_txe_byte_pool_create+0x128>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3b01      	subs	r3, #1
 8006010:	4a24      	ldr	r2, [pc, #144]	; (80060a4 <_txe_byte_pool_create+0x128>)
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	f383 8810 	msr	PRIMASK, r3
}
 800601e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8006020:	f7ff fa96 	bl	8005550 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006028:	429a      	cmp	r2, r3
 800602a:	d102      	bne.n	8006032 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800602c:	2302      	movs	r3, #2
 800602e:	647b      	str	r3, [r7, #68]	; 0x44
 8006030:	e029      	b.n	8006086 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8006038:	2303      	movs	r3, #3
 800603a:	647b      	str	r3, [r7, #68]	; 0x44
 800603c:	e023      	b.n	8006086 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b63      	cmp	r3, #99	; 0x63
 8006042:	d802      	bhi.n	800604a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8006044:	2305      	movs	r3, #5
 8006046:	647b      	str	r3, [r7, #68]	; 0x44
 8006048:	e01d      	b.n	8006086 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800604a:	4b19      	ldr	r3, [pc, #100]	; (80060b0 <_txe_byte_pool_create+0x134>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8006050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006052:	4a18      	ldr	r2, [pc, #96]	; (80060b4 <_txe_byte_pool_create+0x138>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d101      	bne.n	800605c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8006058:	2313      	movs	r3, #19
 800605a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800605c:	f3ef 8305 	mrs	r3, IPSR
 8006060:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8006062:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006064:	4b14      	ldr	r3, [pc, #80]	; (80060b8 <_txe_byte_pool_create+0x13c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4313      	orrs	r3, r2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00b      	beq.n	8006086 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800606e:	f3ef 8305 	mrs	r3, IPSR
 8006072:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006074:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8006076:	4b10      	ldr	r3, [pc, #64]	; (80060b8 <_txe_byte_pool_create+0x13c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4313      	orrs	r3, r2
 800607c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006080:	d201      	bcs.n	8006086 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8006082:	2313      	movs	r3, #19
 8006084:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8006086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f7fe ff5a 	bl	8004f4c <_tx_byte_pool_create>
 8006098:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800609a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800609c:	4618      	mov	r0, r3
 800609e:	3748      	adds	r7, #72	; 0x48
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20000af4 	.word	0x20000af4
 80060a8:	20000a4c 	.word	0x20000a4c
 80060ac:	20000a50 	.word	0x20000a50
 80060b0:	20000a5c 	.word	0x20000a5c
 80060b4:	20000ba4 	.word	0x20000ba4
 80060b8:	20000014 	.word	0x20000014

080060bc <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b09a      	sub	sp, #104	; 0x68
 80060c0:	af06      	add	r7, sp, #24
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80060ca:	2300      	movs	r3, #0
 80060cc:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d102      	bne.n	80060da <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80060d4:	230e      	movs	r3, #14
 80060d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d8:	e0bb      	b.n	8006252 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80060da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060dc:	2bb0      	cmp	r3, #176	; 0xb0
 80060de:	d002      	beq.n	80060e6 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80060e0:	230e      	movs	r3, #14
 80060e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060e4:	e0b5      	b.n	8006252 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80060e6:	f3ef 8310 	mrs	r3, PRIMASK
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80060f0:	b672      	cpsid	i
    return(int_posture);
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80060f4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80060f6:	4b64      	ldr	r3, [pc, #400]	; (8006288 <_txe_thread_create+0x1cc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3301      	adds	r3, #1
 80060fc:	4a62      	ldr	r2, [pc, #392]	; (8006288 <_txe_thread_create+0x1cc>)
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	f383 8810 	msr	PRIMASK, r3
}
 800610a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800610c:	2300      	movs	r3, #0
 800610e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8006110:	4b5e      	ldr	r3, [pc, #376]	; (800628c <_txe_thread_create+0x1d0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8006116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006118:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800611a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800611c:	3b01      	subs	r3, #1
 800611e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006120:	4413      	add	r3, r2
 8006122:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8006128:	2300      	movs	r3, #0
 800612a:	647b      	str	r3, [r7, #68]	; 0x44
 800612c:	e02b      	b.n	8006186 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006132:	429a      	cmp	r2, r3
 8006134:	d101      	bne.n	800613a <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8006136:	2301      	movs	r3, #1
 8006138:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800613a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800613c:	2b01      	cmp	r3, #1
 800613e:	d028      	beq.n	8006192 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8006140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006146:	429a      	cmp	r2, r3
 8006148:	d308      	bcc.n	800615c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800614a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006150:	429a      	cmp	r2, r3
 8006152:	d203      	bcs.n	800615c <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8006154:	2300      	movs	r3, #0
 8006156:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8006158:	2301      	movs	r3, #1
 800615a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800615c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006162:	429a      	cmp	r2, r3
 8006164:	d308      	bcc.n	8006178 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8006166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800616c:	429a      	cmp	r2, r3
 800616e:	d203      	bcs.n	8006178 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8006170:	2300      	movs	r3, #0
 8006172:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8006174:	2301      	movs	r3, #1
 8006176:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8006178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800617a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8006180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006182:	3301      	adds	r3, #1
 8006184:	647b      	str	r3, [r7, #68]	; 0x44
 8006186:	4b42      	ldr	r3, [pc, #264]	; (8006290 <_txe_thread_create+0x1d4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800618c:	429a      	cmp	r2, r3
 800618e:	d3ce      	bcc.n	800612e <_txe_thread_create+0x72>
 8006190:	e000      	b.n	8006194 <_txe_thread_create+0xd8>
                break;
 8006192:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006194:	f3ef 8310 	mrs	r3, PRIMASK
 8006198:	61fb      	str	r3, [r7, #28]
    return(posture);
 800619a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800619c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800619e:	b672      	cpsid	i
    return(int_posture);
 80061a0:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80061a4:	4b38      	ldr	r3, [pc, #224]	; (8006288 <_txe_thread_create+0x1cc>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	4a37      	ldr	r2, [pc, #220]	; (8006288 <_txe_thread_create+0x1cc>)
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	f383 8810 	msr	PRIMASK, r3
}
 80061b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80061ba:	f7ff f9c9 	bl	8005550 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d102      	bne.n	80061cc <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80061c6:	230e      	movs	r3, #14
 80061c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ca:	e042      	b.n	8006252 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80061cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d102      	bne.n	80061d8 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80061d2:	2303      	movs	r3, #3
 80061d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d6:	e03c      	b.n	8006252 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d102      	bne.n	80061e4 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80061de:	2303      	movs	r3, #3
 80061e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e2:	e036      	b.n	8006252 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80061e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061e6:	2bc7      	cmp	r3, #199	; 0xc7
 80061e8:	d802      	bhi.n	80061f0 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80061ea:	2305      	movs	r3, #5
 80061ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ee:	e030      	b.n	8006252 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80061f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f2:	2b1f      	cmp	r3, #31
 80061f4:	d902      	bls.n	80061fc <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80061f6:	230f      	movs	r3, #15
 80061f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061fa:	e02a      	b.n	8006252 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80061fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80061fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006200:	429a      	cmp	r2, r3
 8006202:	d902      	bls.n	800620a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8006204:	2318      	movs	r3, #24
 8006206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006208:	e023      	b.n	8006252 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800620a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620c:	2b01      	cmp	r3, #1
 800620e:	d902      	bls.n	8006216 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8006210:	2310      	movs	r3, #16
 8006212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006214:	e01d      	b.n	8006252 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8006216:	4b1f      	ldr	r3, [pc, #124]	; (8006294 <_txe_thread_create+0x1d8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <_txe_thread_create+0x1dc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d101      	bne.n	8006228 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8006224:	2313      	movs	r3, #19
 8006226:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006228:	f3ef 8305 	mrs	r3, IPSR
 800622c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800622e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006230:	4b1a      	ldr	r3, [pc, #104]	; (800629c <_txe_thread_create+0x1e0>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4313      	orrs	r3, r2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00b      	beq.n	8006252 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800623a:	f3ef 8305 	mrs	r3, IPSR
 800623e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8006240:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8006242:	4b16      	ldr	r3, [pc, #88]	; (800629c <_txe_thread_create+0x1e0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4313      	orrs	r3, r2
 8006248:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800624c:	d201      	bcs.n	8006252 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800624e:	2313      	movs	r3, #19
 8006250:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8006252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d112      	bne.n	800627e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8006258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625a:	9305      	str	r3, [sp, #20]
 800625c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800625e:	9304      	str	r3, [sp, #16]
 8006260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006262:	9303      	str	r3, [sp, #12]
 8006264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006266:	9302      	str	r3, [sp, #8]
 8006268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800626a:	9301      	str	r3, [sp, #4]
 800626c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f7fe ff6c 	bl	8005154 <_tx_thread_create>
 800627c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800627e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006280:	4618      	mov	r0, r3
 8006282:	3750      	adds	r7, #80	; 0x50
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20000af4 	.word	0x20000af4
 800628c:	20000a64 	.word	0x20000a64
 8006290:	20000a68 	.word	0x20000a68
 8006294:	20000a5c 	.word	0x20000a5c
 8006298:	20000ba4 	.word	0x20000ba4
 800629c:	20000014 	.word	0x20000014

080062a0 <__assert_func>:
 80062a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062a2:	4614      	mov	r4, r2
 80062a4:	461a      	mov	r2, r3
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <__assert_func+0x2c>)
 80062a8:	4605      	mov	r5, r0
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68d8      	ldr	r0, [r3, #12]
 80062ae:	b14c      	cbz	r4, 80062c4 <__assert_func+0x24>
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <__assert_func+0x30>)
 80062b2:	9100      	str	r1, [sp, #0]
 80062b4:	4907      	ldr	r1, [pc, #28]	; (80062d4 <__assert_func+0x34>)
 80062b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062ba:	462b      	mov	r3, r5
 80062bc:	f000 f814 	bl	80062e8 <fiprintf>
 80062c0:	f000 fc00 	bl	8006ac4 <abort>
 80062c4:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <__assert_func+0x38>)
 80062c6:	461c      	mov	r4, r3
 80062c8:	e7f3      	b.n	80062b2 <__assert_func+0x12>
 80062ca:	bf00      	nop
 80062cc:	20000018 	.word	0x20000018
 80062d0:	08007498 	.word	0x08007498
 80062d4:	080074a5 	.word	0x080074a5
 80062d8:	080074d3 	.word	0x080074d3

080062dc <__errno>:
 80062dc:	4b01      	ldr	r3, [pc, #4]	; (80062e4 <__errno+0x8>)
 80062de:	6818      	ldr	r0, [r3, #0]
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20000018 	.word	0x20000018

080062e8 <fiprintf>:
 80062e8:	b40e      	push	{r1, r2, r3}
 80062ea:	b503      	push	{r0, r1, lr}
 80062ec:	ab03      	add	r3, sp, #12
 80062ee:	4601      	mov	r1, r0
 80062f0:	4805      	ldr	r0, [pc, #20]	; (8006308 <fiprintf+0x20>)
 80062f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80062f6:	6800      	ldr	r0, [r0, #0]
 80062f8:	9301      	str	r3, [sp, #4]
 80062fa:	f000 f85d 	bl	80063b8 <_vfiprintf_r>
 80062fe:	b002      	add	sp, #8
 8006300:	f85d eb04 	ldr.w	lr, [sp], #4
 8006304:	b003      	add	sp, #12
 8006306:	4770      	bx	lr
 8006308:	20000018 	.word	0x20000018

0800630c <__libc_init_array>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	4d0d      	ldr	r5, [pc, #52]	; (8006344 <__libc_init_array+0x38>)
 8006310:	2600      	movs	r6, #0
 8006312:	4c0d      	ldr	r4, [pc, #52]	; (8006348 <__libc_init_array+0x3c>)
 8006314:	1b64      	subs	r4, r4, r5
 8006316:	10a4      	asrs	r4, r4, #2
 8006318:	42a6      	cmp	r6, r4
 800631a:	d109      	bne.n	8006330 <__libc_init_array+0x24>
 800631c:	4d0b      	ldr	r5, [pc, #44]	; (800634c <__libc_init_array+0x40>)
 800631e:	2600      	movs	r6, #0
 8006320:	4c0b      	ldr	r4, [pc, #44]	; (8006350 <__libc_init_array+0x44>)
 8006322:	f000 ffef 	bl	8007304 <_init>
 8006326:	1b64      	subs	r4, r4, r5
 8006328:	10a4      	asrs	r4, r4, #2
 800632a:	42a6      	cmp	r6, r4
 800632c:	d105      	bne.n	800633a <__libc_init_array+0x2e>
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	f855 3b04 	ldr.w	r3, [r5], #4
 8006334:	3601      	adds	r6, #1
 8006336:	4798      	blx	r3
 8006338:	e7ee      	b.n	8006318 <__libc_init_array+0xc>
 800633a:	f855 3b04 	ldr.w	r3, [r5], #4
 800633e:	3601      	adds	r6, #1
 8006340:	4798      	blx	r3
 8006342:	e7f2      	b.n	800632a <__libc_init_array+0x1e>
 8006344:	0800756c 	.word	0x0800756c
 8006348:	0800756c 	.word	0x0800756c
 800634c:	0800756c 	.word	0x0800756c
 8006350:	08007570 	.word	0x08007570

08006354 <memset>:
 8006354:	4402      	add	r2, r0
 8006356:	4603      	mov	r3, r0
 8006358:	4293      	cmp	r3, r2
 800635a:	d100      	bne.n	800635e <memset+0xa>
 800635c:	4770      	bx	lr
 800635e:	f803 1b01 	strb.w	r1, [r3], #1
 8006362:	e7f9      	b.n	8006358 <memset+0x4>

08006364 <__sfputc_r>:
 8006364:	6893      	ldr	r3, [r2, #8]
 8006366:	3b01      	subs	r3, #1
 8006368:	2b00      	cmp	r3, #0
 800636a:	6093      	str	r3, [r2, #8]
 800636c:	b410      	push	{r4}
 800636e:	da08      	bge.n	8006382 <__sfputc_r+0x1e>
 8006370:	6994      	ldr	r4, [r2, #24]
 8006372:	42a3      	cmp	r3, r4
 8006374:	db01      	blt.n	800637a <__sfputc_r+0x16>
 8006376:	290a      	cmp	r1, #10
 8006378:	d103      	bne.n	8006382 <__sfputc_r+0x1e>
 800637a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800637e:	f000 bae1 	b.w	8006944 <__swbuf_r>
 8006382:	6813      	ldr	r3, [r2, #0]
 8006384:	1c58      	adds	r0, r3, #1
 8006386:	6010      	str	r0, [r2, #0]
 8006388:	4608      	mov	r0, r1
 800638a:	7019      	strb	r1, [r3, #0]
 800638c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006390:	4770      	bx	lr

08006392 <__sfputs_r>:
 8006392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006394:	4606      	mov	r6, r0
 8006396:	460f      	mov	r7, r1
 8006398:	4614      	mov	r4, r2
 800639a:	18d5      	adds	r5, r2, r3
 800639c:	42ac      	cmp	r4, r5
 800639e:	d101      	bne.n	80063a4 <__sfputs_r+0x12>
 80063a0:	2000      	movs	r0, #0
 80063a2:	e007      	b.n	80063b4 <__sfputs_r+0x22>
 80063a4:	463a      	mov	r2, r7
 80063a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063aa:	4630      	mov	r0, r6
 80063ac:	f7ff ffda 	bl	8006364 <__sfputc_r>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d1f3      	bne.n	800639c <__sfputs_r+0xa>
 80063b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063b8 <_vfiprintf_r>:
 80063b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	460d      	mov	r5, r1
 80063be:	b09d      	sub	sp, #116	; 0x74
 80063c0:	4614      	mov	r4, r2
 80063c2:	4698      	mov	r8, r3
 80063c4:	4606      	mov	r6, r0
 80063c6:	b118      	cbz	r0, 80063d0 <_vfiprintf_r+0x18>
 80063c8:	6983      	ldr	r3, [r0, #24]
 80063ca:	b90b      	cbnz	r3, 80063d0 <_vfiprintf_r+0x18>
 80063cc:	f000 fc9a 	bl	8006d04 <__sinit>
 80063d0:	4b89      	ldr	r3, [pc, #548]	; (80065f8 <_vfiprintf_r+0x240>)
 80063d2:	429d      	cmp	r5, r3
 80063d4:	d11b      	bne.n	800640e <_vfiprintf_r+0x56>
 80063d6:	6875      	ldr	r5, [r6, #4]
 80063d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063da:	07d9      	lsls	r1, r3, #31
 80063dc:	d405      	bmi.n	80063ea <_vfiprintf_r+0x32>
 80063de:	89ab      	ldrh	r3, [r5, #12]
 80063e0:	059a      	lsls	r2, r3, #22
 80063e2:	d402      	bmi.n	80063ea <_vfiprintf_r+0x32>
 80063e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063e6:	f000 fd2b 	bl	8006e40 <__retarget_lock_acquire_recursive>
 80063ea:	89ab      	ldrh	r3, [r5, #12]
 80063ec:	071b      	lsls	r3, r3, #28
 80063ee:	d501      	bpl.n	80063f4 <_vfiprintf_r+0x3c>
 80063f0:	692b      	ldr	r3, [r5, #16]
 80063f2:	b9eb      	cbnz	r3, 8006430 <_vfiprintf_r+0x78>
 80063f4:	4629      	mov	r1, r5
 80063f6:	4630      	mov	r0, r6
 80063f8:	f000 faf6 	bl	80069e8 <__swsetup_r>
 80063fc:	b1c0      	cbz	r0, 8006430 <_vfiprintf_r+0x78>
 80063fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006400:	07dc      	lsls	r4, r3, #31
 8006402:	d50e      	bpl.n	8006422 <_vfiprintf_r+0x6a>
 8006404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006408:	b01d      	add	sp, #116	; 0x74
 800640a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640e:	4b7b      	ldr	r3, [pc, #492]	; (80065fc <_vfiprintf_r+0x244>)
 8006410:	429d      	cmp	r5, r3
 8006412:	d101      	bne.n	8006418 <_vfiprintf_r+0x60>
 8006414:	68b5      	ldr	r5, [r6, #8]
 8006416:	e7df      	b.n	80063d8 <_vfiprintf_r+0x20>
 8006418:	4b79      	ldr	r3, [pc, #484]	; (8006600 <_vfiprintf_r+0x248>)
 800641a:	429d      	cmp	r5, r3
 800641c:	bf08      	it	eq
 800641e:	68f5      	ldreq	r5, [r6, #12]
 8006420:	e7da      	b.n	80063d8 <_vfiprintf_r+0x20>
 8006422:	89ab      	ldrh	r3, [r5, #12]
 8006424:	0598      	lsls	r0, r3, #22
 8006426:	d4ed      	bmi.n	8006404 <_vfiprintf_r+0x4c>
 8006428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800642a:	f000 fd0a 	bl	8006e42 <__retarget_lock_release_recursive>
 800642e:	e7e9      	b.n	8006404 <_vfiprintf_r+0x4c>
 8006430:	2300      	movs	r3, #0
 8006432:	f8cd 800c 	str.w	r8, [sp, #12]
 8006436:	f04f 0901 	mov.w	r9, #1
 800643a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8006604 <_vfiprintf_r+0x24c>
 800643e:	9309      	str	r3, [sp, #36]	; 0x24
 8006440:	2320      	movs	r3, #32
 8006442:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006446:	2330      	movs	r3, #48	; 0x30
 8006448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800644c:	4623      	mov	r3, r4
 800644e:	469a      	mov	sl, r3
 8006450:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006454:	b10a      	cbz	r2, 800645a <_vfiprintf_r+0xa2>
 8006456:	2a25      	cmp	r2, #37	; 0x25
 8006458:	d1f9      	bne.n	800644e <_vfiprintf_r+0x96>
 800645a:	ebba 0b04 	subs.w	fp, sl, r4
 800645e:	d00b      	beq.n	8006478 <_vfiprintf_r+0xc0>
 8006460:	465b      	mov	r3, fp
 8006462:	4622      	mov	r2, r4
 8006464:	4629      	mov	r1, r5
 8006466:	4630      	mov	r0, r6
 8006468:	f7ff ff93 	bl	8006392 <__sfputs_r>
 800646c:	3001      	adds	r0, #1
 800646e:	f000 80aa 	beq.w	80065c6 <_vfiprintf_r+0x20e>
 8006472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006474:	445a      	add	r2, fp
 8006476:	9209      	str	r2, [sp, #36]	; 0x24
 8006478:	f89a 3000 	ldrb.w	r3, [sl]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 80a2 	beq.w	80065c6 <_vfiprintf_r+0x20e>
 8006482:	2300      	movs	r3, #0
 8006484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006488:	f10a 0a01 	add.w	sl, sl, #1
 800648c:	9304      	str	r3, [sp, #16]
 800648e:	9307      	str	r3, [sp, #28]
 8006490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006494:	931a      	str	r3, [sp, #104]	; 0x68
 8006496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800649a:	4654      	mov	r4, sl
 800649c:	2205      	movs	r2, #5
 800649e:	4859      	ldr	r0, [pc, #356]	; (8006604 <_vfiprintf_r+0x24c>)
 80064a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a4:	f000 fd34 	bl	8006f10 <memchr>
 80064a8:	9a04      	ldr	r2, [sp, #16]
 80064aa:	b9d8      	cbnz	r0, 80064e4 <_vfiprintf_r+0x12c>
 80064ac:	06d1      	lsls	r1, r2, #27
 80064ae:	bf44      	itt	mi
 80064b0:	2320      	movmi	r3, #32
 80064b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064b6:	0713      	lsls	r3, r2, #28
 80064b8:	bf44      	itt	mi
 80064ba:	232b      	movmi	r3, #43	; 0x2b
 80064bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064c0:	f89a 3000 	ldrb.w	r3, [sl]
 80064c4:	2b2a      	cmp	r3, #42	; 0x2a
 80064c6:	d015      	beq.n	80064f4 <_vfiprintf_r+0x13c>
 80064c8:	9a07      	ldr	r2, [sp, #28]
 80064ca:	4654      	mov	r4, sl
 80064cc:	2000      	movs	r0, #0
 80064ce:	f04f 0c0a 	mov.w	ip, #10
 80064d2:	4621      	mov	r1, r4
 80064d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064d8:	3b30      	subs	r3, #48	; 0x30
 80064da:	2b09      	cmp	r3, #9
 80064dc:	d94e      	bls.n	800657c <_vfiprintf_r+0x1c4>
 80064de:	b1b0      	cbz	r0, 800650e <_vfiprintf_r+0x156>
 80064e0:	9207      	str	r2, [sp, #28]
 80064e2:	e014      	b.n	800650e <_vfiprintf_r+0x156>
 80064e4:	eba0 0308 	sub.w	r3, r0, r8
 80064e8:	46a2      	mov	sl, r4
 80064ea:	fa09 f303 	lsl.w	r3, r9, r3
 80064ee:	4313      	orrs	r3, r2
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	e7d2      	b.n	800649a <_vfiprintf_r+0xe2>
 80064f4:	9b03      	ldr	r3, [sp, #12]
 80064f6:	1d19      	adds	r1, r3, #4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	9103      	str	r1, [sp, #12]
 80064fe:	bfbb      	ittet	lt
 8006500:	425b      	neglt	r3, r3
 8006502:	f042 0202 	orrlt.w	r2, r2, #2
 8006506:	9307      	strge	r3, [sp, #28]
 8006508:	9307      	strlt	r3, [sp, #28]
 800650a:	bfb8      	it	lt
 800650c:	9204      	strlt	r2, [sp, #16]
 800650e:	7823      	ldrb	r3, [r4, #0]
 8006510:	2b2e      	cmp	r3, #46	; 0x2e
 8006512:	d10c      	bne.n	800652e <_vfiprintf_r+0x176>
 8006514:	7863      	ldrb	r3, [r4, #1]
 8006516:	2b2a      	cmp	r3, #42	; 0x2a
 8006518:	d135      	bne.n	8006586 <_vfiprintf_r+0x1ce>
 800651a:	9b03      	ldr	r3, [sp, #12]
 800651c:	3402      	adds	r4, #2
 800651e:	1d1a      	adds	r2, r3, #4
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	9203      	str	r2, [sp, #12]
 8006526:	bfb8      	it	lt
 8006528:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800652c:	9305      	str	r3, [sp, #20]
 800652e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006614 <_vfiprintf_r+0x25c>
 8006532:	2203      	movs	r2, #3
 8006534:	7821      	ldrb	r1, [r4, #0]
 8006536:	4650      	mov	r0, sl
 8006538:	f000 fcea 	bl	8006f10 <memchr>
 800653c:	b140      	cbz	r0, 8006550 <_vfiprintf_r+0x198>
 800653e:	2340      	movs	r3, #64	; 0x40
 8006540:	eba0 000a 	sub.w	r0, r0, sl
 8006544:	3401      	adds	r4, #1
 8006546:	fa03 f000 	lsl.w	r0, r3, r0
 800654a:	9b04      	ldr	r3, [sp, #16]
 800654c:	4303      	orrs	r3, r0
 800654e:	9304      	str	r3, [sp, #16]
 8006550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006554:	2206      	movs	r2, #6
 8006556:	482c      	ldr	r0, [pc, #176]	; (8006608 <_vfiprintf_r+0x250>)
 8006558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800655c:	f000 fcd8 	bl	8006f10 <memchr>
 8006560:	2800      	cmp	r0, #0
 8006562:	d03f      	beq.n	80065e4 <_vfiprintf_r+0x22c>
 8006564:	4b29      	ldr	r3, [pc, #164]	; (800660c <_vfiprintf_r+0x254>)
 8006566:	bb1b      	cbnz	r3, 80065b0 <_vfiprintf_r+0x1f8>
 8006568:	9b03      	ldr	r3, [sp, #12]
 800656a:	3307      	adds	r3, #7
 800656c:	f023 0307 	bic.w	r3, r3, #7
 8006570:	3308      	adds	r3, #8
 8006572:	9303      	str	r3, [sp, #12]
 8006574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006576:	443b      	add	r3, r7
 8006578:	9309      	str	r3, [sp, #36]	; 0x24
 800657a:	e767      	b.n	800644c <_vfiprintf_r+0x94>
 800657c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006580:	460c      	mov	r4, r1
 8006582:	2001      	movs	r0, #1
 8006584:	e7a5      	b.n	80064d2 <_vfiprintf_r+0x11a>
 8006586:	2300      	movs	r3, #0
 8006588:	3401      	adds	r4, #1
 800658a:	f04f 0c0a 	mov.w	ip, #10
 800658e:	4619      	mov	r1, r3
 8006590:	9305      	str	r3, [sp, #20]
 8006592:	4620      	mov	r0, r4
 8006594:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006598:	3a30      	subs	r2, #48	; 0x30
 800659a:	2a09      	cmp	r2, #9
 800659c:	d903      	bls.n	80065a6 <_vfiprintf_r+0x1ee>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0c5      	beq.n	800652e <_vfiprintf_r+0x176>
 80065a2:	9105      	str	r1, [sp, #20]
 80065a4:	e7c3      	b.n	800652e <_vfiprintf_r+0x176>
 80065a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80065aa:	4604      	mov	r4, r0
 80065ac:	2301      	movs	r3, #1
 80065ae:	e7f0      	b.n	8006592 <_vfiprintf_r+0x1da>
 80065b0:	ab03      	add	r3, sp, #12
 80065b2:	462a      	mov	r2, r5
 80065b4:	a904      	add	r1, sp, #16
 80065b6:	4630      	mov	r0, r6
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	4b15      	ldr	r3, [pc, #84]	; (8006610 <_vfiprintf_r+0x258>)
 80065bc:	e000      	b.n	80065c0 <_vfiprintf_r+0x208>
 80065be:	bf00      	nop
 80065c0:	4607      	mov	r7, r0
 80065c2:	1c78      	adds	r0, r7, #1
 80065c4:	d1d6      	bne.n	8006574 <_vfiprintf_r+0x1bc>
 80065c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065c8:	07d9      	lsls	r1, r3, #31
 80065ca:	d405      	bmi.n	80065d8 <_vfiprintf_r+0x220>
 80065cc:	89ab      	ldrh	r3, [r5, #12]
 80065ce:	059a      	lsls	r2, r3, #22
 80065d0:	d402      	bmi.n	80065d8 <_vfiprintf_r+0x220>
 80065d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065d4:	f000 fc35 	bl	8006e42 <__retarget_lock_release_recursive>
 80065d8:	89ab      	ldrh	r3, [r5, #12]
 80065da:	065b      	lsls	r3, r3, #25
 80065dc:	f53f af12 	bmi.w	8006404 <_vfiprintf_r+0x4c>
 80065e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065e2:	e711      	b.n	8006408 <_vfiprintf_r+0x50>
 80065e4:	ab03      	add	r3, sp, #12
 80065e6:	462a      	mov	r2, r5
 80065e8:	a904      	add	r1, sp, #16
 80065ea:	4630      	mov	r0, r6
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	4b08      	ldr	r3, [pc, #32]	; (8006610 <_vfiprintf_r+0x258>)
 80065f0:	f000 f882 	bl	80066f8 <_printf_i>
 80065f4:	e7e4      	b.n	80065c0 <_vfiprintf_r+0x208>
 80065f6:	bf00      	nop
 80065f8:	0800752c 	.word	0x0800752c
 80065fc:	0800754c 	.word	0x0800754c
 8006600:	0800750c 	.word	0x0800750c
 8006604:	080074d8 	.word	0x080074d8
 8006608:	080074e2 	.word	0x080074e2
 800660c:	00000000 	.word	0x00000000
 8006610:	08006393 	.word	0x08006393
 8006614:	080074de 	.word	0x080074de

08006618 <_printf_common>:
 8006618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800661c:	4616      	mov	r6, r2
 800661e:	4699      	mov	r9, r3
 8006620:	688a      	ldr	r2, [r1, #8]
 8006622:	4607      	mov	r7, r0
 8006624:	690b      	ldr	r3, [r1, #16]
 8006626:	460c      	mov	r4, r1
 8006628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800662c:	4293      	cmp	r3, r2
 800662e:	bfb8      	it	lt
 8006630:	4613      	movlt	r3, r2
 8006632:	6033      	str	r3, [r6, #0]
 8006634:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006638:	b10a      	cbz	r2, 800663e <_printf_common+0x26>
 800663a:	3301      	adds	r3, #1
 800663c:	6033      	str	r3, [r6, #0]
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	0699      	lsls	r1, r3, #26
 8006642:	bf42      	ittt	mi
 8006644:	6833      	ldrmi	r3, [r6, #0]
 8006646:	3302      	addmi	r3, #2
 8006648:	6033      	strmi	r3, [r6, #0]
 800664a:	6825      	ldr	r5, [r4, #0]
 800664c:	f015 0506 	ands.w	r5, r5, #6
 8006650:	d106      	bne.n	8006660 <_printf_common+0x48>
 8006652:	f104 0a19 	add.w	sl, r4, #25
 8006656:	68e3      	ldr	r3, [r4, #12]
 8006658:	6832      	ldr	r2, [r6, #0]
 800665a:	1a9b      	subs	r3, r3, r2
 800665c:	42ab      	cmp	r3, r5
 800665e:	dc29      	bgt.n	80066b4 <_printf_common+0x9c>
 8006660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006664:	1e13      	subs	r3, r2, #0
 8006666:	6822      	ldr	r2, [r4, #0]
 8006668:	bf18      	it	ne
 800666a:	2301      	movne	r3, #1
 800666c:	0692      	lsls	r2, r2, #26
 800666e:	d42e      	bmi.n	80066ce <_printf_common+0xb6>
 8006670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006674:	4649      	mov	r1, r9
 8006676:	4638      	mov	r0, r7
 8006678:	47c0      	blx	r8
 800667a:	3001      	adds	r0, #1
 800667c:	d021      	beq.n	80066c2 <_printf_common+0xaa>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	341a      	adds	r4, #26
 8006682:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8006686:	f003 0306 	and.w	r3, r3, #6
 800668a:	6832      	ldr	r2, [r6, #0]
 800668c:	2600      	movs	r6, #0
 800668e:	2b04      	cmp	r3, #4
 8006690:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006694:	bf08      	it	eq
 8006696:	1aad      	subeq	r5, r5, r2
 8006698:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800669c:	bf14      	ite	ne
 800669e:	2500      	movne	r5, #0
 80066a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066a4:	4293      	cmp	r3, r2
 80066a6:	bfc4      	itt	gt
 80066a8:	1a9b      	subgt	r3, r3, r2
 80066aa:	18ed      	addgt	r5, r5, r3
 80066ac:	42b5      	cmp	r5, r6
 80066ae:	d11a      	bne.n	80066e6 <_printf_common+0xce>
 80066b0:	2000      	movs	r0, #0
 80066b2:	e008      	b.n	80066c6 <_printf_common+0xae>
 80066b4:	2301      	movs	r3, #1
 80066b6:	4652      	mov	r2, sl
 80066b8:	4649      	mov	r1, r9
 80066ba:	4638      	mov	r0, r7
 80066bc:	47c0      	blx	r8
 80066be:	3001      	adds	r0, #1
 80066c0:	d103      	bne.n	80066ca <_printf_common+0xb2>
 80066c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ca:	3501      	adds	r5, #1
 80066cc:	e7c3      	b.n	8006656 <_printf_common+0x3e>
 80066ce:	18e1      	adds	r1, r4, r3
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	2030      	movs	r0, #48	; 0x30
 80066d4:	3302      	adds	r3, #2
 80066d6:	4422      	add	r2, r4
 80066d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066e4:	e7c4      	b.n	8006670 <_printf_common+0x58>
 80066e6:	2301      	movs	r3, #1
 80066e8:	4622      	mov	r2, r4
 80066ea:	4649      	mov	r1, r9
 80066ec:	4638      	mov	r0, r7
 80066ee:	47c0      	blx	r8
 80066f0:	3001      	adds	r0, #1
 80066f2:	d0e6      	beq.n	80066c2 <_printf_common+0xaa>
 80066f4:	3601      	adds	r6, #1
 80066f6:	e7d9      	b.n	80066ac <_printf_common+0x94>

080066f8 <_printf_i>:
 80066f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066fc:	7e0f      	ldrb	r7, [r1, #24]
 80066fe:	4691      	mov	r9, r2
 8006700:	4680      	mov	r8, r0
 8006702:	460c      	mov	r4, r1
 8006704:	2f78      	cmp	r7, #120	; 0x78
 8006706:	469a      	mov	sl, r3
 8006708:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800670a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800670e:	d807      	bhi.n	8006720 <_printf_i+0x28>
 8006710:	2f62      	cmp	r7, #98	; 0x62
 8006712:	d80a      	bhi.n	800672a <_printf_i+0x32>
 8006714:	2f00      	cmp	r7, #0
 8006716:	f000 80d8 	beq.w	80068ca <_printf_i+0x1d2>
 800671a:	2f58      	cmp	r7, #88	; 0x58
 800671c:	f000 80a3 	beq.w	8006866 <_printf_i+0x16e>
 8006720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006728:	e03a      	b.n	80067a0 <_printf_i+0xa8>
 800672a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800672e:	2b15      	cmp	r3, #21
 8006730:	d8f6      	bhi.n	8006720 <_printf_i+0x28>
 8006732:	a101      	add	r1, pc, #4	; (adr r1, 8006738 <_printf_i+0x40>)
 8006734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006738:	08006791 	.word	0x08006791
 800673c:	080067a5 	.word	0x080067a5
 8006740:	08006721 	.word	0x08006721
 8006744:	08006721 	.word	0x08006721
 8006748:	08006721 	.word	0x08006721
 800674c:	08006721 	.word	0x08006721
 8006750:	080067a5 	.word	0x080067a5
 8006754:	08006721 	.word	0x08006721
 8006758:	08006721 	.word	0x08006721
 800675c:	08006721 	.word	0x08006721
 8006760:	08006721 	.word	0x08006721
 8006764:	080068b1 	.word	0x080068b1
 8006768:	080067d5 	.word	0x080067d5
 800676c:	08006893 	.word	0x08006893
 8006770:	08006721 	.word	0x08006721
 8006774:	08006721 	.word	0x08006721
 8006778:	080068d3 	.word	0x080068d3
 800677c:	08006721 	.word	0x08006721
 8006780:	080067d5 	.word	0x080067d5
 8006784:	08006721 	.word	0x08006721
 8006788:	08006721 	.word	0x08006721
 800678c:	0800689b 	.word	0x0800689b
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	1d1a      	adds	r2, r3, #4
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	602a      	str	r2, [r5, #0]
 8006798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800679c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067a0:	2301      	movs	r3, #1
 80067a2:	e0a3      	b.n	80068ec <_printf_i+0x1f4>
 80067a4:	6820      	ldr	r0, [r4, #0]
 80067a6:	6829      	ldr	r1, [r5, #0]
 80067a8:	0606      	lsls	r6, r0, #24
 80067aa:	f101 0304 	add.w	r3, r1, #4
 80067ae:	d50a      	bpl.n	80067c6 <_printf_i+0xce>
 80067b0:	680e      	ldr	r6, [r1, #0]
 80067b2:	602b      	str	r3, [r5, #0]
 80067b4:	2e00      	cmp	r6, #0
 80067b6:	da03      	bge.n	80067c0 <_printf_i+0xc8>
 80067b8:	232d      	movs	r3, #45	; 0x2d
 80067ba:	4276      	negs	r6, r6
 80067bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067c0:	485e      	ldr	r0, [pc, #376]	; (800693c <_printf_i+0x244>)
 80067c2:	230a      	movs	r3, #10
 80067c4:	e019      	b.n	80067fa <_printf_i+0x102>
 80067c6:	680e      	ldr	r6, [r1, #0]
 80067c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067cc:	602b      	str	r3, [r5, #0]
 80067ce:	bf18      	it	ne
 80067d0:	b236      	sxthne	r6, r6
 80067d2:	e7ef      	b.n	80067b4 <_printf_i+0xbc>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	6820      	ldr	r0, [r4, #0]
 80067d8:	1d19      	adds	r1, r3, #4
 80067da:	6029      	str	r1, [r5, #0]
 80067dc:	0601      	lsls	r1, r0, #24
 80067de:	d501      	bpl.n	80067e4 <_printf_i+0xec>
 80067e0:	681e      	ldr	r6, [r3, #0]
 80067e2:	e002      	b.n	80067ea <_printf_i+0xf2>
 80067e4:	0646      	lsls	r6, r0, #25
 80067e6:	d5fb      	bpl.n	80067e0 <_printf_i+0xe8>
 80067e8:	881e      	ldrh	r6, [r3, #0]
 80067ea:	2f6f      	cmp	r7, #111	; 0x6f
 80067ec:	4853      	ldr	r0, [pc, #332]	; (800693c <_printf_i+0x244>)
 80067ee:	bf0c      	ite	eq
 80067f0:	2308      	moveq	r3, #8
 80067f2:	230a      	movne	r3, #10
 80067f4:	2100      	movs	r1, #0
 80067f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067fa:	6865      	ldr	r5, [r4, #4]
 80067fc:	2d00      	cmp	r5, #0
 80067fe:	60a5      	str	r5, [r4, #8]
 8006800:	bfa2      	ittt	ge
 8006802:	6821      	ldrge	r1, [r4, #0]
 8006804:	f021 0104 	bicge.w	r1, r1, #4
 8006808:	6021      	strge	r1, [r4, #0]
 800680a:	b90e      	cbnz	r6, 8006810 <_printf_i+0x118>
 800680c:	2d00      	cmp	r5, #0
 800680e:	d04d      	beq.n	80068ac <_printf_i+0x1b4>
 8006810:	4615      	mov	r5, r2
 8006812:	fbb6 f1f3 	udiv	r1, r6, r3
 8006816:	fb03 6711 	mls	r7, r3, r1, r6
 800681a:	5dc7      	ldrb	r7, [r0, r7]
 800681c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006820:	4637      	mov	r7, r6
 8006822:	460e      	mov	r6, r1
 8006824:	42bb      	cmp	r3, r7
 8006826:	d9f4      	bls.n	8006812 <_printf_i+0x11a>
 8006828:	2b08      	cmp	r3, #8
 800682a:	d10b      	bne.n	8006844 <_printf_i+0x14c>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	07de      	lsls	r6, r3, #31
 8006830:	d508      	bpl.n	8006844 <_printf_i+0x14c>
 8006832:	6923      	ldr	r3, [r4, #16]
 8006834:	6861      	ldr	r1, [r4, #4]
 8006836:	4299      	cmp	r1, r3
 8006838:	bfde      	ittt	le
 800683a:	2330      	movle	r3, #48	; 0x30
 800683c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006840:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006844:	1b52      	subs	r2, r2, r5
 8006846:	6122      	str	r2, [r4, #16]
 8006848:	464b      	mov	r3, r9
 800684a:	aa03      	add	r2, sp, #12
 800684c:	4621      	mov	r1, r4
 800684e:	4640      	mov	r0, r8
 8006850:	f8cd a000 	str.w	sl, [sp]
 8006854:	f7ff fee0 	bl	8006618 <_printf_common>
 8006858:	3001      	adds	r0, #1
 800685a:	d14c      	bne.n	80068f6 <_printf_i+0x1fe>
 800685c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006860:	b004      	add	sp, #16
 8006862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006866:	4835      	ldr	r0, [pc, #212]	; (800693c <_printf_i+0x244>)
 8006868:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800686c:	6829      	ldr	r1, [r5, #0]
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	f851 6b04 	ldr.w	r6, [r1], #4
 8006874:	6029      	str	r1, [r5, #0]
 8006876:	061d      	lsls	r5, r3, #24
 8006878:	d514      	bpl.n	80068a4 <_printf_i+0x1ac>
 800687a:	07df      	lsls	r7, r3, #31
 800687c:	bf44      	itt	mi
 800687e:	f043 0320 	orrmi.w	r3, r3, #32
 8006882:	6023      	strmi	r3, [r4, #0]
 8006884:	b91e      	cbnz	r6, 800688e <_printf_i+0x196>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	f023 0320 	bic.w	r3, r3, #32
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	2310      	movs	r3, #16
 8006890:	e7b0      	b.n	80067f4 <_printf_i+0xfc>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	f043 0320 	orr.w	r3, r3, #32
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	2378      	movs	r3, #120	; 0x78
 800689c:	4828      	ldr	r0, [pc, #160]	; (8006940 <_printf_i+0x248>)
 800689e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068a2:	e7e3      	b.n	800686c <_printf_i+0x174>
 80068a4:	0659      	lsls	r1, r3, #25
 80068a6:	bf48      	it	mi
 80068a8:	b2b6      	uxthmi	r6, r6
 80068aa:	e7e6      	b.n	800687a <_printf_i+0x182>
 80068ac:	4615      	mov	r5, r2
 80068ae:	e7bb      	b.n	8006828 <_printf_i+0x130>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	6826      	ldr	r6, [r4, #0]
 80068b4:	1d18      	adds	r0, r3, #4
 80068b6:	6961      	ldr	r1, [r4, #20]
 80068b8:	6028      	str	r0, [r5, #0]
 80068ba:	0635      	lsls	r5, r6, #24
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	d501      	bpl.n	80068c4 <_printf_i+0x1cc>
 80068c0:	6019      	str	r1, [r3, #0]
 80068c2:	e002      	b.n	80068ca <_printf_i+0x1d2>
 80068c4:	0670      	lsls	r0, r6, #25
 80068c6:	d5fb      	bpl.n	80068c0 <_printf_i+0x1c8>
 80068c8:	8019      	strh	r1, [r3, #0]
 80068ca:	2300      	movs	r3, #0
 80068cc:	4615      	mov	r5, r2
 80068ce:	6123      	str	r3, [r4, #16]
 80068d0:	e7ba      	b.n	8006848 <_printf_i+0x150>
 80068d2:	682b      	ldr	r3, [r5, #0]
 80068d4:	2100      	movs	r1, #0
 80068d6:	1d1a      	adds	r2, r3, #4
 80068d8:	602a      	str	r2, [r5, #0]
 80068da:	681d      	ldr	r5, [r3, #0]
 80068dc:	6862      	ldr	r2, [r4, #4]
 80068de:	4628      	mov	r0, r5
 80068e0:	f000 fb16 	bl	8006f10 <memchr>
 80068e4:	b108      	cbz	r0, 80068ea <_printf_i+0x1f2>
 80068e6:	1b40      	subs	r0, r0, r5
 80068e8:	6060      	str	r0, [r4, #4]
 80068ea:	6863      	ldr	r3, [r4, #4]
 80068ec:	6123      	str	r3, [r4, #16]
 80068ee:	2300      	movs	r3, #0
 80068f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068f4:	e7a8      	b.n	8006848 <_printf_i+0x150>
 80068f6:	6923      	ldr	r3, [r4, #16]
 80068f8:	462a      	mov	r2, r5
 80068fa:	4649      	mov	r1, r9
 80068fc:	4640      	mov	r0, r8
 80068fe:	47d0      	blx	sl
 8006900:	3001      	adds	r0, #1
 8006902:	d0ab      	beq.n	800685c <_printf_i+0x164>
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	079b      	lsls	r3, r3, #30
 8006908:	d413      	bmi.n	8006932 <_printf_i+0x23a>
 800690a:	68e0      	ldr	r0, [r4, #12]
 800690c:	9b03      	ldr	r3, [sp, #12]
 800690e:	4298      	cmp	r0, r3
 8006910:	bfb8      	it	lt
 8006912:	4618      	movlt	r0, r3
 8006914:	e7a4      	b.n	8006860 <_printf_i+0x168>
 8006916:	2301      	movs	r3, #1
 8006918:	4632      	mov	r2, r6
 800691a:	4649      	mov	r1, r9
 800691c:	4640      	mov	r0, r8
 800691e:	47d0      	blx	sl
 8006920:	3001      	adds	r0, #1
 8006922:	d09b      	beq.n	800685c <_printf_i+0x164>
 8006924:	3501      	adds	r5, #1
 8006926:	68e3      	ldr	r3, [r4, #12]
 8006928:	9903      	ldr	r1, [sp, #12]
 800692a:	1a5b      	subs	r3, r3, r1
 800692c:	42ab      	cmp	r3, r5
 800692e:	dcf2      	bgt.n	8006916 <_printf_i+0x21e>
 8006930:	e7eb      	b.n	800690a <_printf_i+0x212>
 8006932:	2500      	movs	r5, #0
 8006934:	f104 0619 	add.w	r6, r4, #25
 8006938:	e7f5      	b.n	8006926 <_printf_i+0x22e>
 800693a:	bf00      	nop
 800693c:	080074e9 	.word	0x080074e9
 8006940:	080074fa 	.word	0x080074fa

08006944 <__swbuf_r>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	460e      	mov	r6, r1
 8006948:	4614      	mov	r4, r2
 800694a:	4605      	mov	r5, r0
 800694c:	b118      	cbz	r0, 8006956 <__swbuf_r+0x12>
 800694e:	6983      	ldr	r3, [r0, #24]
 8006950:	b90b      	cbnz	r3, 8006956 <__swbuf_r+0x12>
 8006952:	f000 f9d7 	bl	8006d04 <__sinit>
 8006956:	4b21      	ldr	r3, [pc, #132]	; (80069dc <__swbuf_r+0x98>)
 8006958:	429c      	cmp	r4, r3
 800695a:	d12b      	bne.n	80069b4 <__swbuf_r+0x70>
 800695c:	686c      	ldr	r4, [r5, #4]
 800695e:	69a3      	ldr	r3, [r4, #24]
 8006960:	60a3      	str	r3, [r4, #8]
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	071a      	lsls	r2, r3, #28
 8006966:	d52f      	bpl.n	80069c8 <__swbuf_r+0x84>
 8006968:	6923      	ldr	r3, [r4, #16]
 800696a:	b36b      	cbz	r3, 80069c8 <__swbuf_r+0x84>
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	b2f6      	uxtb	r6, r6
 8006970:	6820      	ldr	r0, [r4, #0]
 8006972:	4637      	mov	r7, r6
 8006974:	1ac0      	subs	r0, r0, r3
 8006976:	6963      	ldr	r3, [r4, #20]
 8006978:	4283      	cmp	r3, r0
 800697a:	dc04      	bgt.n	8006986 <__swbuf_r+0x42>
 800697c:	4621      	mov	r1, r4
 800697e:	4628      	mov	r0, r5
 8006980:	f000 f92c 	bl	8006bdc <_fflush_r>
 8006984:	bb30      	cbnz	r0, 80069d4 <__swbuf_r+0x90>
 8006986:	68a3      	ldr	r3, [r4, #8]
 8006988:	3001      	adds	r0, #1
 800698a:	3b01      	subs	r3, #1
 800698c:	60a3      	str	r3, [r4, #8]
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	6022      	str	r2, [r4, #0]
 8006994:	701e      	strb	r6, [r3, #0]
 8006996:	6963      	ldr	r3, [r4, #20]
 8006998:	4283      	cmp	r3, r0
 800699a:	d004      	beq.n	80069a6 <__swbuf_r+0x62>
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	07db      	lsls	r3, r3, #31
 80069a0:	d506      	bpl.n	80069b0 <__swbuf_r+0x6c>
 80069a2:	2e0a      	cmp	r6, #10
 80069a4:	d104      	bne.n	80069b0 <__swbuf_r+0x6c>
 80069a6:	4621      	mov	r1, r4
 80069a8:	4628      	mov	r0, r5
 80069aa:	f000 f917 	bl	8006bdc <_fflush_r>
 80069ae:	b988      	cbnz	r0, 80069d4 <__swbuf_r+0x90>
 80069b0:	4638      	mov	r0, r7
 80069b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b4:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <__swbuf_r+0x9c>)
 80069b6:	429c      	cmp	r4, r3
 80069b8:	d101      	bne.n	80069be <__swbuf_r+0x7a>
 80069ba:	68ac      	ldr	r4, [r5, #8]
 80069bc:	e7cf      	b.n	800695e <__swbuf_r+0x1a>
 80069be:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <__swbuf_r+0xa0>)
 80069c0:	429c      	cmp	r4, r3
 80069c2:	bf08      	it	eq
 80069c4:	68ec      	ldreq	r4, [r5, #12]
 80069c6:	e7ca      	b.n	800695e <__swbuf_r+0x1a>
 80069c8:	4621      	mov	r1, r4
 80069ca:	4628      	mov	r0, r5
 80069cc:	f000 f80c 	bl	80069e8 <__swsetup_r>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d0cb      	beq.n	800696c <__swbuf_r+0x28>
 80069d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80069d8:	e7ea      	b.n	80069b0 <__swbuf_r+0x6c>
 80069da:	bf00      	nop
 80069dc:	0800752c 	.word	0x0800752c
 80069e0:	0800754c 	.word	0x0800754c
 80069e4:	0800750c 	.word	0x0800750c

080069e8 <__swsetup_r>:
 80069e8:	4b32      	ldr	r3, [pc, #200]	; (8006ab4 <__swsetup_r+0xcc>)
 80069ea:	b570      	push	{r4, r5, r6, lr}
 80069ec:	681d      	ldr	r5, [r3, #0]
 80069ee:	4606      	mov	r6, r0
 80069f0:	460c      	mov	r4, r1
 80069f2:	b125      	cbz	r5, 80069fe <__swsetup_r+0x16>
 80069f4:	69ab      	ldr	r3, [r5, #24]
 80069f6:	b913      	cbnz	r3, 80069fe <__swsetup_r+0x16>
 80069f8:	4628      	mov	r0, r5
 80069fa:	f000 f983 	bl	8006d04 <__sinit>
 80069fe:	4b2e      	ldr	r3, [pc, #184]	; (8006ab8 <__swsetup_r+0xd0>)
 8006a00:	429c      	cmp	r4, r3
 8006a02:	d10f      	bne.n	8006a24 <__swsetup_r+0x3c>
 8006a04:	686c      	ldr	r4, [r5, #4]
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a0c:	0719      	lsls	r1, r3, #28
 8006a0e:	d42c      	bmi.n	8006a6a <__swsetup_r+0x82>
 8006a10:	06dd      	lsls	r5, r3, #27
 8006a12:	d411      	bmi.n	8006a38 <__swsetup_r+0x50>
 8006a14:	2309      	movs	r3, #9
 8006a16:	6033      	str	r3, [r6, #0]
 8006a18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a20:	81a3      	strh	r3, [r4, #12]
 8006a22:	e03e      	b.n	8006aa2 <__swsetup_r+0xba>
 8006a24:	4b25      	ldr	r3, [pc, #148]	; (8006abc <__swsetup_r+0xd4>)
 8006a26:	429c      	cmp	r4, r3
 8006a28:	d101      	bne.n	8006a2e <__swsetup_r+0x46>
 8006a2a:	68ac      	ldr	r4, [r5, #8]
 8006a2c:	e7eb      	b.n	8006a06 <__swsetup_r+0x1e>
 8006a2e:	4b24      	ldr	r3, [pc, #144]	; (8006ac0 <__swsetup_r+0xd8>)
 8006a30:	429c      	cmp	r4, r3
 8006a32:	bf08      	it	eq
 8006a34:	68ec      	ldreq	r4, [r5, #12]
 8006a36:	e7e6      	b.n	8006a06 <__swsetup_r+0x1e>
 8006a38:	0758      	lsls	r0, r3, #29
 8006a3a:	d512      	bpl.n	8006a62 <__swsetup_r+0x7a>
 8006a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a3e:	b141      	cbz	r1, 8006a52 <__swsetup_r+0x6a>
 8006a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a44:	4299      	cmp	r1, r3
 8006a46:	d002      	beq.n	8006a4e <__swsetup_r+0x66>
 8006a48:	4630      	mov	r0, r6
 8006a4a:	f000 fa6f 	bl	8006f2c <_free_r>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	6363      	str	r3, [r4, #52]	; 0x34
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a58:	81a3      	strh	r3, [r4, #12]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	6063      	str	r3, [r4, #4]
 8006a5e:	6923      	ldr	r3, [r4, #16]
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	f043 0308 	orr.w	r3, r3, #8
 8006a68:	81a3      	strh	r3, [r4, #12]
 8006a6a:	6923      	ldr	r3, [r4, #16]
 8006a6c:	b94b      	cbnz	r3, 8006a82 <__swsetup_r+0x9a>
 8006a6e:	89a3      	ldrh	r3, [r4, #12]
 8006a70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a78:	d003      	beq.n	8006a82 <__swsetup_r+0x9a>
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	f000 fa07 	bl	8006e90 <__smakebuf_r>
 8006a82:	89a0      	ldrh	r0, [r4, #12]
 8006a84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a88:	f010 0301 	ands.w	r3, r0, #1
 8006a8c:	d00a      	beq.n	8006aa4 <__swsetup_r+0xbc>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60a3      	str	r3, [r4, #8]
 8006a92:	6963      	ldr	r3, [r4, #20]
 8006a94:	425b      	negs	r3, r3
 8006a96:	61a3      	str	r3, [r4, #24]
 8006a98:	6923      	ldr	r3, [r4, #16]
 8006a9a:	b943      	cbnz	r3, 8006aae <__swsetup_r+0xc6>
 8006a9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006aa0:	d1ba      	bne.n	8006a18 <__swsetup_r+0x30>
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}
 8006aa4:	0781      	lsls	r1, r0, #30
 8006aa6:	bf58      	it	pl
 8006aa8:	6963      	ldrpl	r3, [r4, #20]
 8006aaa:	60a3      	str	r3, [r4, #8]
 8006aac:	e7f4      	b.n	8006a98 <__swsetup_r+0xb0>
 8006aae:	2000      	movs	r0, #0
 8006ab0:	e7f7      	b.n	8006aa2 <__swsetup_r+0xba>
 8006ab2:	bf00      	nop
 8006ab4:	20000018 	.word	0x20000018
 8006ab8:	0800752c 	.word	0x0800752c
 8006abc:	0800754c 	.word	0x0800754c
 8006ac0:	0800750c 	.word	0x0800750c

08006ac4 <abort>:
 8006ac4:	2006      	movs	r0, #6
 8006ac6:	b508      	push	{r3, lr}
 8006ac8:	f000 fb48 	bl	800715c <raise>
 8006acc:	2001      	movs	r0, #1
 8006ace:	f7fa f8cb 	bl	8000c68 <_exit>
	...

08006ad4 <__sflush_r>:
 8006ad4:	898a      	ldrh	r2, [r1, #12]
 8006ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ada:	4605      	mov	r5, r0
 8006adc:	0710      	lsls	r0, r2, #28
 8006ade:	460c      	mov	r4, r1
 8006ae0:	d458      	bmi.n	8006b94 <__sflush_r+0xc0>
 8006ae2:	684b      	ldr	r3, [r1, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	dc05      	bgt.n	8006af4 <__sflush_r+0x20>
 8006ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	dc02      	bgt.n	8006af4 <__sflush_r+0x20>
 8006aee:	2000      	movs	r0, #0
 8006af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006af6:	2e00      	cmp	r6, #0
 8006af8:	d0f9      	beq.n	8006aee <__sflush_r+0x1a>
 8006afa:	2300      	movs	r3, #0
 8006afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b00:	682f      	ldr	r7, [r5, #0]
 8006b02:	602b      	str	r3, [r5, #0]
 8006b04:	d032      	beq.n	8006b6c <__sflush_r+0x98>
 8006b06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	075a      	lsls	r2, r3, #29
 8006b0c:	d505      	bpl.n	8006b1a <__sflush_r+0x46>
 8006b0e:	6863      	ldr	r3, [r4, #4]
 8006b10:	1ac0      	subs	r0, r0, r3
 8006b12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b14:	b10b      	cbz	r3, 8006b1a <__sflush_r+0x46>
 8006b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b18:	1ac0      	subs	r0, r0, r3
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b20:	4628      	mov	r0, r5
 8006b22:	6a21      	ldr	r1, [r4, #32]
 8006b24:	47b0      	blx	r6
 8006b26:	1c43      	adds	r3, r0, #1
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	d106      	bne.n	8006b3a <__sflush_r+0x66>
 8006b2c:	6829      	ldr	r1, [r5, #0]
 8006b2e:	291d      	cmp	r1, #29
 8006b30:	d82c      	bhi.n	8006b8c <__sflush_r+0xb8>
 8006b32:	4a29      	ldr	r2, [pc, #164]	; (8006bd8 <__sflush_r+0x104>)
 8006b34:	40ca      	lsrs	r2, r1
 8006b36:	07d6      	lsls	r6, r2, #31
 8006b38:	d528      	bpl.n	8006b8c <__sflush_r+0xb8>
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	04d9      	lsls	r1, r3, #19
 8006b3e:	6062      	str	r2, [r4, #4]
 8006b40:	6922      	ldr	r2, [r4, #16]
 8006b42:	6022      	str	r2, [r4, #0]
 8006b44:	d504      	bpl.n	8006b50 <__sflush_r+0x7c>
 8006b46:	1c42      	adds	r2, r0, #1
 8006b48:	d101      	bne.n	8006b4e <__sflush_r+0x7a>
 8006b4a:	682b      	ldr	r3, [r5, #0]
 8006b4c:	b903      	cbnz	r3, 8006b50 <__sflush_r+0x7c>
 8006b4e:	6560      	str	r0, [r4, #84]	; 0x54
 8006b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b52:	602f      	str	r7, [r5, #0]
 8006b54:	2900      	cmp	r1, #0
 8006b56:	d0ca      	beq.n	8006aee <__sflush_r+0x1a>
 8006b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b5c:	4299      	cmp	r1, r3
 8006b5e:	d002      	beq.n	8006b66 <__sflush_r+0x92>
 8006b60:	4628      	mov	r0, r5
 8006b62:	f000 f9e3 	bl	8006f2c <_free_r>
 8006b66:	2000      	movs	r0, #0
 8006b68:	6360      	str	r0, [r4, #52]	; 0x34
 8006b6a:	e7c1      	b.n	8006af0 <__sflush_r+0x1c>
 8006b6c:	6a21      	ldr	r1, [r4, #32]
 8006b6e:	2301      	movs	r3, #1
 8006b70:	4628      	mov	r0, r5
 8006b72:	47b0      	blx	r6
 8006b74:	1c41      	adds	r1, r0, #1
 8006b76:	d1c7      	bne.n	8006b08 <__sflush_r+0x34>
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0c4      	beq.n	8006b08 <__sflush_r+0x34>
 8006b7e:	2b1d      	cmp	r3, #29
 8006b80:	d001      	beq.n	8006b86 <__sflush_r+0xb2>
 8006b82:	2b16      	cmp	r3, #22
 8006b84:	d101      	bne.n	8006b8a <__sflush_r+0xb6>
 8006b86:	602f      	str	r7, [r5, #0]
 8006b88:	e7b1      	b.n	8006aee <__sflush_r+0x1a>
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b90:	81a3      	strh	r3, [r4, #12]
 8006b92:	e7ad      	b.n	8006af0 <__sflush_r+0x1c>
 8006b94:	690f      	ldr	r7, [r1, #16]
 8006b96:	2f00      	cmp	r7, #0
 8006b98:	d0a9      	beq.n	8006aee <__sflush_r+0x1a>
 8006b9a:	0793      	lsls	r3, r2, #30
 8006b9c:	680e      	ldr	r6, [r1, #0]
 8006b9e:	600f      	str	r7, [r1, #0]
 8006ba0:	bf0c      	ite	eq
 8006ba2:	694b      	ldreq	r3, [r1, #20]
 8006ba4:	2300      	movne	r3, #0
 8006ba6:	eba6 0807 	sub.w	r8, r6, r7
 8006baa:	608b      	str	r3, [r1, #8]
 8006bac:	f1b8 0f00 	cmp.w	r8, #0
 8006bb0:	dd9d      	ble.n	8006aee <__sflush_r+0x1a>
 8006bb2:	4643      	mov	r3, r8
 8006bb4:	463a      	mov	r2, r7
 8006bb6:	6a21      	ldr	r1, [r4, #32]
 8006bb8:	4628      	mov	r0, r5
 8006bba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bbc:	47b0      	blx	r6
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	dc06      	bgt.n	8006bd0 <__sflush_r+0xfc>
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bcc:	81a3      	strh	r3, [r4, #12]
 8006bce:	e78f      	b.n	8006af0 <__sflush_r+0x1c>
 8006bd0:	4407      	add	r7, r0
 8006bd2:	eba8 0800 	sub.w	r8, r8, r0
 8006bd6:	e7e9      	b.n	8006bac <__sflush_r+0xd8>
 8006bd8:	20400001 	.word	0x20400001

08006bdc <_fflush_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	690b      	ldr	r3, [r1, #16]
 8006be0:	4605      	mov	r5, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	b913      	cbnz	r3, 8006bec <_fflush_r+0x10>
 8006be6:	2500      	movs	r5, #0
 8006be8:	4628      	mov	r0, r5
 8006bea:	bd38      	pop	{r3, r4, r5, pc}
 8006bec:	b118      	cbz	r0, 8006bf6 <_fflush_r+0x1a>
 8006bee:	6983      	ldr	r3, [r0, #24]
 8006bf0:	b90b      	cbnz	r3, 8006bf6 <_fflush_r+0x1a>
 8006bf2:	f000 f887 	bl	8006d04 <__sinit>
 8006bf6:	4b14      	ldr	r3, [pc, #80]	; (8006c48 <_fflush_r+0x6c>)
 8006bf8:	429c      	cmp	r4, r3
 8006bfa:	d11b      	bne.n	8006c34 <_fflush_r+0x58>
 8006bfc:	686c      	ldr	r4, [r5, #4]
 8006bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0ef      	beq.n	8006be6 <_fflush_r+0xa>
 8006c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c08:	07d0      	lsls	r0, r2, #31
 8006c0a:	d404      	bmi.n	8006c16 <_fflush_r+0x3a>
 8006c0c:	0599      	lsls	r1, r3, #22
 8006c0e:	d402      	bmi.n	8006c16 <_fflush_r+0x3a>
 8006c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c12:	f000 f915 	bl	8006e40 <__retarget_lock_acquire_recursive>
 8006c16:	4628      	mov	r0, r5
 8006c18:	4621      	mov	r1, r4
 8006c1a:	f7ff ff5b 	bl	8006ad4 <__sflush_r>
 8006c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c20:	4605      	mov	r5, r0
 8006c22:	07da      	lsls	r2, r3, #31
 8006c24:	d4e0      	bmi.n	8006be8 <_fflush_r+0xc>
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	059b      	lsls	r3, r3, #22
 8006c2a:	d4dd      	bmi.n	8006be8 <_fflush_r+0xc>
 8006c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c2e:	f000 f908 	bl	8006e42 <__retarget_lock_release_recursive>
 8006c32:	e7d9      	b.n	8006be8 <_fflush_r+0xc>
 8006c34:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <_fflush_r+0x70>)
 8006c36:	429c      	cmp	r4, r3
 8006c38:	d101      	bne.n	8006c3e <_fflush_r+0x62>
 8006c3a:	68ac      	ldr	r4, [r5, #8]
 8006c3c:	e7df      	b.n	8006bfe <_fflush_r+0x22>
 8006c3e:	4b04      	ldr	r3, [pc, #16]	; (8006c50 <_fflush_r+0x74>)
 8006c40:	429c      	cmp	r4, r3
 8006c42:	bf08      	it	eq
 8006c44:	68ec      	ldreq	r4, [r5, #12]
 8006c46:	e7da      	b.n	8006bfe <_fflush_r+0x22>
 8006c48:	0800752c 	.word	0x0800752c
 8006c4c:	0800754c 	.word	0x0800754c
 8006c50:	0800750c 	.word	0x0800750c

08006c54 <std>:
 8006c54:	2300      	movs	r3, #0
 8006c56:	b510      	push	{r4, lr}
 8006c58:	4604      	mov	r4, r0
 8006c5a:	6083      	str	r3, [r0, #8]
 8006c5c:	8181      	strh	r1, [r0, #12]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6643      	str	r3, [r0, #100]	; 0x64
 8006c62:	81c2      	strh	r2, [r0, #14]
 8006c64:	2208      	movs	r2, #8
 8006c66:	6183      	str	r3, [r0, #24]
 8006c68:	e9c0 3300 	strd	r3, r3, [r0]
 8006c6c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c70:	305c      	adds	r0, #92	; 0x5c
 8006c72:	f7ff fb6f 	bl	8006354 <memset>
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <std+0x38>)
 8006c78:	6224      	str	r4, [r4, #32]
 8006c7a:	6263      	str	r3, [r4, #36]	; 0x24
 8006c7c:	4b04      	ldr	r3, [pc, #16]	; (8006c90 <std+0x3c>)
 8006c7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c80:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <std+0x40>)
 8006c82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c84:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <std+0x44>)
 8006c86:	6323      	str	r3, [r4, #48]	; 0x30
 8006c88:	bd10      	pop	{r4, pc}
 8006c8a:	bf00      	nop
 8006c8c:	08007195 	.word	0x08007195
 8006c90:	080071b7 	.word	0x080071b7
 8006c94:	080071ef 	.word	0x080071ef
 8006c98:	08007213 	.word	0x08007213

08006c9c <_cleanup_r>:
 8006c9c:	4901      	ldr	r1, [pc, #4]	; (8006ca4 <_cleanup_r+0x8>)
 8006c9e:	f000 b8af 	b.w	8006e00 <_fwalk_reent>
 8006ca2:	bf00      	nop
 8006ca4:	08006bdd 	.word	0x08006bdd

08006ca8 <__sfmoreglue>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	2268      	movs	r2, #104	; 0x68
 8006cac:	1e4d      	subs	r5, r1, #1
 8006cae:	460e      	mov	r6, r1
 8006cb0:	4355      	muls	r5, r2
 8006cb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cb6:	f000 f9a5 	bl	8007004 <_malloc_r>
 8006cba:	4604      	mov	r4, r0
 8006cbc:	b140      	cbz	r0, 8006cd0 <__sfmoreglue+0x28>
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cc4:	e9c0 1600 	strd	r1, r6, [r0]
 8006cc8:	300c      	adds	r0, #12
 8006cca:	60a0      	str	r0, [r4, #8]
 8006ccc:	f7ff fb42 	bl	8006354 <memset>
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}

08006cd4 <__sfp_lock_acquire>:
 8006cd4:	4801      	ldr	r0, [pc, #4]	; (8006cdc <__sfp_lock_acquire+0x8>)
 8006cd6:	f000 b8b3 	b.w	8006e40 <__retarget_lock_acquire_recursive>
 8006cda:	bf00      	nop
 8006cdc:	20001065 	.word	0x20001065

08006ce0 <__sfp_lock_release>:
 8006ce0:	4801      	ldr	r0, [pc, #4]	; (8006ce8 <__sfp_lock_release+0x8>)
 8006ce2:	f000 b8ae 	b.w	8006e42 <__retarget_lock_release_recursive>
 8006ce6:	bf00      	nop
 8006ce8:	20001065 	.word	0x20001065

08006cec <__sinit_lock_acquire>:
 8006cec:	4801      	ldr	r0, [pc, #4]	; (8006cf4 <__sinit_lock_acquire+0x8>)
 8006cee:	f000 b8a7 	b.w	8006e40 <__retarget_lock_acquire_recursive>
 8006cf2:	bf00      	nop
 8006cf4:	20001066 	.word	0x20001066

08006cf8 <__sinit_lock_release>:
 8006cf8:	4801      	ldr	r0, [pc, #4]	; (8006d00 <__sinit_lock_release+0x8>)
 8006cfa:	f000 b8a2 	b.w	8006e42 <__retarget_lock_release_recursive>
 8006cfe:	bf00      	nop
 8006d00:	20001066 	.word	0x20001066

08006d04 <__sinit>:
 8006d04:	b510      	push	{r4, lr}
 8006d06:	4604      	mov	r4, r0
 8006d08:	f7ff fff0 	bl	8006cec <__sinit_lock_acquire>
 8006d0c:	69a3      	ldr	r3, [r4, #24]
 8006d0e:	b11b      	cbz	r3, 8006d18 <__sinit+0x14>
 8006d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d14:	f7ff bff0 	b.w	8006cf8 <__sinit_lock_release>
 8006d18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d1c:	6523      	str	r3, [r4, #80]	; 0x50
 8006d1e:	4620      	mov	r0, r4
 8006d20:	4b12      	ldr	r3, [pc, #72]	; (8006d6c <__sinit+0x68>)
 8006d22:	4a13      	ldr	r2, [pc, #76]	; (8006d70 <__sinit+0x6c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	bf04      	itt	eq
 8006d2c:	2301      	moveq	r3, #1
 8006d2e:	61a3      	streq	r3, [r4, #24]
 8006d30:	f000 f820 	bl	8006d74 <__sfp>
 8006d34:	6060      	str	r0, [r4, #4]
 8006d36:	4620      	mov	r0, r4
 8006d38:	f000 f81c 	bl	8006d74 <__sfp>
 8006d3c:	60a0      	str	r0, [r4, #8]
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 f818 	bl	8006d74 <__sfp>
 8006d44:	2200      	movs	r2, #0
 8006d46:	2104      	movs	r1, #4
 8006d48:	60e0      	str	r0, [r4, #12]
 8006d4a:	6860      	ldr	r0, [r4, #4]
 8006d4c:	f7ff ff82 	bl	8006c54 <std>
 8006d50:	2201      	movs	r2, #1
 8006d52:	2109      	movs	r1, #9
 8006d54:	68a0      	ldr	r0, [r4, #8]
 8006d56:	f7ff ff7d 	bl	8006c54 <std>
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	2112      	movs	r1, #18
 8006d5e:	68e0      	ldr	r0, [r4, #12]
 8006d60:	f7ff ff78 	bl	8006c54 <std>
 8006d64:	2301      	movs	r3, #1
 8006d66:	61a3      	str	r3, [r4, #24]
 8006d68:	e7d2      	b.n	8006d10 <__sinit+0xc>
 8006d6a:	bf00      	nop
 8006d6c:	080074d4 	.word	0x080074d4
 8006d70:	08006c9d 	.word	0x08006c9d

08006d74 <__sfp>:
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	4607      	mov	r7, r0
 8006d78:	f7ff ffac 	bl	8006cd4 <__sfp_lock_acquire>
 8006d7c:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <__sfp+0x84>)
 8006d7e:	681e      	ldr	r6, [r3, #0]
 8006d80:	69b3      	ldr	r3, [r6, #24]
 8006d82:	b913      	cbnz	r3, 8006d8a <__sfp+0x16>
 8006d84:	4630      	mov	r0, r6
 8006d86:	f7ff ffbd 	bl	8006d04 <__sinit>
 8006d8a:	3648      	adds	r6, #72	; 0x48
 8006d8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	d503      	bpl.n	8006d9c <__sfp+0x28>
 8006d94:	6833      	ldr	r3, [r6, #0]
 8006d96:	b30b      	cbz	r3, 8006ddc <__sfp+0x68>
 8006d98:	6836      	ldr	r6, [r6, #0]
 8006d9a:	e7f7      	b.n	8006d8c <__sfp+0x18>
 8006d9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006da0:	b9d5      	cbnz	r5, 8006dd8 <__sfp+0x64>
 8006da2:	4b16      	ldr	r3, [pc, #88]	; (8006dfc <__sfp+0x88>)
 8006da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006da8:	6665      	str	r5, [r4, #100]	; 0x64
 8006daa:	60e3      	str	r3, [r4, #12]
 8006dac:	f000 f847 	bl	8006e3e <__retarget_lock_init_recursive>
 8006db0:	f7ff ff96 	bl	8006ce0 <__sfp_lock_release>
 8006db4:	2208      	movs	r2, #8
 8006db6:	4629      	mov	r1, r5
 8006db8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dbc:	6025      	str	r5, [r4, #0]
 8006dbe:	61a5      	str	r5, [r4, #24]
 8006dc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006dc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006dc8:	f7ff fac4 	bl	8006354 <memset>
 8006dcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd8:	3468      	adds	r4, #104	; 0x68
 8006dda:	e7d9      	b.n	8006d90 <__sfp+0x1c>
 8006ddc:	2104      	movs	r1, #4
 8006dde:	4638      	mov	r0, r7
 8006de0:	f7ff ff62 	bl	8006ca8 <__sfmoreglue>
 8006de4:	4604      	mov	r4, r0
 8006de6:	6030      	str	r0, [r6, #0]
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d1d5      	bne.n	8006d98 <__sfp+0x24>
 8006dec:	f7ff ff78 	bl	8006ce0 <__sfp_lock_release>
 8006df0:	230c      	movs	r3, #12
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	e7ee      	b.n	8006dd4 <__sfp+0x60>
 8006df6:	bf00      	nop
 8006df8:	080074d4 	.word	0x080074d4
 8006dfc:	ffff0001 	.word	0xffff0001

08006e00 <_fwalk_reent>:
 8006e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e04:	4606      	mov	r6, r0
 8006e06:	4688      	mov	r8, r1
 8006e08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e0c:	2700      	movs	r7, #0
 8006e0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e12:	f1b9 0901 	subs.w	r9, r9, #1
 8006e16:	d505      	bpl.n	8006e24 <_fwalk_reent+0x24>
 8006e18:	6824      	ldr	r4, [r4, #0]
 8006e1a:	2c00      	cmp	r4, #0
 8006e1c:	d1f7      	bne.n	8006e0e <_fwalk_reent+0xe>
 8006e1e:	4638      	mov	r0, r7
 8006e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e24:	89ab      	ldrh	r3, [r5, #12]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d907      	bls.n	8006e3a <_fwalk_reent+0x3a>
 8006e2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	d003      	beq.n	8006e3a <_fwalk_reent+0x3a>
 8006e32:	4629      	mov	r1, r5
 8006e34:	4630      	mov	r0, r6
 8006e36:	47c0      	blx	r8
 8006e38:	4307      	orrs	r7, r0
 8006e3a:	3568      	adds	r5, #104	; 0x68
 8006e3c:	e7e9      	b.n	8006e12 <_fwalk_reent+0x12>

08006e3e <__retarget_lock_init_recursive>:
 8006e3e:	4770      	bx	lr

08006e40 <__retarget_lock_acquire_recursive>:
 8006e40:	4770      	bx	lr

08006e42 <__retarget_lock_release_recursive>:
 8006e42:	4770      	bx	lr

08006e44 <__swhatbuf_r>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	460e      	mov	r6, r1
 8006e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4c:	b096      	sub	sp, #88	; 0x58
 8006e4e:	4614      	mov	r4, r2
 8006e50:	2900      	cmp	r1, #0
 8006e52:	461d      	mov	r5, r3
 8006e54:	da08      	bge.n	8006e68 <__swhatbuf_r+0x24>
 8006e56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	602a      	str	r2, [r5, #0]
 8006e5e:	061a      	lsls	r2, r3, #24
 8006e60:	d410      	bmi.n	8006e84 <__swhatbuf_r+0x40>
 8006e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e66:	e00e      	b.n	8006e86 <__swhatbuf_r+0x42>
 8006e68:	466a      	mov	r2, sp
 8006e6a:	f000 f9f9 	bl	8007260 <_fstat_r>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	dbf1      	blt.n	8006e56 <__swhatbuf_r+0x12>
 8006e72:	9a01      	ldr	r2, [sp, #4]
 8006e74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e7c:	425a      	negs	r2, r3
 8006e7e:	415a      	adcs	r2, r3
 8006e80:	602a      	str	r2, [r5, #0]
 8006e82:	e7ee      	b.n	8006e62 <__swhatbuf_r+0x1e>
 8006e84:	2340      	movs	r3, #64	; 0x40
 8006e86:	2000      	movs	r0, #0
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	b016      	add	sp, #88	; 0x58
 8006e8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e90 <__smakebuf_r>:
 8006e90:	898b      	ldrh	r3, [r1, #12]
 8006e92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e94:	079d      	lsls	r5, r3, #30
 8006e96:	4606      	mov	r6, r0
 8006e98:	460c      	mov	r4, r1
 8006e9a:	d507      	bpl.n	8006eac <__smakebuf_r+0x1c>
 8006e9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	6123      	str	r3, [r4, #16]
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	6163      	str	r3, [r4, #20]
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
 8006eac:	ab01      	add	r3, sp, #4
 8006eae:	466a      	mov	r2, sp
 8006eb0:	f7ff ffc8 	bl	8006e44 <__swhatbuf_r>
 8006eb4:	9900      	ldr	r1, [sp, #0]
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f000 f8a3 	bl	8007004 <_malloc_r>
 8006ebe:	b948      	cbnz	r0, 8006ed4 <__smakebuf_r+0x44>
 8006ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec4:	059a      	lsls	r2, r3, #22
 8006ec6:	d4ef      	bmi.n	8006ea8 <__smakebuf_r+0x18>
 8006ec8:	f023 0303 	bic.w	r3, r3, #3
 8006ecc:	f043 0302 	orr.w	r3, r3, #2
 8006ed0:	81a3      	strh	r3, [r4, #12]
 8006ed2:	e7e3      	b.n	8006e9c <__smakebuf_r+0xc>
 8006ed4:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <__smakebuf_r+0x7c>)
 8006ed6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	6020      	str	r0, [r4, #0]
 8006edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee0:	6120      	str	r0, [r4, #16]
 8006ee2:	81a3      	strh	r3, [r4, #12]
 8006ee4:	9b00      	ldr	r3, [sp, #0]
 8006ee6:	6163      	str	r3, [r4, #20]
 8006ee8:	9b01      	ldr	r3, [sp, #4]
 8006eea:	b15b      	cbz	r3, 8006f04 <__smakebuf_r+0x74>
 8006eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f000 f9c7 	bl	8007284 <_isatty_r>
 8006ef6:	b128      	cbz	r0, 8006f04 <__smakebuf_r+0x74>
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	f023 0303 	bic.w	r3, r3, #3
 8006efe:	f043 0301 	orr.w	r3, r3, #1
 8006f02:	81a3      	strh	r3, [r4, #12]
 8006f04:	89a0      	ldrh	r0, [r4, #12]
 8006f06:	4305      	orrs	r5, r0
 8006f08:	81a5      	strh	r5, [r4, #12]
 8006f0a:	e7cd      	b.n	8006ea8 <__smakebuf_r+0x18>
 8006f0c:	08006c9d 	.word	0x08006c9d

08006f10 <memchr>:
 8006f10:	b2c9      	uxtb	r1, r1
 8006f12:	4402      	add	r2, r0
 8006f14:	b510      	push	{r4, lr}
 8006f16:	4290      	cmp	r0, r2
 8006f18:	4603      	mov	r3, r0
 8006f1a:	d101      	bne.n	8006f20 <memchr+0x10>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e003      	b.n	8006f28 <memchr+0x18>
 8006f20:	781c      	ldrb	r4, [r3, #0]
 8006f22:	3001      	adds	r0, #1
 8006f24:	428c      	cmp	r4, r1
 8006f26:	d1f6      	bne.n	8006f16 <memchr+0x6>
 8006f28:	4618      	mov	r0, r3
 8006f2a:	bd10      	pop	{r4, pc}

08006f2c <_free_r>:
 8006f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f2e:	2900      	cmp	r1, #0
 8006f30:	d043      	beq.n	8006fba <_free_r+0x8e>
 8006f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f36:	1f0c      	subs	r4, r1, #4
 8006f38:	9001      	str	r0, [sp, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	bfb8      	it	lt
 8006f3e:	18e4      	addlt	r4, r4, r3
 8006f40:	f000 f9c2 	bl	80072c8 <__malloc_lock>
 8006f44:	4a1e      	ldr	r2, [pc, #120]	; (8006fc0 <_free_r+0x94>)
 8006f46:	9801      	ldr	r0, [sp, #4]
 8006f48:	6813      	ldr	r3, [r2, #0]
 8006f4a:	b933      	cbnz	r3, 8006f5a <_free_r+0x2e>
 8006f4c:	6063      	str	r3, [r4, #4]
 8006f4e:	6014      	str	r4, [r2, #0]
 8006f50:	b003      	add	sp, #12
 8006f52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f56:	f000 b9bd 	b.w	80072d4 <__malloc_unlock>
 8006f5a:	42a3      	cmp	r3, r4
 8006f5c:	d908      	bls.n	8006f70 <_free_r+0x44>
 8006f5e:	6825      	ldr	r5, [r4, #0]
 8006f60:	1961      	adds	r1, r4, r5
 8006f62:	428b      	cmp	r3, r1
 8006f64:	bf01      	itttt	eq
 8006f66:	6819      	ldreq	r1, [r3, #0]
 8006f68:	685b      	ldreq	r3, [r3, #4]
 8006f6a:	1949      	addeq	r1, r1, r5
 8006f6c:	6021      	streq	r1, [r4, #0]
 8006f6e:	e7ed      	b.n	8006f4c <_free_r+0x20>
 8006f70:	461a      	mov	r2, r3
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	b10b      	cbz	r3, 8006f7a <_free_r+0x4e>
 8006f76:	42a3      	cmp	r3, r4
 8006f78:	d9fa      	bls.n	8006f70 <_free_r+0x44>
 8006f7a:	6811      	ldr	r1, [r2, #0]
 8006f7c:	1855      	adds	r5, r2, r1
 8006f7e:	42a5      	cmp	r5, r4
 8006f80:	d10b      	bne.n	8006f9a <_free_r+0x6e>
 8006f82:	6824      	ldr	r4, [r4, #0]
 8006f84:	4421      	add	r1, r4
 8006f86:	1854      	adds	r4, r2, r1
 8006f88:	6011      	str	r1, [r2, #0]
 8006f8a:	42a3      	cmp	r3, r4
 8006f8c:	d1e0      	bne.n	8006f50 <_free_r+0x24>
 8006f8e:	681c      	ldr	r4, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	4421      	add	r1, r4
 8006f94:	6053      	str	r3, [r2, #4]
 8006f96:	6011      	str	r1, [r2, #0]
 8006f98:	e7da      	b.n	8006f50 <_free_r+0x24>
 8006f9a:	d902      	bls.n	8006fa2 <_free_r+0x76>
 8006f9c:	230c      	movs	r3, #12
 8006f9e:	6003      	str	r3, [r0, #0]
 8006fa0:	e7d6      	b.n	8006f50 <_free_r+0x24>
 8006fa2:	6825      	ldr	r5, [r4, #0]
 8006fa4:	1961      	adds	r1, r4, r5
 8006fa6:	428b      	cmp	r3, r1
 8006fa8:	bf02      	ittt	eq
 8006faa:	6819      	ldreq	r1, [r3, #0]
 8006fac:	685b      	ldreq	r3, [r3, #4]
 8006fae:	1949      	addeq	r1, r1, r5
 8006fb0:	6063      	str	r3, [r4, #4]
 8006fb2:	bf08      	it	eq
 8006fb4:	6021      	streq	r1, [r4, #0]
 8006fb6:	6054      	str	r4, [r2, #4]
 8006fb8:	e7ca      	b.n	8006f50 <_free_r+0x24>
 8006fba:	b003      	add	sp, #12
 8006fbc:	bd30      	pop	{r4, r5, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20001068 	.word	0x20001068

08006fc4 <sbrk_aligned>:
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	4e0e      	ldr	r6, [pc, #56]	; (8007000 <sbrk_aligned+0x3c>)
 8006fc8:	460c      	mov	r4, r1
 8006fca:	4605      	mov	r5, r0
 8006fcc:	6831      	ldr	r1, [r6, #0]
 8006fce:	b911      	cbnz	r1, 8006fd6 <sbrk_aligned+0x12>
 8006fd0:	f000 f88c 	bl	80070ec <_sbrk_r>
 8006fd4:	6030      	str	r0, [r6, #0]
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f000 f887 	bl	80070ec <_sbrk_r>
 8006fde:	1c43      	adds	r3, r0, #1
 8006fe0:	d00a      	beq.n	8006ff8 <sbrk_aligned+0x34>
 8006fe2:	1cc4      	adds	r4, r0, #3
 8006fe4:	f024 0403 	bic.w	r4, r4, #3
 8006fe8:	42a0      	cmp	r0, r4
 8006fea:	d007      	beq.n	8006ffc <sbrk_aligned+0x38>
 8006fec:	1a21      	subs	r1, r4, r0
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f000 f87c 	bl	80070ec <_sbrk_r>
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d101      	bne.n	8006ffc <sbrk_aligned+0x38>
 8006ff8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	2000106c 	.word	0x2000106c

08007004 <_malloc_r>:
 8007004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007008:	1ccd      	adds	r5, r1, #3
 800700a:	4607      	mov	r7, r0
 800700c:	f025 0503 	bic.w	r5, r5, #3
 8007010:	3508      	adds	r5, #8
 8007012:	2d0c      	cmp	r5, #12
 8007014:	bf38      	it	cc
 8007016:	250c      	movcc	r5, #12
 8007018:	2d00      	cmp	r5, #0
 800701a:	db01      	blt.n	8007020 <_malloc_r+0x1c>
 800701c:	42a9      	cmp	r1, r5
 800701e:	d905      	bls.n	800702c <_malloc_r+0x28>
 8007020:	230c      	movs	r3, #12
 8007022:	2600      	movs	r6, #0
 8007024:	603b      	str	r3, [r7, #0]
 8007026:	4630      	mov	r0, r6
 8007028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800702c:	4e2e      	ldr	r6, [pc, #184]	; (80070e8 <_malloc_r+0xe4>)
 800702e:	f000 f94b 	bl	80072c8 <__malloc_lock>
 8007032:	6833      	ldr	r3, [r6, #0]
 8007034:	461c      	mov	r4, r3
 8007036:	bb34      	cbnz	r4, 8007086 <_malloc_r+0x82>
 8007038:	4629      	mov	r1, r5
 800703a:	4638      	mov	r0, r7
 800703c:	f7ff ffc2 	bl	8006fc4 <sbrk_aligned>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	4604      	mov	r4, r0
 8007044:	d14d      	bne.n	80070e2 <_malloc_r+0xde>
 8007046:	6834      	ldr	r4, [r6, #0]
 8007048:	4626      	mov	r6, r4
 800704a:	2e00      	cmp	r6, #0
 800704c:	d140      	bne.n	80070d0 <_malloc_r+0xcc>
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	4631      	mov	r1, r6
 8007052:	4638      	mov	r0, r7
 8007054:	eb04 0803 	add.w	r8, r4, r3
 8007058:	f000 f848 	bl	80070ec <_sbrk_r>
 800705c:	4580      	cmp	r8, r0
 800705e:	d13a      	bne.n	80070d6 <_malloc_r+0xd2>
 8007060:	6821      	ldr	r1, [r4, #0]
 8007062:	3503      	adds	r5, #3
 8007064:	4638      	mov	r0, r7
 8007066:	1a6d      	subs	r5, r5, r1
 8007068:	f025 0503 	bic.w	r5, r5, #3
 800706c:	3508      	adds	r5, #8
 800706e:	2d0c      	cmp	r5, #12
 8007070:	bf38      	it	cc
 8007072:	250c      	movcc	r5, #12
 8007074:	4629      	mov	r1, r5
 8007076:	f7ff ffa5 	bl	8006fc4 <sbrk_aligned>
 800707a:	3001      	adds	r0, #1
 800707c:	d02b      	beq.n	80070d6 <_malloc_r+0xd2>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	442b      	add	r3, r5
 8007082:	6023      	str	r3, [r4, #0]
 8007084:	e00e      	b.n	80070a4 <_malloc_r+0xa0>
 8007086:	6822      	ldr	r2, [r4, #0]
 8007088:	1b52      	subs	r2, r2, r5
 800708a:	d41e      	bmi.n	80070ca <_malloc_r+0xc6>
 800708c:	2a0b      	cmp	r2, #11
 800708e:	d916      	bls.n	80070be <_malloc_r+0xba>
 8007090:	1961      	adds	r1, r4, r5
 8007092:	42a3      	cmp	r3, r4
 8007094:	6025      	str	r5, [r4, #0]
 8007096:	bf18      	it	ne
 8007098:	6059      	strne	r1, [r3, #4]
 800709a:	6863      	ldr	r3, [r4, #4]
 800709c:	bf08      	it	eq
 800709e:	6031      	streq	r1, [r6, #0]
 80070a0:	5162      	str	r2, [r4, r5]
 80070a2:	604b      	str	r3, [r1, #4]
 80070a4:	f104 060b 	add.w	r6, r4, #11
 80070a8:	4638      	mov	r0, r7
 80070aa:	f000 f913 	bl	80072d4 <__malloc_unlock>
 80070ae:	1d23      	adds	r3, r4, #4
 80070b0:	f026 0607 	bic.w	r6, r6, #7
 80070b4:	1af2      	subs	r2, r6, r3
 80070b6:	d0b6      	beq.n	8007026 <_malloc_r+0x22>
 80070b8:	1b9b      	subs	r3, r3, r6
 80070ba:	50a3      	str	r3, [r4, r2]
 80070bc:	e7b3      	b.n	8007026 <_malloc_r+0x22>
 80070be:	6862      	ldr	r2, [r4, #4]
 80070c0:	42a3      	cmp	r3, r4
 80070c2:	bf0c      	ite	eq
 80070c4:	6032      	streq	r2, [r6, #0]
 80070c6:	605a      	strne	r2, [r3, #4]
 80070c8:	e7ec      	b.n	80070a4 <_malloc_r+0xa0>
 80070ca:	4623      	mov	r3, r4
 80070cc:	6864      	ldr	r4, [r4, #4]
 80070ce:	e7b2      	b.n	8007036 <_malloc_r+0x32>
 80070d0:	4634      	mov	r4, r6
 80070d2:	6876      	ldr	r6, [r6, #4]
 80070d4:	e7b9      	b.n	800704a <_malloc_r+0x46>
 80070d6:	230c      	movs	r3, #12
 80070d8:	4638      	mov	r0, r7
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	f000 f8fa 	bl	80072d4 <__malloc_unlock>
 80070e0:	e7a1      	b.n	8007026 <_malloc_r+0x22>
 80070e2:	6025      	str	r5, [r4, #0]
 80070e4:	e7de      	b.n	80070a4 <_malloc_r+0xa0>
 80070e6:	bf00      	nop
 80070e8:	20001068 	.word	0x20001068

080070ec <_sbrk_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	2300      	movs	r3, #0
 80070f0:	4d05      	ldr	r5, [pc, #20]	; (8007108 <_sbrk_r+0x1c>)
 80070f2:	4604      	mov	r4, r0
 80070f4:	4608      	mov	r0, r1
 80070f6:	602b      	str	r3, [r5, #0]
 80070f8:	f7f9 fe2e 	bl	8000d58 <_sbrk>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d102      	bne.n	8007106 <_sbrk_r+0x1a>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	b103      	cbz	r3, 8007106 <_sbrk_r+0x1a>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	20001070 	.word	0x20001070

0800710c <_raise_r>:
 800710c:	291f      	cmp	r1, #31
 800710e:	b538      	push	{r3, r4, r5, lr}
 8007110:	4604      	mov	r4, r0
 8007112:	460d      	mov	r5, r1
 8007114:	d904      	bls.n	8007120 <_raise_r+0x14>
 8007116:	2316      	movs	r3, #22
 8007118:	6003      	str	r3, [r0, #0]
 800711a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800711e:	bd38      	pop	{r3, r4, r5, pc}
 8007120:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007122:	b112      	cbz	r2, 800712a <_raise_r+0x1e>
 8007124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007128:	b94b      	cbnz	r3, 800713e <_raise_r+0x32>
 800712a:	4620      	mov	r0, r4
 800712c:	f000 f830 	bl	8007190 <_getpid_r>
 8007130:	462a      	mov	r2, r5
 8007132:	4601      	mov	r1, r0
 8007134:	4620      	mov	r0, r4
 8007136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800713a:	f000 b817 	b.w	800716c <_kill_r>
 800713e:	2b01      	cmp	r3, #1
 8007140:	d00a      	beq.n	8007158 <_raise_r+0x4c>
 8007142:	1c59      	adds	r1, r3, #1
 8007144:	d103      	bne.n	800714e <_raise_r+0x42>
 8007146:	2316      	movs	r3, #22
 8007148:	6003      	str	r3, [r0, #0]
 800714a:	2001      	movs	r0, #1
 800714c:	e7e7      	b.n	800711e <_raise_r+0x12>
 800714e:	2400      	movs	r4, #0
 8007150:	4628      	mov	r0, r5
 8007152:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007156:	4798      	blx	r3
 8007158:	2000      	movs	r0, #0
 800715a:	e7e0      	b.n	800711e <_raise_r+0x12>

0800715c <raise>:
 800715c:	4b02      	ldr	r3, [pc, #8]	; (8007168 <raise+0xc>)
 800715e:	4601      	mov	r1, r0
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	f7ff bfd3 	b.w	800710c <_raise_r>
 8007166:	bf00      	nop
 8007168:	20000018 	.word	0x20000018

0800716c <_kill_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	2300      	movs	r3, #0
 8007170:	4d06      	ldr	r5, [pc, #24]	; (800718c <_kill_r+0x20>)
 8007172:	4604      	mov	r4, r0
 8007174:	4608      	mov	r0, r1
 8007176:	4611      	mov	r1, r2
 8007178:	602b      	str	r3, [r5, #0]
 800717a:	f7f9 fd65 	bl	8000c48 <_kill>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	d102      	bne.n	8007188 <_kill_r+0x1c>
 8007182:	682b      	ldr	r3, [r5, #0]
 8007184:	b103      	cbz	r3, 8007188 <_kill_r+0x1c>
 8007186:	6023      	str	r3, [r4, #0]
 8007188:	bd38      	pop	{r3, r4, r5, pc}
 800718a:	bf00      	nop
 800718c:	20001070 	.word	0x20001070

08007190 <_getpid_r>:
 8007190:	f7f9 bd52 	b.w	8000c38 <_getpid>

08007194 <__sread>:
 8007194:	b510      	push	{r4, lr}
 8007196:	460c      	mov	r4, r1
 8007198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719c:	f000 f8a0 	bl	80072e0 <_read_r>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	bfab      	itete	ge
 80071a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071a6:	89a3      	ldrhlt	r3, [r4, #12]
 80071a8:	181b      	addge	r3, r3, r0
 80071aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071ae:	bfac      	ite	ge
 80071b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80071b2:	81a3      	strhlt	r3, [r4, #12]
 80071b4:	bd10      	pop	{r4, pc}

080071b6 <__swrite>:
 80071b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ba:	461f      	mov	r7, r3
 80071bc:	898b      	ldrh	r3, [r1, #12]
 80071be:	4605      	mov	r5, r0
 80071c0:	460c      	mov	r4, r1
 80071c2:	05db      	lsls	r3, r3, #23
 80071c4:	4616      	mov	r6, r2
 80071c6:	d505      	bpl.n	80071d4 <__swrite+0x1e>
 80071c8:	2302      	movs	r3, #2
 80071ca:	2200      	movs	r2, #0
 80071cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d0:	f000 f868 	bl	80072a4 <_lseek_r>
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	4632      	mov	r2, r6
 80071d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071dc:	4628      	mov	r0, r5
 80071de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071e2:	81a3      	strh	r3, [r4, #12]
 80071e4:	463b      	mov	r3, r7
 80071e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ea:	f000 b817 	b.w	800721c <_write_r>

080071ee <__sseek>:
 80071ee:	b510      	push	{r4, lr}
 80071f0:	460c      	mov	r4, r1
 80071f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f6:	f000 f855 	bl	80072a4 <_lseek_r>
 80071fa:	1c43      	adds	r3, r0, #1
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	bf15      	itete	ne
 8007200:	6560      	strne	r0, [r4, #84]	; 0x54
 8007202:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007206:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800720a:	81a3      	strheq	r3, [r4, #12]
 800720c:	bf18      	it	ne
 800720e:	81a3      	strhne	r3, [r4, #12]
 8007210:	bd10      	pop	{r4, pc}

08007212 <__sclose>:
 8007212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007216:	f000 b813 	b.w	8007240 <_close_r>
	...

0800721c <_write_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4604      	mov	r4, r0
 8007220:	4d06      	ldr	r5, [pc, #24]	; (800723c <_write_r+0x20>)
 8007222:	4608      	mov	r0, r1
 8007224:	4611      	mov	r1, r2
 8007226:	2200      	movs	r2, #0
 8007228:	602a      	str	r2, [r5, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	f7f9 fd43 	bl	8000cb6 <_write>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_write_r+0x1e>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_write_r+0x1e>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	20001070 	.word	0x20001070

08007240 <_close_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	2300      	movs	r3, #0
 8007244:	4d05      	ldr	r5, [pc, #20]	; (800725c <_close_r+0x1c>)
 8007246:	4604      	mov	r4, r0
 8007248:	4608      	mov	r0, r1
 800724a:	602b      	str	r3, [r5, #0]
 800724c:	f7f9 fd4f 	bl	8000cee <_close>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d102      	bne.n	800725a <_close_r+0x1a>
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	b103      	cbz	r3, 800725a <_close_r+0x1a>
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	bd38      	pop	{r3, r4, r5, pc}
 800725c:	20001070 	.word	0x20001070

08007260 <_fstat_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	2300      	movs	r3, #0
 8007264:	4d06      	ldr	r5, [pc, #24]	; (8007280 <_fstat_r+0x20>)
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	4611      	mov	r1, r2
 800726c:	602b      	str	r3, [r5, #0]
 800726e:	f7f9 fd4a 	bl	8000d06 <_fstat>
 8007272:	1c43      	adds	r3, r0, #1
 8007274:	d102      	bne.n	800727c <_fstat_r+0x1c>
 8007276:	682b      	ldr	r3, [r5, #0]
 8007278:	b103      	cbz	r3, 800727c <_fstat_r+0x1c>
 800727a:	6023      	str	r3, [r4, #0]
 800727c:	bd38      	pop	{r3, r4, r5, pc}
 800727e:	bf00      	nop
 8007280:	20001070 	.word	0x20001070

08007284 <_isatty_r>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	2300      	movs	r3, #0
 8007288:	4d05      	ldr	r5, [pc, #20]	; (80072a0 <_isatty_r+0x1c>)
 800728a:	4604      	mov	r4, r0
 800728c:	4608      	mov	r0, r1
 800728e:	602b      	str	r3, [r5, #0]
 8007290:	f7f9 fd49 	bl	8000d26 <_isatty>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d102      	bne.n	800729e <_isatty_r+0x1a>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	b103      	cbz	r3, 800729e <_isatty_r+0x1a>
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	20001070 	.word	0x20001070

080072a4 <_lseek_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4604      	mov	r4, r0
 80072a8:	4d06      	ldr	r5, [pc, #24]	; (80072c4 <_lseek_r+0x20>)
 80072aa:	4608      	mov	r0, r1
 80072ac:	4611      	mov	r1, r2
 80072ae:	2200      	movs	r2, #0
 80072b0:	602a      	str	r2, [r5, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	f7f9 fd42 	bl	8000d3c <_lseek>
 80072b8:	1c43      	adds	r3, r0, #1
 80072ba:	d102      	bne.n	80072c2 <_lseek_r+0x1e>
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	b103      	cbz	r3, 80072c2 <_lseek_r+0x1e>
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	20001070 	.word	0x20001070

080072c8 <__malloc_lock>:
 80072c8:	4801      	ldr	r0, [pc, #4]	; (80072d0 <__malloc_lock+0x8>)
 80072ca:	f7ff bdb9 	b.w	8006e40 <__retarget_lock_acquire_recursive>
 80072ce:	bf00      	nop
 80072d0:	20001064 	.word	0x20001064

080072d4 <__malloc_unlock>:
 80072d4:	4801      	ldr	r0, [pc, #4]	; (80072dc <__malloc_unlock+0x8>)
 80072d6:	f7ff bdb4 	b.w	8006e42 <__retarget_lock_release_recursive>
 80072da:	bf00      	nop
 80072dc:	20001064 	.word	0x20001064

080072e0 <_read_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4604      	mov	r4, r0
 80072e4:	4d06      	ldr	r5, [pc, #24]	; (8007300 <_read_r+0x20>)
 80072e6:	4608      	mov	r0, r1
 80072e8:	4611      	mov	r1, r2
 80072ea:	2200      	movs	r2, #0
 80072ec:	602a      	str	r2, [r5, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f7f9 fcc4 	bl	8000c7c <_read>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	d102      	bne.n	80072fe <_read_r+0x1e>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	b103      	cbz	r3, 80072fe <_read_r+0x1e>
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	bd38      	pop	{r3, r4, r5, pc}
 8007300:	20001070 	.word	0x20001070

08007304 <_init>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	bf00      	nop
 8007308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730a:	bc08      	pop	{r3}
 800730c:	469e      	mov	lr, r3
 800730e:	4770      	bx	lr

08007310 <_fini>:
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007312:	bf00      	nop
 8007314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007316:	bc08      	pop	{r3}
 8007318:	469e      	mov	lr, r3
 800731a:	4770      	bx	lr
