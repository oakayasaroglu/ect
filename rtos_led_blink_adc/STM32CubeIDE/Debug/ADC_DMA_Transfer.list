
ADC_DMA_Transfer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d00  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08008f38  08008f38  00018f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009060  08009060  00019060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009064  08009064  00019064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08009068  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001600  20000024  0800908c  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001624  0800908c  00021624  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_line   000220fb  00000000  00000000  0002005a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   000207a9  00000000  00000000  00042155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b5e  00000000  00000000  000628fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001840  00000000  00000000  00067460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00159c8f  00000000  00000000  00068ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001550  00000000  00000000  001c2930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036fed  00000000  00000000  001c3e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001fae6d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000600c  00000000  00000000  001faec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000024 	.word	0x20000024
 8000254:	00000000 	.word	0x00000000
 8000258:	08008f20 	.word	0x08008f20

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000028 	.word	0x20000028
 8000274:	08008f20 	.word	0x08008f20

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f897 	bl	80003fc <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	20001018 	.word	0x20001018
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a2d      	ldr	r2, [pc, #180]	; (80003ac <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4824      	ldr	r0, [pc, #144]	; (80003b0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a25      	ldr	r2, [pc, #148]	; (80003b4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c1e      	ldr	r4, [pc, #120]	; (80003b8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c17      	ldr	r4, [pc, #92]	; (80003b8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b909      	cbnz	r1, 8000396 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 8000392:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000394:	e7f9      	b.n	800038a <__tx_ts_wait>

08000396 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000396:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 800039a:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039e:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003a4:	e7d8      	b.n	8000358 <__tx_ts_restore>
 80003a6:	bf00      	nop

080003a8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a8:	4770      	bx	lr
 80003aa:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003ac:	200010b4 	.word	0x200010b4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003b0:	2000101c 	.word	0x2000101c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b4:	20001020 	.word	0x20001020
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b8:	20001620 	.word	0x20001620

080003bc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003bc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003be:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003c2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003ca:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003cc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003d0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003d2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003da:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003dc:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003de:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003e0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003e2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    STR     r3, [r2, #56]                           // Store initial lr
 80003ee:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003f0:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f6:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f8:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003fa:	4770      	bx	lr

080003fc <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003fc:	4922      	ldr	r1, [pc, #136]	; (8000488 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fe:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000400:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000404:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000408:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800040a:	b13a      	cbz	r2, 800041c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800040c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000410:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000412:	b91a      	cbnz	r2, 800041c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000416:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800041a:	6018      	str	r0, [r3, #0]

0800041c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800041c:	491d      	ldr	r1, [pc, #116]	; (8000494 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000420:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000422:	b122      	cbz	r2, 800042e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000424:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000426:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800042a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800042c:	e008      	b.n	8000440 <__tx_timer_done>

0800042e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000434:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000436:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000438:	d101      	bne.n	800043e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800043c:	6818      	ldr	r0, [r3, #0]

0800043e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043e:	6008      	str	r0, [r1, #0]

08000440 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000442:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000444:	b912      	cbnz	r2, 800044c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000446:	4914      	ldr	r1, [pc, #80]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000448:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800044a:	b1c8      	cbz	r0, 8000480 <__tx_timer_nothing_expired>

0800044c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800044c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044e:	4912      	ldr	r1, [pc, #72]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000450:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000452:	b108      	cbz	r0, 8000458 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000454:	f008 f970 	bl	8008738 <_tx_timer_expiration_process>

08000458 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800045a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800045c:	b172      	cbz	r2, 800047c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045e:	f008 f8dd 	bl	800861c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000462:	4810      	ldr	r0, [pc, #64]	; (80004a4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000464:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000466:	b949      	cbnz	r1, 800047c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000468:	480f      	ldr	r0, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800046a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800046c:	4a0f      	ldr	r2, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000470:	480f      	ldr	r0, [pc, #60]	; (80004b0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000476:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000478:	d000      	beq.n	800047c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800047a:	6002      	str	r2, [r0, #0]

0800047c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800047c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000480 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000480:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000484:	4770      	bx	lr
 8000486:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000488:	200010c0 	.word	0x200010c0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800048c:	20001620 	.word	0x20001620
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000490:	200010c4 	.word	0x200010c4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000494:	20001150 	.word	0x20001150
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000498:	20001154 	.word	0x20001154
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800049c:	2000114c 	.word	0x2000114c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004a0:	20001148 	.word	0x20001148
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a4:	200010b4 	.word	0x200010b4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a8:	2000101c 	.word	0x2000101c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004ac:	20001020 	.word	0x20001020
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004b0:	e000ed04 	.word	0xe000ed04

080004b4 <__aeabi_drsub>:
 80004b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004b8:	e002      	b.n	80004c0 <__adddf3>
 80004ba:	bf00      	nop

080004bc <__aeabi_dsub>:
 80004bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004c0 <__adddf3>:
 80004c0:	b530      	push	{r4, r5, lr}
 80004c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ca:	ea94 0f05 	teq	r4, r5
 80004ce:	bf08      	it	eq
 80004d0:	ea90 0f02 	teqeq	r0, r2
 80004d4:	bf1f      	itttt	ne
 80004d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e6:	f000 80e2 	beq.w	80006ae <__adddf3+0x1ee>
 80004ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004f2:	bfb8      	it	lt
 80004f4:	426d      	neglt	r5, r5
 80004f6:	dd0c      	ble.n	8000512 <__adddf3+0x52>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea80 0202 	eor.w	r2, r0, r2
 80004fe:	ea81 0303 	eor.w	r3, r1, r3
 8000502:	ea82 0000 	eor.w	r0, r2, r0
 8000506:	ea83 0101 	eor.w	r1, r3, r1
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	2d36      	cmp	r5, #54	; 0x36
 8000514:	bf88      	it	hi
 8000516:	bd30      	pophi	{r4, r5, pc}
 8000518:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800051c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000520:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000524:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000528:	d002      	beq.n	8000530 <__adddf3+0x70>
 800052a:	4240      	negs	r0, r0
 800052c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000530:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000534:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000538:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800053c:	d002      	beq.n	8000544 <__adddf3+0x84>
 800053e:	4252      	negs	r2, r2
 8000540:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000544:	ea94 0f05 	teq	r4, r5
 8000548:	f000 80a7 	beq.w	800069a <__adddf3+0x1da>
 800054c:	f1a4 0401 	sub.w	r4, r4, #1
 8000550:	f1d5 0e20 	rsbs	lr, r5, #32
 8000554:	db0d      	blt.n	8000572 <__adddf3+0xb2>
 8000556:	fa02 fc0e 	lsl.w	ip, r2, lr
 800055a:	fa22 f205 	lsr.w	r2, r2, r5
 800055e:	1880      	adds	r0, r0, r2
 8000560:	f141 0100 	adc.w	r1, r1, #0
 8000564:	fa03 f20e 	lsl.w	r2, r3, lr
 8000568:	1880      	adds	r0, r0, r2
 800056a:	fa43 f305 	asr.w	r3, r3, r5
 800056e:	4159      	adcs	r1, r3
 8000570:	e00e      	b.n	8000590 <__adddf3+0xd0>
 8000572:	f1a5 0520 	sub.w	r5, r5, #32
 8000576:	f10e 0e20 	add.w	lr, lr, #32
 800057a:	2a01      	cmp	r2, #1
 800057c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000580:	bf28      	it	cs
 8000582:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000586:	fa43 f305 	asr.w	r3, r3, r5
 800058a:	18c0      	adds	r0, r0, r3
 800058c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	d507      	bpl.n	80005a6 <__adddf3+0xe6>
 8000596:	f04f 0e00 	mov.w	lr, #0
 800059a:	f1dc 0c00 	rsbs	ip, ip, #0
 800059e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005aa:	d31b      	bcc.n	80005e4 <__adddf3+0x124>
 80005ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005b0:	d30c      	bcc.n	80005cc <__adddf3+0x10c>
 80005b2:	0849      	lsrs	r1, r1, #1
 80005b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005bc:	f104 0401 	add.w	r4, r4, #1
 80005c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005c8:	f080 809a 	bcs.w	8000700 <__adddf3+0x240>
 80005cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005d0:	bf08      	it	eq
 80005d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005d6:	f150 0000 	adcs.w	r0, r0, #0
 80005da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005de:	ea41 0105 	orr.w	r1, r1, r5
 80005e2:	bd30      	pop	{r4, r5, pc}
 80005e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005e8:	4140      	adcs	r0, r0
 80005ea:	eb41 0101 	adc.w	r1, r1, r1
 80005ee:	3c01      	subs	r4, #1
 80005f0:	bf28      	it	cs
 80005f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005f6:	d2e9      	bcs.n	80005cc <__adddf3+0x10c>
 80005f8:	f091 0f00 	teq	r1, #0
 80005fc:	bf04      	itt	eq
 80005fe:	4601      	moveq	r1, r0
 8000600:	2000      	moveq	r0, #0
 8000602:	fab1 f381 	clz	r3, r1
 8000606:	bf08      	it	eq
 8000608:	3320      	addeq	r3, #32
 800060a:	f1a3 030b 	sub.w	r3, r3, #11
 800060e:	f1b3 0220 	subs.w	r2, r3, #32
 8000612:	da0c      	bge.n	800062e <__adddf3+0x16e>
 8000614:	320c      	adds	r2, #12
 8000616:	dd08      	ble.n	800062a <__adddf3+0x16a>
 8000618:	f102 0c14 	add.w	ip, r2, #20
 800061c:	f1c2 020c 	rsb	r2, r2, #12
 8000620:	fa01 f00c 	lsl.w	r0, r1, ip
 8000624:	fa21 f102 	lsr.w	r1, r1, r2
 8000628:	e00c      	b.n	8000644 <__adddf3+0x184>
 800062a:	f102 0214 	add.w	r2, r2, #20
 800062e:	bfd8      	it	le
 8000630:	f1c2 0c20 	rsble	ip, r2, #32
 8000634:	fa01 f102 	lsl.w	r1, r1, r2
 8000638:	fa20 fc0c 	lsr.w	ip, r0, ip
 800063c:	bfdc      	itt	le
 800063e:	ea41 010c 	orrle.w	r1, r1, ip
 8000642:	4090      	lslle	r0, r2
 8000644:	1ae4      	subs	r4, r4, r3
 8000646:	bfa2      	ittt	ge
 8000648:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800064c:	4329      	orrge	r1, r5
 800064e:	bd30      	popge	{r4, r5, pc}
 8000650:	ea6f 0404 	mvn.w	r4, r4
 8000654:	3c1f      	subs	r4, #31
 8000656:	da1c      	bge.n	8000692 <__adddf3+0x1d2>
 8000658:	340c      	adds	r4, #12
 800065a:	dc0e      	bgt.n	800067a <__adddf3+0x1ba>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0220 	rsb	r2, r4, #32
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f302 	lsl.w	r3, r1, r2
 800066c:	ea40 0003 	orr.w	r0, r0, r3
 8000670:	fa21 f304 	lsr.w	r3, r1, r4
 8000674:	ea45 0103 	orr.w	r1, r5, r3
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	f1c4 040c 	rsb	r4, r4, #12
 800067e:	f1c4 0220 	rsb	r2, r4, #32
 8000682:	fa20 f002 	lsr.w	r0, r0, r2
 8000686:	fa01 f304 	lsl.w	r3, r1, r4
 800068a:	ea40 0003 	orr.w	r0, r0, r3
 800068e:	4629      	mov	r1, r5
 8000690:	bd30      	pop	{r4, r5, pc}
 8000692:	fa21 f004 	lsr.w	r0, r1, r4
 8000696:	4629      	mov	r1, r5
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f094 0f00 	teq	r4, #0
 800069e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006a2:	bf06      	itte	eq
 80006a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006a8:	3401      	addeq	r4, #1
 80006aa:	3d01      	subne	r5, #1
 80006ac:	e74e      	b.n	800054c <__adddf3+0x8c>
 80006ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b2:	bf18      	it	ne
 80006b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006b8:	d029      	beq.n	800070e <__adddf3+0x24e>
 80006ba:	ea94 0f05 	teq	r4, r5
 80006be:	bf08      	it	eq
 80006c0:	ea90 0f02 	teqeq	r0, r2
 80006c4:	d005      	beq.n	80006d2 <__adddf3+0x212>
 80006c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ca:	bf04      	itt	eq
 80006cc:	4619      	moveq	r1, r3
 80006ce:	4610      	moveq	r0, r2
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	ea91 0f03 	teq	r1, r3
 80006d6:	bf1e      	ittt	ne
 80006d8:	2100      	movne	r1, #0
 80006da:	2000      	movne	r0, #0
 80006dc:	bd30      	popne	{r4, r5, pc}
 80006de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006e2:	d105      	bne.n	80006f0 <__adddf3+0x230>
 80006e4:	0040      	lsls	r0, r0, #1
 80006e6:	4149      	adcs	r1, r1
 80006e8:	bf28      	it	cs
 80006ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd30      	pop	{r4, r5, pc}
 80006f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006f4:	bf3c      	itt	cc
 80006f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006fa:	bd30      	popcc	{r4, r5, pc}
 80006fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000700:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf1a      	itte	ne
 8000714:	4619      	movne	r1, r3
 8000716:	4610      	movne	r0, r2
 8000718:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800071c:	bf1c      	itt	ne
 800071e:	460b      	movne	r3, r1
 8000720:	4602      	movne	r2, r0
 8000722:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000726:	bf06      	itte	eq
 8000728:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800072c:	ea91 0f03 	teqeq	r1, r3
 8000730:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000734:	bd30      	pop	{r4, r5, pc}
 8000736:	bf00      	nop

08000738 <__aeabi_ui2d>:
 8000738:	f090 0f00 	teq	r0, #0
 800073c:	bf04      	itt	eq
 800073e:	2100      	moveq	r1, #0
 8000740:	4770      	bxeq	lr
 8000742:	b530      	push	{r4, r5, lr}
 8000744:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000748:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800074c:	f04f 0500 	mov.w	r5, #0
 8000750:	f04f 0100 	mov.w	r1, #0
 8000754:	e750      	b.n	80005f8 <__adddf3+0x138>
 8000756:	bf00      	nop

08000758 <__aeabi_i2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000770:	bf48      	it	mi
 8000772:	4240      	negmi	r0, r0
 8000774:	f04f 0100 	mov.w	r1, #0
 8000778:	e73e      	b.n	80005f8 <__adddf3+0x138>
 800077a:	bf00      	nop

0800077c <__aeabi_f2d>:
 800077c:	0042      	lsls	r2, r0, #1
 800077e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000782:	ea4f 0131 	mov.w	r1, r1, rrx
 8000786:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800078a:	bf1f      	itttt	ne
 800078c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000790:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000794:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000798:	4770      	bxne	lr
 800079a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800079e:	bf08      	it	eq
 80007a0:	4770      	bxeq	lr
 80007a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007a6:	bf04      	itt	eq
 80007a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ac:	4770      	bxeq	lr
 80007ae:	b530      	push	{r4, r5, lr}
 80007b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	e71c      	b.n	80005f8 <__adddf3+0x138>
 80007be:	bf00      	nop

080007c0 <__aeabi_ul2d>:
 80007c0:	ea50 0201 	orrs.w	r2, r0, r1
 80007c4:	bf08      	it	eq
 80007c6:	4770      	bxeq	lr
 80007c8:	b530      	push	{r4, r5, lr}
 80007ca:	f04f 0500 	mov.w	r5, #0
 80007ce:	e00a      	b.n	80007e6 <__aeabi_l2d+0x16>

080007d0 <__aeabi_l2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007de:	d502      	bpl.n	80007e6 <__aeabi_l2d+0x16>
 80007e0:	4240      	negs	r0, r0
 80007e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007f2:	f43f aed8 	beq.w	80005a6 <__adddf3+0xe6>
 80007f6:	f04f 0203 	mov.w	r2, #3
 80007fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007fe:	bf18      	it	ne
 8000800:	3203      	addne	r2, #3
 8000802:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000806:	bf18      	it	ne
 8000808:	3203      	addne	r2, #3
 800080a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800080e:	f1c2 0320 	rsb	r3, r2, #32
 8000812:	fa00 fc03 	lsl.w	ip, r0, r3
 8000816:	fa20 f002 	lsr.w	r0, r0, r2
 800081a:	fa01 fe03 	lsl.w	lr, r1, r3
 800081e:	ea40 000e 	orr.w	r0, r0, lr
 8000822:	fa21 f102 	lsr.w	r1, r1, r2
 8000826:	4414      	add	r4, r2
 8000828:	e6bd      	b.n	80005a6 <__adddf3+0xe6>
 800082a:	bf00      	nop

0800082c <__aeabi_dmul>:
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000832:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000836:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083a:	bf1d      	ittte	ne
 800083c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000840:	ea94 0f0c 	teqne	r4, ip
 8000844:	ea95 0f0c 	teqne	r5, ip
 8000848:	f000 f8de 	bleq	8000a08 <__aeabi_dmul+0x1dc>
 800084c:	442c      	add	r4, r5
 800084e:	ea81 0603 	eor.w	r6, r1, r3
 8000852:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000856:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800085a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800085e:	bf18      	it	ne
 8000860:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000864:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800086c:	d038      	beq.n	80008e0 <__aeabi_dmul+0xb4>
 800086e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000872:	f04f 0500 	mov.w	r5, #0
 8000876:	fbe1 e502 	umlal	lr, r5, r1, r2
 800087a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800087e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000882:	f04f 0600 	mov.w	r6, #0
 8000886:	fbe1 5603 	umlal	r5, r6, r1, r3
 800088a:	f09c 0f00 	teq	ip, #0
 800088e:	bf18      	it	ne
 8000890:	f04e 0e01 	orrne.w	lr, lr, #1
 8000894:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000898:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800089c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008a0:	d204      	bcs.n	80008ac <__aeabi_dmul+0x80>
 80008a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008a6:	416d      	adcs	r5, r5
 80008a8:	eb46 0606 	adc.w	r6, r6, r6
 80008ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c4:	bf88      	it	hi
 80008c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ca:	d81e      	bhi.n	800090a <__aeabi_dmul+0xde>
 80008cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008d0:	bf08      	it	eq
 80008d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008e4:	ea46 0101 	orr.w	r1, r6, r1
 80008e8:	ea40 0002 	orr.w	r0, r0, r2
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	f300 80ab 	bgt.w	8000a64 <__aeabi_dmul+0x238>
 800090e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000912:	bfde      	ittt	le
 8000914:	2000      	movle	r0, #0
 8000916:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800091a:	bd70      	pople	{r4, r5, r6, pc}
 800091c:	f1c4 0400 	rsb	r4, r4, #0
 8000920:	3c20      	subs	r4, #32
 8000922:	da35      	bge.n	8000990 <__aeabi_dmul+0x164>
 8000924:	340c      	adds	r4, #12
 8000926:	dc1b      	bgt.n	8000960 <__aeabi_dmul+0x134>
 8000928:	f104 0414 	add.w	r4, r4, #20
 800092c:	f1c4 0520 	rsb	r5, r4, #32
 8000930:	fa00 f305 	lsl.w	r3, r0, r5
 8000934:	fa20 f004 	lsr.w	r0, r0, r4
 8000938:	fa01 f205 	lsl.w	r2, r1, r5
 800093c:	ea40 0002 	orr.w	r0, r0, r2
 8000940:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000944:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000948:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800094c:	fa21 f604 	lsr.w	r6, r1, r4
 8000950:	eb42 0106 	adc.w	r1, r2, r6
 8000954:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000958:	bf08      	it	eq
 800095a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f1c4 040c 	rsb	r4, r4, #12
 8000964:	f1c4 0520 	rsb	r5, r4, #32
 8000968:	fa00 f304 	lsl.w	r3, r0, r4
 800096c:	fa20 f005 	lsr.w	r0, r0, r5
 8000970:	fa01 f204 	lsl.w	r2, r1, r4
 8000974:	ea40 0002 	orr.w	r0, r0, r2
 8000978:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800097c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000980:	f141 0100 	adc.w	r1, r1, #0
 8000984:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000988:	bf08      	it	eq
 800098a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f1c4 0520 	rsb	r5, r4, #32
 8000994:	fa00 f205 	lsl.w	r2, r0, r5
 8000998:	ea4e 0e02 	orr.w	lr, lr, r2
 800099c:	fa20 f304 	lsr.w	r3, r0, r4
 80009a0:	fa01 f205 	lsl.w	r2, r1, r5
 80009a4:	ea43 0302 	orr.w	r3, r3, r2
 80009a8:	fa21 f004 	lsr.w	r0, r1, r4
 80009ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009b0:	fa21 f204 	lsr.w	r2, r1, r4
 80009b4:	ea20 0002 	bic.w	r0, r0, r2
 80009b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009c0:	bf08      	it	eq
 80009c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f094 0f00 	teq	r4, #0
 80009cc:	d10f      	bne.n	80009ee <__aeabi_dmul+0x1c2>
 80009ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009d2:	0040      	lsls	r0, r0, #1
 80009d4:	eb41 0101 	adc.w	r1, r1, r1
 80009d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009dc:	bf08      	it	eq
 80009de:	3c01      	subeq	r4, #1
 80009e0:	d0f7      	beq.n	80009d2 <__aeabi_dmul+0x1a6>
 80009e2:	ea41 0106 	orr.w	r1, r1, r6
 80009e6:	f095 0f00 	teq	r5, #0
 80009ea:	bf18      	it	ne
 80009ec:	4770      	bxne	lr
 80009ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009f2:	0052      	lsls	r2, r2, #1
 80009f4:	eb43 0303 	adc.w	r3, r3, r3
 80009f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009fc:	bf08      	it	eq
 80009fe:	3d01      	subeq	r5, #1
 8000a00:	d0f7      	beq.n	80009f2 <__aeabi_dmul+0x1c6>
 8000a02:	ea43 0306 	orr.w	r3, r3, r6
 8000a06:	4770      	bx	lr
 8000a08:	ea94 0f0c 	teq	r4, ip
 8000a0c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a10:	bf18      	it	ne
 8000a12:	ea95 0f0c 	teqne	r5, ip
 8000a16:	d00c      	beq.n	8000a32 <__aeabi_dmul+0x206>
 8000a18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a1c:	bf18      	it	ne
 8000a1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a22:	d1d1      	bne.n	80009c8 <__aeabi_dmul+0x19c>
 8000a24:	ea81 0103 	eor.w	r1, r1, r3
 8000a28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	bd70      	pop	{r4, r5, r6, pc}
 8000a32:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a36:	bf06      	itte	eq
 8000a38:	4610      	moveq	r0, r2
 8000a3a:	4619      	moveq	r1, r3
 8000a3c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a40:	d019      	beq.n	8000a76 <__aeabi_dmul+0x24a>
 8000a42:	ea94 0f0c 	teq	r4, ip
 8000a46:	d102      	bne.n	8000a4e <__aeabi_dmul+0x222>
 8000a48:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a4c:	d113      	bne.n	8000a76 <__aeabi_dmul+0x24a>
 8000a4e:	ea95 0f0c 	teq	r5, ip
 8000a52:	d105      	bne.n	8000a60 <__aeabi_dmul+0x234>
 8000a54:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a58:	bf1c      	itt	ne
 8000a5a:	4610      	movne	r0, r2
 8000a5c:	4619      	movne	r1, r3
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dmul+0x24a>
 8000a60:	ea81 0103 	eor.w	r1, r1, r3
 8000a64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a68:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	bd70      	pop	{r4, r5, r6, pc}
 8000a76:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a7a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}

08000a80 <__aeabi_ddiv>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a8e:	bf1d      	ittte	ne
 8000a90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a94:	ea94 0f0c 	teqne	r4, ip
 8000a98:	ea95 0f0c 	teqne	r5, ip
 8000a9c:	f000 f8a7 	bleq	8000bee <__aeabi_ddiv+0x16e>
 8000aa0:	eba4 0405 	sub.w	r4, r4, r5
 8000aa4:	ea81 0e03 	eor.w	lr, r1, r3
 8000aa8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000ab0:	f000 8088 	beq.w	8000bc4 <__aeabi_ddiv+0x144>
 8000ab4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ab8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000abc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000ac0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ac4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ac8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000acc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000ad0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000ad4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000ad8:	429d      	cmp	r5, r3
 8000ada:	bf08      	it	eq
 8000adc:	4296      	cmpeq	r6, r2
 8000ade:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000ae2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000ae6:	d202      	bcs.n	8000aee <__aeabi_ddiv+0x6e>
 8000ae8:	085b      	lsrs	r3, r3, #1
 8000aea:	ea4f 0232 	mov.w	r2, r2, rrx
 8000aee:	1ab6      	subs	r6, r6, r2
 8000af0:	eb65 0503 	sbc.w	r5, r5, r3
 8000af4:	085b      	lsrs	r3, r3, #1
 8000af6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000afa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000afe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b02:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b06:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b0a:	bf22      	ittt	cs
 8000b0c:	1ab6      	subcs	r6, r6, r2
 8000b0e:	4675      	movcs	r5, lr
 8000b10:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b14:	085b      	lsrs	r3, r3, #1
 8000b16:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b1a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b22:	bf22      	ittt	cs
 8000b24:	1ab6      	subcs	r6, r6, r2
 8000b26:	4675      	movcs	r5, lr
 8000b28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b32:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b3a:	bf22      	ittt	cs
 8000b3c:	1ab6      	subcs	r6, r6, r2
 8000b3e:	4675      	movcs	r5, lr
 8000b40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b44:	085b      	lsrs	r3, r3, #1
 8000b46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b4a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b52:	bf22      	ittt	cs
 8000b54:	1ab6      	subcs	r6, r6, r2
 8000b56:	4675      	movcs	r5, lr
 8000b58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b5c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b60:	d018      	beq.n	8000b94 <__aeabi_ddiv+0x114>
 8000b62:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b7e:	d1c0      	bne.n	8000b02 <__aeabi_ddiv+0x82>
 8000b80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b84:	d10b      	bne.n	8000b9e <__aeabi_ddiv+0x11e>
 8000b86:	ea41 0100 	orr.w	r1, r1, r0
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000b92:	e7b6      	b.n	8000b02 <__aeabi_ddiv+0x82>
 8000b94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b98:	bf04      	itt	eq
 8000b9a:	4301      	orreq	r1, r0
 8000b9c:	2000      	moveq	r0, #0
 8000b9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000ba2:	bf88      	it	hi
 8000ba4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000ba8:	f63f aeaf 	bhi.w	800090a <__aeabi_dmul+0xde>
 8000bac:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bb0:	bf04      	itt	eq
 8000bb2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bba:	f150 0000 	adcs.w	r0, r0, #0
 8000bbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bc2:	bd70      	pop	{r4, r5, r6, pc}
 8000bc4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000bc8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000bcc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000bd0:	bfc2      	ittt	gt
 8000bd2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000bd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000bda:	bd70      	popgt	{r4, r5, r6, pc}
 8000bdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be0:	f04f 0e00 	mov.w	lr, #0
 8000be4:	3c01      	subs	r4, #1
 8000be6:	e690      	b.n	800090a <__aeabi_dmul+0xde>
 8000be8:	ea45 0e06 	orr.w	lr, r5, r6
 8000bec:	e68d      	b.n	800090a <__aeabi_dmul+0xde>
 8000bee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bf2:	ea94 0f0c 	teq	r4, ip
 8000bf6:	bf08      	it	eq
 8000bf8:	ea95 0f0c 	teqeq	r5, ip
 8000bfc:	f43f af3b 	beq.w	8000a76 <__aeabi_dmul+0x24a>
 8000c00:	ea94 0f0c 	teq	r4, ip
 8000c04:	d10a      	bne.n	8000c1c <__aeabi_ddiv+0x19c>
 8000c06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c0a:	f47f af34 	bne.w	8000a76 <__aeabi_dmul+0x24a>
 8000c0e:	ea95 0f0c 	teq	r5, ip
 8000c12:	f47f af25 	bne.w	8000a60 <__aeabi_dmul+0x234>
 8000c16:	4610      	mov	r0, r2
 8000c18:	4619      	mov	r1, r3
 8000c1a:	e72c      	b.n	8000a76 <__aeabi_dmul+0x24a>
 8000c1c:	ea95 0f0c 	teq	r5, ip
 8000c20:	d106      	bne.n	8000c30 <__aeabi_ddiv+0x1b0>
 8000c22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c26:	f43f aefd 	beq.w	8000a24 <__aeabi_dmul+0x1f8>
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	e722      	b.n	8000a76 <__aeabi_dmul+0x24a>
 8000c30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c34:	bf18      	it	ne
 8000c36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c3a:	f47f aec5 	bne.w	80009c8 <__aeabi_dmul+0x19c>
 8000c3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c42:	f47f af0d 	bne.w	8000a60 <__aeabi_dmul+0x234>
 8000c46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c4a:	f47f aeeb 	bne.w	8000a24 <__aeabi_dmul+0x1f8>
 8000c4e:	e712      	b.n	8000a76 <__aeabi_dmul+0x24a>

08000c50 <__aeabi_d2uiz>:
 8000c50:	004a      	lsls	r2, r1, #1
 8000c52:	d211      	bcs.n	8000c78 <__aeabi_d2uiz+0x28>
 8000c54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c58:	d211      	bcs.n	8000c7e <__aeabi_d2uiz+0x2e>
 8000c5a:	d50d      	bpl.n	8000c78 <__aeabi_d2uiz+0x28>
 8000c5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c64:	d40e      	bmi.n	8000c84 <__aeabi_d2uiz+0x34>
 8000c66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c72:	fa23 f002 	lsr.w	r0, r3, r2
 8000c76:	4770      	bx	lr
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	4770      	bx	lr
 8000c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c82:	d102      	bne.n	8000c8a <__aeabi_d2uiz+0x3a>
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c88:	4770      	bx	lr
 8000c8a:	f04f 0000 	mov.w	r0, #0
 8000c8e:	4770      	bx	lr

08000c90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c96:	e003      	b.n	8000ca0 <LoopCopyDataInit>

08000c98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c9e:	3104      	adds	r1, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ca4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ca6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ca8:	d3f6      	bcc.n	8000c98 <CopyDataInit>
	ldr	r2, =_sbss
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cac:	e002      	b.n	8000cb4 <LoopFillZerobss>

08000cae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cb0:	f842 3b04 	str.w	r3, [r2], #4

08000cb4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <LoopForever+0x16>)
	cmp	r2, r3
 8000cb6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cb8:	d3f9      	bcc.n	8000cae <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cba:	f000 fc77 	bl	80015ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f008 f903 	bl	8008ec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cc2:	f000 f94f 	bl	8000f64 <main>

08000cc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc6:	e7fe      	b.n	8000cc6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000cc8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000ccc:	08009068 	.word	0x08009068
	ldr	r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cd4:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 8000cd8:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8000cdc:	20001624 	.word	0x20001624

08000ce0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_IRQHandler>
	...

08000ce4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000cf0:	2334      	movs	r3, #52	; 0x34
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <tx_application_define+0x40>)
 8000cfa:	490b      	ldr	r1, [pc, #44]	; (8000d28 <tx_application_define+0x44>)
 8000cfc:	480b      	ldr	r0, [pc, #44]	; (8000d2c <tx_application_define+0x48>)
 8000cfe:	f007 ff51 	bl	8008ba4 <_txe_byte_pool_create>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d109      	bne.n	8000d1c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <tx_application_define+0x48>)
 8000d0a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000d0c:	68b8      	ldr	r0, [r7, #8]
 8000d0e:	f000 f80f 	bl	8000d30 <App_ThreadX_Init>
 8000d12:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d000      	beq.n	8000d1c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000d1a:	e7fe      	b.n	8000d1a <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000040 	.word	0x20000040
 8000d28:	08008f38 	.word	0x08008f38
 8000d2c:	20000440 	.word	0x20000440

08000d30 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af08      	add	r7, sp, #32
 8000d36:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	60bb      	str	r3, [r7, #8]
   /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&blink_blue_led_ptr, "blink_blue_led", blink_blue_led_entry, 0x1234, blink_blue_led_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 8000d40:	23b0      	movs	r3, #176	; 0xb0
 8000d42:	9306      	str	r3, [sp, #24]
 8000d44:	2301      	movs	r3, #1
 8000d46:	9305      	str	r3, [sp, #20]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	9304      	str	r3, [sp, #16]
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	9303      	str	r3, [sp, #12]
 8000d50:	230f      	movs	r3, #15
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <App_ThreadX_Init+0x74>)
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	f241 2334 	movw	r3, #4660	; 0x1234
 8000d62:	4a11      	ldr	r2, [pc, #68]	; (8000da8 <App_ThreadX_Init+0x78>)
 8000d64:	4911      	ldr	r1, [pc, #68]	; (8000dac <App_ThreadX_Init+0x7c>)
 8000d66:	4812      	ldr	r0, [pc, #72]	; (8000db0 <App_ThreadX_Init+0x80>)
 8000d68:	f007 ffbc 	bl	8008ce4 <_txe_thread_create>
  tx_thread_create(&calculate_blink_rate_ptr, "calculate_blink_rate", calculate_blink_rate_entry, 0x1234, calculate_blink_rate_stack, THREAD_STACK_SIZE, 14, 14, 1, TX_AUTO_START);
 8000d6c:	23b0      	movs	r3, #176	; 0xb0
 8000d6e:	9306      	str	r3, [sp, #24]
 8000d70:	2301      	movs	r3, #1
 8000d72:	9305      	str	r3, [sp, #20]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9304      	str	r3, [sp, #16]
 8000d78:	230e      	movs	r3, #14
 8000d7a:	9303      	str	r3, [sp, #12]
 8000d7c:	230e      	movs	r3, #14
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <App_ThreadX_Init+0x84>)
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	f241 2334 	movw	r3, #4660	; 0x1234
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <App_ThreadX_Init+0x88>)
 8000d90:	490a      	ldr	r1, [pc, #40]	; (8000dbc <App_ThreadX_Init+0x8c>)
 8000d92:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <App_ThreadX_Init+0x90>)
 8000d94:	f007 ffa6 	bl	8008ce4 <_txe_thread_create>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000d98:	68fb      	ldr	r3, [r7, #12]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000474 	.word	0x20000474
 8000da8:	08000dd1 	.word	0x08000dd1
 8000dac:	08008f4c 	.word	0x08008f4c
 8000db0:	20000874 	.word	0x20000874
 8000db4:	20000924 	.word	0x20000924
 8000db8:	08000e11 	.word	0x08000e11
 8000dbc:	08008f5c 	.word	0x08008f5c
 8000dc0:	20000d24 	.word	0x20000d24

08000dc4 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000dc8:	f006 ffae 	bl	8007d28 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <blink_blue_led_entry>:

/* USER CODE BEGIN 1 */
VOID blink_blue_led_entry(ULONG initial_input)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	while(1)
	{

		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <blink_blue_led_entry+0x34>)
 8000dde:	f004 f839 	bl	8004e54 <HAL_GPIO_WritePin>
		tx_thread_sleep(set_time);
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <blink_blue_led_entry+0x38>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f007 f946 	bl	8008078 <_tx_thread_sleep>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <blink_blue_led_entry+0x34>)
 8000df2:	f004 f82f 	bl	8004e54 <HAL_GPIO_WritePin>
		tx_thread_sleep(reset_time);
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <blink_blue_led_entry+0x3c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f007 f93c 	bl	8008078 <_tx_thread_sleep>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8000e00:	e7ea      	b.n	8000dd8 <blink_blue_led_entry+0x8>
 8000e02:	bf00      	nop
 8000e04:	42020400 	.word	0x42020400
 8000e08:	2000000c 	.word	0x2000000c
 8000e0c:	20000010 	.word	0x20000010

08000e10 <calculate_blink_rate_entry>:
	}
}

VOID calculate_blink_rate_entry(ULONG initial_input)
{
 8000e10:	b5b0      	push	{r4, r5, r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	while(1)
	{
		blink_rate = (double_t)aADCxConvertedData[0]/(double_t)4095;
 8000e18:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <calculate_blink_rate_entry+0xa0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fc8b 	bl	8000738 <__aeabi_ui2d>
 8000e22:	a321      	add	r3, pc, #132	; (adr r3, 8000ea8 <calculate_blink_rate_entry+0x98>)
 8000e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e28:	f7ff fe2a 	bl	8000a80 <__aeabi_ddiv>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4920      	ldr	r1, [pc, #128]	; (8000eb4 <calculate_blink_rate_entry+0xa4>)
 8000e32:	e9c1 2300 	strd	r2, r3, [r1]
		set_time = blink_rate*blink_period;
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <calculate_blink_rate_entry+0xa8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fc7c 	bl	8000738 <__aeabi_ui2d>
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <calculate_blink_rate_entry+0xa4>)
 8000e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e46:	f7ff fcf1 	bl	800082c <__aeabi_dmul>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4619      	mov	r1, r3
 8000e52:	f7ff fefd 	bl	8000c50 <__aeabi_d2uiz>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <calculate_blink_rate_entry+0xac>)
 8000e5a:	6013      	str	r3, [r2, #0]
		reset_time = (1-blink_rate)*blink_period;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <calculate_blink_rate_entry+0xa4>)
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	4916      	ldr	r1, [pc, #88]	; (8000ec0 <calculate_blink_rate_entry+0xb0>)
 8000e68:	f7ff fb28 	bl	80004bc <__aeabi_dsub>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4614      	mov	r4, r2
 8000e72:	461d      	mov	r5, r3
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <calculate_blink_rate_entry+0xa8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fc5d 	bl	8000738 <__aeabi_ui2d>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	4620      	mov	r0, r4
 8000e84:	4629      	mov	r1, r5
 8000e86:	f7ff fcd1 	bl	800082c <__aeabi_dmul>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	f7ff fedd 	bl	8000c50 <__aeabi_d2uiz>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <calculate_blink_rate_entry+0xb4>)
 8000e9a:	6013      	str	r3, [r2, #0]
		tx_thread_sleep(20);
 8000e9c:	2014      	movs	r0, #20
 8000e9e:	f007 f8eb 	bl	8008078 <_tx_thread_sleep>
		blink_rate = (double_t)aADCxConvertedData[0]/(double_t)4095;
 8000ea2:	e7b9      	b.n	8000e18 <calculate_blink_rate_entry+0x8>
 8000ea4:	f3af 8000 	nop.w
 8000ea8:	00000000 	.word	0x00000000
 8000eac:	40affe00 	.word	0x40affe00
 8000eb0:	20000f14 	.word	0x20000f14
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	2000000c 	.word	0x2000000c
 8000ec0:	3ff00000 	.word	0x3ff00000
 8000ec4:	20000010 	.word	0x20000010

08000ec8 <MX_ADCQueue_Config>:
  * @brief  DMA Linked-list ADCQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_ADCQueue_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b09c      	sub	sp, #112	; 0x70
 8000ecc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8000ed4:	2321      	movs	r3, #33	; 0x21
 8000ed6:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_ADC4;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8000ee8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000eec:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8000ef2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef6:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 8000efc:	2301      	movs	r3, #1
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000f04:	2300      	movs	r3, #0
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	647b      	str	r3, [r7, #68]	; 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8000f10:	2300      	movs	r3, #0
 8000f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  pNodeConfig.SrcAddress = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	663b      	str	r3, [r7, #96]	; 0x60
  pNodeConfig.DstAddress = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	667b      	str	r3, [r7, #100]	; 0x64
  pNodeConfig.DataSize = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Build ADCNode Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &ADCNode);
 8000f20:	463b      	mov	r3, r7
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <MX_ADCQueue_Config+0x94>)
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 ff33 	bl	8003d90 <HAL_DMAEx_List_BuildNode>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f32:	4313      	orrs	r3, r2
 8000f34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert ADCNode to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&ADCQueue, &ADCNode);
 8000f38:	4908      	ldr	r1, [pc, #32]	; (8000f5c <MX_ADCQueue_Config+0x94>)
 8000f3a:	4809      	ldr	r0, [pc, #36]	; (8000f60 <MX_ADCQueue_Config+0x98>)
 8000f3c:	f002 ff54 	bl	8003de8 <HAL_DMAEx_List_InsertNode_Tail>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   return ret;
 8000f4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3770      	adds	r7, #112	; 0x70
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000dd4 	.word	0x20000dd4
 8000f60:	20000df8 	.word	0x20000df8

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f68:	f000 fb58 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6c:	f000 f834 	bl	8000fd8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000f70:	f000 f893 	bl	800109a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f74:	f000 f972 	bl	800125c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000f78:	f000 f912 	bl	80011a0 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 8000f7c:	f000 f95a 	bl	8001234 <MX_ICACHE_Init>
  MX_ADC4_Init();
 8000f80:	f000 f894 	bl	80010ac <MX_ADC4_Init>
  /* USER CODE BEGIN 2 */
  MX_ADCQueue_Config();
 8000f84:	f7ff ffa0 	bl	8000ec8 <MX_ADCQueue_Config>
  __HAL_LINKDMA(&hadc4, DMA_Handle, handle_GPDMA1_Channel10);
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <main+0x64>)
 8000f8a:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <main+0x68>)
 8000f8c:	671a      	str	r2, [r3, #112]	; 0x70
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <main+0x68>)
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <main+0x64>)
 8000f92:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_DMAEx_List_SetCircularMode(&ADCQueue);
 8000f94:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <main+0x6c>)
 8000f96:	f002 ff9f 	bl	8003ed8 <HAL_DMAEx_List_SetCircularMode>
  if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel10, &ADCQueue) != HAL_OK)
 8000f9a:	490d      	ldr	r1, [pc, #52]	; (8000fd0 <main+0x6c>)
 8000f9c:	480b      	ldr	r0, [pc, #44]	; (8000fcc <main+0x68>)
 8000f9e:	f002 fffb 	bl	8003f98 <HAL_DMAEx_List_LinkQ>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <main+0x48>
  {
    Error_Handler();
 8000fa8:	f000 f9e2 	bl	8001370 <Error_Handler>
  }
  if (HAL_ADC_Start_DMA(&hadc4,
 8000fac:	2220      	movs	r2, #32
 8000fae:	4909      	ldr	r1, [pc, #36]	; (8000fd4 <main+0x70>)
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <main+0x64>)
 8000fb2:	f001 f991 	bl	80022d8 <HAL_ADC_Start_DMA>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <main+0x5c>
                        (uint32_t *)aADCxConvertedData,
                        (ADC_CONVERTED_DATA_BUFFER_SIZE)
                       ) != HAL_OK)
  {
    Error_Handler();
 8000fbc:	f000 f9d8 	bl	8001370 <Error_Handler>
  }
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000fc0:	f7ff ff00 	bl	8000dc4 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <main+0x60>
 8000fc6:	bf00      	nop
 8000fc8:	20000e10 	.word	0x20000e10
 8000fcc:	20000e9c 	.word	0x20000e9c
 8000fd0:	20000df8 	.word	0x20000df8
 8000fd4:	20000f14 	.word	0x20000f14

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b09e      	sub	sp, #120	; 0x78
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	2260      	movs	r2, #96	; 0x60
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f007 ff92 	bl	8008f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]
 8000ffa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ffc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001000:	f003 ff70 	bl	8004ee4 <HAL_PWREx_ControlVoltageScaling>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800100a:	f000 f9b1 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800100e:	2312      	movs	r3, #18
 8001010:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001018:	2310      	movs	r3, #16
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800101c:	2301      	movs	r3, #1
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001020:	2310      	movs	r3, #16
 8001022:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001024:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001028:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102a:	2302      	movs	r3, #2
 800102c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800102e:	2301      	movs	r3, #1
 8001030:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001036:	2301      	movs	r3, #1
 8001038:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800103a:	2350      	movs	r3, #80	; 0x50
 800103c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800103e:	2302      	movs	r3, #2
 8001040:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001042:	2302      	movs	r3, #2
 8001044:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001046:	2302      	movs	r3, #2
 8001048:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 800104a:	2300      	movs	r3, #0
 800104c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001052:	f107 0318 	add.w	r3, r7, #24
 8001056:	4618      	mov	r0, r3
 8001058:	f003 fff6 	bl	8005048 <HAL_RCC_OscConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001062:	f000 f985 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001066:	231f      	movs	r3, #31
 8001068:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106a:	2303      	movs	r3, #3
 800106c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	2104      	movs	r1, #4
 8001082:	4618      	mov	r0, r3
 8001084:	f004 feb6 	bl	8005df4 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800108e:	f000 f96f 	bl	8001370 <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3778      	adds	r7, #120	; 0x78
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800109e:	f003 ffa3 	bl	8004fe8 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010a2:	f003 ffc1 	bl	8005028 <HAL_PWREx_DisableUCPDDeadBattery>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010b2:	463b      	mov	r3, r7
 80010b4:	2220      	movs	r2, #32
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f007 ff29 	bl	8008f10 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80010be:	4b35      	ldr	r3, [pc, #212]	; (8001194 <MX_ADC4_Init+0xe8>)
 80010c0:	4a35      	ldr	r2, [pc, #212]	; (8001198 <MX_ADC4_Init+0xec>)
 80010c2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80010c4:	4b33      	ldr	r3, [pc, #204]	; (8001194 <MX_ADC4_Init+0xe8>)
 80010c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010ca:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80010cc:	4b31      	ldr	r3, [pc, #196]	; (8001194 <MX_ADC4_Init+0xe8>)
 80010ce:	2204      	movs	r2, #4
 80010d0:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d2:	4b30      	ldr	r3, [pc, #192]	; (8001194 <MX_ADC4_Init+0xe8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_DISABLE;
 80010d8:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <MX_ADC4_Init+0xe8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010de:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <MX_ADC4_Init+0xe8>)
 80010e0:	2204      	movs	r2, #4
 80010e2:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 80010e4:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <MX_ADC4_Init+0xe8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <MX_ADC4_Init+0xe8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80010f0:	4b28      	ldr	r3, [pc, #160]	; (8001194 <MX_ADC4_Init+0xe8>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.NbrOfConversion = 1;
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <MX_ADC4_Init+0xe8>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <MX_ADC4_Init+0xe8>)
 8001100:	2200      	movs	r2, #0
 8001102:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <MX_ADC4_Init+0xe8>)
 8001108:	2200      	movs	r2, #0
 800110a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <MX_ADC4_Init+0xe8>)
 800110e:	2200      	movs	r2, #0
 8001110:	639a      	str	r2, [r3, #56]	; 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <MX_ADC4_Init+0xe8>)
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_ADC4_Init+0xe8>)
 800111c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001120:	669a      	str	r2, [r3, #104]	; 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_ADC4_Init+0xe8>)
 8001124:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001128:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_39CYCLES_5;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_ADC4_Init+0xe8>)
 800112c:	2205      	movs	r2, #5
 800112e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_ADC4_Init+0xe8>)
 8001132:	2200      	movs	r2, #0
 8001134:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_ADC4_Init+0xe8>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800113e:	4815      	ldr	r0, [pc, #84]	; (8001194 <MX_ADC4_Init+0xe8>)
 8001140:	f000 fdd0 	bl	8001ce4 <HAL_ADC_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 800114a:	f000 f911 	bl	8001370 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_ADC4_Init+0xf0>)
 8001150:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800115a:	2304      	movs	r3, #4
 800115c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	480b      	ldr	r0, [pc, #44]	; (8001194 <MX_ADC4_Init+0xe8>)
 8001168:	f001 f9ca 	bl	8002500 <HAL_ADC_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_ADC4_Init+0xca>
  {
    Error_Handler();
 8001172:	f000 f8fd 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */
  if (HAL_ADCEx_Calibration_Start(&hadc4, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8001176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117a:	2100      	movs	r1, #0
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_ADC4_Init+0xe8>)
 800117e:	f002 f8cb 	bl	8003318 <HAL_ADCEx_Calibration_Start>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC4_Init+0xe0>
  {
    Error_Handler();
 8001188:	f000 f8f2 	bl	8001370 <Error_Handler>
  }
  /* USER CODE END ADC4_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000e10 	.word	0x20000e10
 8001198:	46021000 	.word	0x46021000
 800119c:	10000010 	.word	0x10000010

080011a0 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <MX_GPDMA1_Init+0x88>)
 80011a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ac:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <MX_GPDMA1_Init+0x88>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_GPDMA1_Init+0x88>)
 80011b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel10_IRQn, 0, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2100      	movs	r1, #0
 80011c8:	2052      	movs	r0, #82	; 0x52
 80011ca:	f002 f9c1 	bl	8003550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel10_IRQn);
 80011ce:	2052      	movs	r0, #82	; 0x52
 80011d0:	f002 f9d8 	bl	8003584 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel10.Instance = GPDMA1_Channel10;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_GPDMA1_Init+0x8c>)
 80011d6:	4a16      	ldr	r2, [pc, #88]	; (8001230 <MX_GPDMA1_Init+0x90>)
 80011d8:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel10.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_GPDMA1_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	639a      	str	r2, [r3, #56]	; 0x38
  handle_GPDMA1_Channel10.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_GPDMA1_Init+0x8c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	63da      	str	r2, [r3, #60]	; 0x3c
  handle_GPDMA1_Channel10.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_GPDMA1_Init+0x8c>)
 80011e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
  handle_GPDMA1_Channel10.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_GPDMA1_Init+0x8c>)
 80011f0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80011f4:	645a      	str	r2, [r3, #68]	; 0x44
  handle_GPDMA1_Channel10.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <MX_GPDMA1_Init+0x8c>)
 80011f8:	2281      	movs	r2, #129	; 0x81
 80011fa:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel10) != HAL_OK)
 80011fc:	480b      	ldr	r0, [pc, #44]	; (800122c <MX_GPDMA1_Init+0x8c>)
 80011fe:	f002 fc05 	bl	8003a0c <HAL_DMAEx_List_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_GPDMA1_Init+0x6c>
  {
    Error_Handler();
 8001208:	f000 f8b2 	bl	8001370 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel10, DMA_CHANNEL_NPRIV) != HAL_OK)
 800120c:	2110      	movs	r1, #16
 800120e:	4807      	ldr	r0, [pc, #28]	; (800122c <MX_GPDMA1_Init+0x8c>)
 8001210:	f002 fb9a 	bl	8003948 <HAL_DMA_ConfigChannelAttributes>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_GPDMA1_Init+0x7e>
  {
    Error_Handler();
 800121a:	f000 f8a9 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	46020c00 	.word	0x46020c00
 800122c:	20000e9c 	.word	0x20000e9c
 8001230:	40020550 	.word	0x40020550

08001234 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001238:	2000      	movs	r0, #0
 800123a:	f003 fe23 	bl	8004e84 <HAL_ICACHE_ConfigAssociativityMode>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001244:	f000 f894 	bl	8001370 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001248:	f003 fe3c 	bl	8004ec4 <HAL_ICACHE_Enable>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001252:	f000 f88d 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <MX_GPIO_Init+0xb8>)
 8001274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001278:	4a26      	ldr	r2, [pc, #152]	; (8001314 <MX_GPIO_Init+0xb8>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <MX_GPIO_Init+0xb8>)
 8001284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <MX_GPIO_Init+0xb8>)
 8001292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001296:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <MX_GPIO_Init+0xb8>)
 8001298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800129c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_GPIO_Init+0xb8>)
 80012a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <MX_GPIO_Init+0xb8>)
 80012b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012b4:	4a17      	ldr	r2, [pc, #92]	; (8001314 <MX_GPIO_Init+0xb8>)
 80012b6:	f043 0302 	orr.w	r3, r3, #2
 80012ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_GPIO_Init+0xb8>)
 80012c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2180      	movs	r1, #128	; 0x80
 80012d0:	4811      	ldr	r0, [pc, #68]	; (8001318 <MX_GPIO_Init+0xbc>)
 80012d2:	f003 fdbf 	bl	8004e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_GPIO_Init+0xc0>)
 80012de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4619      	mov	r1, r3
 80012ea:	480d      	ldr	r0, [pc, #52]	; (8001320 <MX_GPIO_Init+0xc4>)
 80012ec:	f003 fbda 	bl	8004aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	4619      	mov	r1, r3
 8001306:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_GPIO_Init+0xbc>)
 8001308:	f003 fbcc 	bl	8004aa4 <HAL_GPIO_Init>

}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	46020c00 	.word	0x46020c00
 8001318:	42020400 	.word	0x42020400
 800131c:	10110000 	.word	0x10110000
 8001320:	42021800 	.word	0x42021800

08001324 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Add code to be performed after DMA half complete */
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Add code to be performed after DMA full complete */
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800135e:	f000 f98b 	bl	8001678 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40001000 	.word	0x40001000

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_MspInit+0x30>)
 8001384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001388:	4a08      	ldr	r2, [pc, #32]	; (80013ac <HAL_MspInit+0x30>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_MspInit+0x30>)
 8001394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
   HAL_PWREx_EnableVddA();
 80013a0:	f003 fe32 	bl	8005008 <HAL_PWREx_EnableVddA>
  /* USER CODE END MspInit 1 */
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	46020c00 	.word	0x46020c00

080013b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0bc      	sub	sp, #240	; 0xf0
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	22c8      	movs	r2, #200	; 0xc8
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f007 fd9d 	bl	8008f10 <memset>
  if(hadc->Instance==ADC4)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a24      	ldr	r2, [pc, #144]	; (800146c <HAL_ADC_MspInit+0xbc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d140      	bne.n	8001462 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80013e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80013ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4618      	mov	r0, r3
 80013fa:	f005 f8e1 	bl	80065c0 <HAL_RCCEx_PeriphCLKConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001404:	f7ff ffb4 	bl	8001370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_ADC_MspInit+0xc0>)
 800140a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140e:	4a18      	ldr	r2, [pc, #96]	; (8001470 <HAL_ADC_MspInit+0xc0>)
 8001410:	f043 0320 	orr.w	r3, r3, #32
 8001414:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_ADC_MspInit+0xc0>)
 800141a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_ADC_MspInit+0xc0>)
 8001428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800142c:	4a10      	ldr	r2, [pc, #64]	; (8001470 <HAL_ADC_MspInit+0xc0>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_ADC_MspInit+0xc0>)
 8001438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
    /**ADC4 GPIO Configuration
    PC3     ------> ADC4_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001444:	2308      	movs	r3, #8
 8001446:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144a:	2303      	movs	r3, #3
 800144c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001456:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <HAL_ADC_MspInit+0xc4>)
 800145e:	f003 fb21 	bl	8004aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	37f0      	adds	r7, #240	; 0xf0
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	46021000 	.word	0x46021000
 8001470:	46020c00 	.word	0x46020c00
 8001474:	42020800 	.word	0x42020800

08001478 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08e      	sub	sp, #56	; 0x38
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001488:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <HAL_InitTick+0xcc>)
 800148a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800148e:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <HAL_InitTick+0xcc>)
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_InitTick+0xcc>)
 800149a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014a6:	f107 0210 	add.w	r2, r7, #16
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 ffc7 	bl	8006444 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014b6:	f004 ffb1 	bl	800641c <HAL_RCC_GetPCLK1Freq>
 80014ba:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014be:	4a22      	ldr	r2, [pc, #136]	; (8001548 <HAL_InitTick+0xd0>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	0c9b      	lsrs	r3, r3, #18
 80014c6:	3b01      	subs	r3, #1
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_InitTick+0xd4>)
 80014cc:	4a20      	ldr	r2, [pc, #128]	; (8001550 <HAL_InitTick+0xd8>)
 80014ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_InitTick+0xd4>)
 80014d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014d8:	4a1c      	ldr	r2, [pc, #112]	; (800154c <HAL_InitTick+0xd4>)
 80014da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_InitTick+0xd4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_InitTick+0xd4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80014ea:	4818      	ldr	r0, [pc, #96]	; (800154c <HAL_InitTick+0xd4>)
 80014ec:	f005 ff58 	bl	80073a0 <HAL_TIM_Base_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80014f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d118      	bne.n	8001530 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014fe:	4813      	ldr	r0, [pc, #76]	; (800154c <HAL_InitTick+0xd4>)
 8001500:	f005 ffb0 	bl	8007464 <HAL_TIM_Base_Start_IT>
 8001504:	4603      	mov	r3, r0
 8001506:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 800150a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10e      	bne.n	8001530 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d808      	bhi.n	800152a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	2031      	movs	r0, #49	; 0x31
 800151e:	f002 f817 	bl	8003550 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001522:	4a0c      	ldr	r2, [pc, #48]	; (8001554 <HAL_InitTick+0xdc>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e002      	b.n	8001530 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001530:	2031      	movs	r0, #49	; 0x31
 8001532:	f002 f827 	bl	8003584 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001536:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800153a:	4618      	mov	r0, r3
 800153c:	3738      	adds	r7, #56	; 0x38
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	46020c00 	.word	0x46020c00
 8001548:	431bde83 	.word	0x431bde83
 800154c:	20000f94 	.word	0x20000f94
 8001550:	40001000 	.word	0x40001000
 8001554:	20000018 	.word	0x20000018

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800155c:	e7fe      	b.n	800155c <NMI_Handler+0x4>

0800155e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <TIM6_IRQHandler+0x10>)
 800158a:	f006 f80b 	bl	80075a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000f94 	.word	0x20000f94

08001598 <GPDMA1_Channel10_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 10 global interrupt.
  */
void GPDMA1_Channel10_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 0 */

  /* USER CODE END GPDMA1_Channel10_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel10);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <GPDMA1_Channel10_IRQHandler+0x10>)
 800159e:	f002 f85f 	bl	8003660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 1 */

  /* USER CODE END GPDMA1_Channel10_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000e9c 	.word	0x20000e9c

080015ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <SystemInit+0x68>)
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b6:	4a17      	ldr	r2, [pc, #92]	; (8001614 <SystemInit+0x68>)
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <SystemInit+0x6c>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <SystemInit+0x6c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <SystemInit+0x6c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <SystemInit+0x6c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <SystemInit+0x6c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <SystemInit+0x6c>)
 80015de:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015e2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015e6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <SystemInit+0x6c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <SystemInit+0x6c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a09      	ldr	r2, [pc, #36]	; (8001618 <SystemInit+0x6c>)
 80015f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <SystemInit+0x6c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SystemInit+0x68>)
 8001602:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001606:	609a      	str	r2, [r3, #8]
  #endif
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00
 8001618:	46020c00 	.word	0x46020c00

0800161c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_Init+0x4c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a10      	ldr	r2, [pc, #64]	; (8001668 <HAL_Init+0x4c>)
 8001626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f001 ff84 	bl	800353a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001632:	f004 fdd1 	bl	80061d8 <HAL_RCC_GetSysClockFreq>
 8001636:	4602      	mov	r2, r0
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_Init+0x50>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	490b      	ldr	r1, [pc, #44]	; (8001670 <HAL_Init+0x54>)
 8001642:	5ccb      	ldrb	r3, [r1, r3]
 8001644:	fa22 f303 	lsr.w	r3, r2, r3
 8001648:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <HAL_Init+0x58>)
 800164a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164c:	200f      	movs	r0, #15
 800164e:	f7ff ff13 	bl	8001478 <HAL_InitTick>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e002      	b.n	8001662 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800165c:	f7ff fe8e 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40022000 	.word	0x40022000
 800166c:	46020c00 	.word	0x46020c00
 8001670:	08008f88 	.word	0x08008f88
 8001674:	20000014 	.word	0x20000014

08001678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_IncTick+0x20>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_IncTick+0x24>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_IncTick+0x24>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	2000001c 	.word	0x2000001c
 800169c:	20000fe0 	.word	0x20000fe0

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000fe0 	.word	0x20000fe0

080016b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <HAL_GetREVID+0x18>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0c1b      	lsrs	r3, r3, #16
 80016c2:	b29b      	uxth	r3, r3
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e0044000 	.word	0xe0044000

080016d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	601a      	str	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	601a      	str	r2, [r3, #0]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3360      	adds	r3, #96	; 0x60
 800174e:	461a      	mov	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	430b      	orrs	r3, r1
 800176c:	431a      	orrs	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001772:	bf00      	nop
 8001774:	371c      	adds	r7, #28
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800177e:	b480      	push	{r7}
 8001780:	b087      	sub	sp, #28
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3360      	adds	r3, #96	; 0x60
 800178e:	461a      	mov	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	431a      	orrs	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	601a      	str	r2, [r3, #0]
}
 80017a8:	bf00      	nop
 80017aa:	371c      	adds	r7, #28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3360      	adds	r3, #96	; 0x60
 80017c4:	461a      	mov	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	431a      	orrs	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	601a      	str	r2, [r3, #0]
}
 80017de:	bf00      	nop
 80017e0:	371c      	adds	r7, #28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	2a00      	cmp	r2, #0
 8001814:	d002      	beq.n	800181c <LL_ADC_SetGainCompensation+0x32>
 8001816:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800181a:	e000      	b.n	800181e <LL_ADC_SetGainCompensation+0x34>
 800181c:	2200      	movs	r2, #0
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2107      	movs	r1, #7
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	401a      	ands	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	431a      	orrs	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4a2b      	ldr	r2, [pc, #172]	; (8001950 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d020      	beq.n	80018ea <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3330      	adds	r3, #48	; 0x30
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	4413      	add	r3, r2
 80018ba:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	211f      	movs	r1, #31
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	401a      	ands	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	0e9b      	lsrs	r3, r3, #26
 80018d4:	f003 011f 	and.w	r1, r3, #31
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	431a      	orrs	r2, r3
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 80018e8:	e02b      	b.n	8001942 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	210f      	movs	r1, #15
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	401a      	ands	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d104      	bne.n	8001912 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	0e9b      	lsrs	r3, r3, #26
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	e010      	b.n	8001934 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 8001928:	2320      	movs	r3, #32
 800192a:	e003      	b.n	8001934 <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fab3 f383 	clz	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	f001 011f 	and.w	r1, r1, #31
 800193a:	408b      	lsls	r3, r1
 800193c:	431a      	orrs	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001942:	bf00      	nop
 8001944:	3724      	adds	r7, #36	; 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	46021000 	.word	0x46021000

08001954 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d107      	bne.n	8001978 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	0e9b      	lsrs	r3, r3, #26
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	2201      	movs	r2, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	e015      	b.n	80019a4 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	60fb      	str	r3, [r7, #12]
  return result;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 800198e:	2320      	movs	r3, #32
 8001990:	e003      	b.n	800199a <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fab3 f383 	clz	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	2201      	movs	r2, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ae:	bf00      	nop
 80019b0:	371c      	adds	r7, #28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	0e9b      	lsrs	r3, r3, #26
 80019cc:	f003 031f 	and.w	r3, r3, #31
 80019d0:	2101      	movs	r1, #1
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	401a      	ands	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b08d      	sub	sp, #52	; 0x34
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4a3c      	ldr	r2, [pc, #240]	; (8001aec <LL_ADC_SetChannelSamplingTime+0x100>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d042      	beq.n	8001a86 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d104      	bne.n	8001a14 <LL_ADC_SetChannelSamplingTime+0x28>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	0e9b      	lsrs	r3, r3, #26
 8001a0e:	f003 021f 	and.w	r2, r3, #31
 8001a12:	e011      	b.n	8001a38 <LL_ADC_SetChannelSamplingTime+0x4c>
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	61fb      	str	r3, [r7, #28]
  return result;
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001a2a:	2320      	movs	r3, #32
 8001a2c:	e003      	b.n	8001a36 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	fab3 f383 	clz	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	0e5b      	lsrs	r3, r3, #25
 8001a3c:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001a40:	460b      	mov	r3, r1
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	1ad2      	subs	r2, r2, r3
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3314      	adds	r3, #20
 8001a56:	461a      	mov	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	0e5b      	lsrs	r3, r3, #25
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	4413      	add	r3, r2
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2107      	movs	r1, #7
 8001a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	401a      	ands	r2, r3
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	601a      	str	r2, [r3, #0]
               ADC4_SAMPLING_TIME_CH_MASK,
               ((1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel)) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)                  \
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001a84:	e02c      	b.n	8001ae0 <LL_ADC_SetChannelSamplingTime+0xf4>
    MODIFY_REG(ADCx->SMPR1,
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d108      	bne.n	8001aa8 <LL_ADC_SetChannelSamplingTime+0xbc>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	0e9b      	lsrs	r3, r3, #26
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	e014      	b.n	8001ad2 <LL_ADC_SetChannelSamplingTime+0xe6>
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa93 f3a3 	rbit	r3, r3
 8001ab2:	613b      	str	r3, [r7, #16]
  return result;
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <LL_ADC_SetChannelSamplingTime+0xd6>
    return 32U;
 8001abe:	2320      	movs	r3, #32
 8001ac0:	e003      	b.n	8001aca <LL_ADC_SetChannelSamplingTime+0xde>
  return __builtin_clz(value);
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	4619      	mov	r1, r3
 8001acc:	2301      	movs	r3, #1
 8001ace:	408b      	lsls	r3, r1
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ada:	431a      	orrs	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	615a      	str	r2, [r3, #20]
}
 8001ae0:	bf00      	nop
 8001ae2:	3734      	adds	r7, #52	; 0x34
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	46021000 	.word	0x46021000

08001af0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0318 	and.w	r3, r3, #24
 8001b12:	4908      	ldr	r1, [pc, #32]	; (8001b34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b14:	40d9      	lsrs	r1, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	400b      	ands	r3, r1
 8001b1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	000fffff 	.word	0x000fffff

08001b38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6093      	str	r3, [r2, #8]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b70:	d101      	bne.n	8001b76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bc0:	d101      	bne.n	8001bc6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001be4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001be8:	f043 0201 	orr.w	r2, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	609a      	str	r2, [r3, #8]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c10:	f043 0202 	orr.w	r2, r3, #2
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <LL_ADC_IsEnabled+0x18>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_ADC_IsEnabled+0x1a>
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d101      	bne.n	8001c62 <LL_ADC_IsDisableOngoing+0x18>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <LL_ADC_IsDisableOngoing+0x1a>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c84:	f043 0204 	orr.w	r2, r3, #4
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d101      	bne.n	8001cb0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d101      	bne.n	8001cd6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e2e3      	b.n	80022cc <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a92      	ldr	r2, [pc, #584]	; (8001f5c <HAL_ADC_Init+0x278>)
 8001d12:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff fb47 	bl	80013b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff11 	bl	8001b5c <LL_ADC_IsDeepPowerDownEnabled>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fef7 	bl	8001b38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff2c 	bl	8001bac <LL_ADC_IsInternalRegulatorEnabled>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d115      	bne.n	8001d86 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff10 	bl	8001b84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d64:	4b7e      	ldr	r3, [pc, #504]	; (8001f60 <HAL_ADC_Init+0x27c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	099b      	lsrs	r3, r3, #6
 8001d6a:	4a7e      	ldr	r2, [pc, #504]	; (8001f64 <HAL_ADC_Init+0x280>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	3301      	adds	r3, #1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d78:	e002      	b.n	8001d80 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f9      	bne.n	8001d7a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff0e 	bl	8001bac <LL_ADC_IsInternalRegulatorEnabled>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10e      	bne.n	8001db4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d9a:	f043 0210 	orr.w	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff6d 	bl	8001c98 <LL_ADC_REG_IsConversionOngoing>
 8001dbe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f040 8274 	bne.w	80022b6 <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f040 8270 	bne.w	80022b6 <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dda:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dde:	f043 0202 	orr.w	r2, r3, #2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff1a 	bl	8001c24 <LL_ADC_IsEnabled>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d14e      	bne.n	8001e94 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a58      	ldr	r2, [pc, #352]	; (8001f5c <HAL_ADC_Init+0x278>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d028      	beq.n	8001e52 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a58      	ldr	r2, [pc, #352]	; (8001f68 <HAL_ADC_Init+0x284>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d109      	bne.n	8001e1e <HAL_ADC_Init+0x13a>
 8001e0a:	4857      	ldr	r0, [pc, #348]	; (8001f68 <HAL_ADC_Init+0x284>)
 8001e0c:	f7ff ff0a 	bl	8001c24 <LL_ADC_IsEnabled>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf0c      	ite	eq
 8001e16:	2301      	moveq	r3, #1
 8001e18:	2300      	movne	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	e008      	b.n	8001e30 <HAL_ADC_Init+0x14c>
 8001e1e:	484f      	ldr	r0, [pc, #316]	; (8001f5c <HAL_ADC_Init+0x278>)
 8001e20:	f7ff ff00 	bl	8001c24 <LL_ADC_IsEnabled>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d02f      	beq.n	8001e94 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a4b      	ldr	r2, [pc, #300]	; (8001f68 <HAL_ADC_Init+0x284>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Init+0x15e>
 8001e3e:	4a4b      	ldr	r2, [pc, #300]	; (8001f6c <HAL_ADC_Init+0x288>)
 8001e40:	e000      	b.n	8001e44 <HAL_ADC_Init+0x160>
 8001e42:	4a4b      	ldr	r2, [pc, #300]	; (8001f70 <HAL_ADC_Init+0x28c>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	f7ff fc42 	bl	80016d4 <LL_ADC_SetCommonClock>
 8001e50:	e020      	b.n	8001e94 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f023 010c 	bic.w	r1, r3, #12
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d005      	beq.n	8001e74 <HAL_ADC_Init+0x190>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	e000      	b.n	8001e76 <HAL_ADC_Init+0x192>
 8001e74:	230c      	movs	r3, #12
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	430b      	orrs	r3, r1
 8001e7c:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001e7e:	4b3c      	ldr	r3, [pc, #240]	; (8001f70 <HAL_ADC_Init+0x28c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e8e:	4938      	ldr	r1, [pc, #224]	; (8001f70 <HAL_ADC_Init+0x28c>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <HAL_ADC_Init+0x278>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d010      	beq.n	8001ec0 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ea4:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001eaa:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001eb0:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001eb8:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	623b      	str	r3, [r7, #32]
 8001ebe:	e030      	b.n	8001f22 <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7f1b      	ldrb	r3, [r3, #28]
 8001ec4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ecc:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ece:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ed4:	2a00      	cmp	r2, #0
 8001ed6:	d002      	beq.n	8001ede <HAL_ADC_Init+0x1fa>
 8001ed8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001edc:	e000      	b.n	8001ee0 <HAL_ADC_Init+0x1fc>
 8001ede:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ee0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ee6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	da04      	bge.n	8001efa <HAL_ADC_Init+0x216>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ef8:	e001      	b.n	8001efe <HAL_ADC_Init+0x21a>
 8001efa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8001efe:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4918      	ldr	r1, [pc, #96]	; (8001f68 <HAL_ADC_Init+0x284>)
 8001f06:	428b      	cmp	r3, r1
 8001f08:	d103      	bne.n	8001f12 <HAL_ADC_Init+0x22e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f10:	e003      	b.n	8001f1a <HAL_ADC_Init+0x236>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f18:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001f1a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f1c:	6a3a      	ldr	r2, [r7, #32]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d12f      	bne.n	8001f8c <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_ADC_Init+0x278>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	045b      	lsls	r3, r3, #17
 8001f3e:	6a3a      	ldr	r2, [r7, #32]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	623b      	str	r3, [r7, #32]
 8001f44:	e022      	b.n	8001f8c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d111      	bne.n	8001f74 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f56:	623b      	str	r3, [r7, #32]
 8001f58:	e018      	b.n	8001f8c <HAL_ADC_Init+0x2a8>
 8001f5a:	bf00      	nop
 8001f5c:	46021000 	.word	0x46021000
 8001f60:	20000014 	.word	0x20000014
 8001f64:	053e2d63 	.word	0x053e2d63
 8001f68:	42028000 	.word	0x42028000
 8001f6c:	42028308 	.word	0x42028308
 8001f70:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f78:	f043 0220 	orr.w	r2, r3, #32
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f84:	f043 0201 	orr.w	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a93      	ldr	r2, [pc, #588]	; (80021e0 <HAL_ADC_Init+0x4fc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d018      	beq.n	8001fc8 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001faa:	4313      	orrs	r3, r2
 8001fac:	6a3a      	ldr	r2, [r7, #32]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	4b8a      	ldr	r3, [pc, #552]	; (80021e4 <HAL_ADC_Init+0x500>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	6a39      	ldr	r1, [r7, #32]
 8001fc2:	430b      	orrs	r3, r1
 8001fc4:	60d3      	str	r3, [r2, #12]
 8001fc6:	e033      	b.n	8002030 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d009      	beq.n	8001fe4 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd4:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	6a3a      	ldr	r2, [r7, #32]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8001fee:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	6a39      	ldr	r1, [r7, #32]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1a      	ldr	r2, [r3, #32]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6a      	ldr	r2, [pc, #424]	; (80021e0 <HAL_ADC_Init+0x4fc>)
 8002036:	4293      	cmp	r3, r2
 8002038:	f000 8093 	beq.w	8002162 <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fe29 	bl	8001c98 <LL_ADC_REG_IsConversionOngoing>
 8002046:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fe36 	bl	8001cbe <LL_ADC_INJ_IsConversionOngoing>
 8002052:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d161      	bne.n	800211e <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d15e      	bne.n	800211e <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7f1b      	ldrb	r3, [r3, #28]
 8002064:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	495f      	ldr	r1, [pc, #380]	; (80021e8 <HAL_ADC_Init+0x504>)
 800206c:	428b      	cmp	r3, r1
 800206e:	d102      	bne.n	8002076 <HAL_ADC_Init+0x392>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	e002      	b.n	800207c <HAL_ADC_Init+0x398>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800207c:	4313      	orrs	r3, r2
 800207e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800208a:	f023 0303 	bic.w	r3, r3, #3
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	6a39      	ldr	r1, [r7, #32]
 8002094:	430b      	orrs	r3, r1
 8002096:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f7ff fb9d 	bl	80017ea <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d11e      	bne.n	80020f8 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020be:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	4b49      	ldr	r3, [pc, #292]	; (80021ec <HAL_ADC_Init+0x508>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80020ce:	0411      	lsls	r1, r2, #16
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020d4:	4311      	orrs	r1, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80020e0:	4311      	orrs	r1, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020e6:	0892      	lsrs	r2, r2, #2
 80020e8:	430a      	orrs	r2, r1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	611a      	str	r2, [r3, #16]
 80020f6:	e007      	b.n	8002108 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d10c      	bne.n	8002140 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f023 010f 	bic.w	r1, r3, #15
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	1e5a      	subs	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
 800213e:	e007      	b.n	8002150 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 020f 	bic.w	r2, r2, #15
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002154:	f023 0303 	bic.w	r3, r3, #3
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002160:	e0b2      	b.n	80022c8 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800216a:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8002170:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8002176:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	4313      	orrs	r3, r2
 800217c:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002184:	2b01      	cmp	r3, #1
 8002186:	d103      	bne.n	8002190 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_ADC_Init+0x50c>)
 8002198:	4013      	ands	r3, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	69f9      	ldr	r1, [r7, #28]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	461a      	mov	r2, r3
 80021ae:	2100      	movs	r1, #0
 80021b0:	f7ff fb3e 	bl	8001830 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	461a      	mov	r2, r3
 80021be:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 80021c2:	f7ff fb35 	bl	8001830 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d112      	bne.n	80021f4 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f062 020f 	orn	r2, r2, #15
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28
 80021de:	e044      	b.n	800226a <HAL_ADC_Init+0x586>
 80021e0:	46021000 	.word	0x46021000
 80021e4:	fff0c013 	.word	0xfff0c013
 80021e8:	42028000 	.word	0x42028000
 80021ec:	fc00f81e 	.word	0xfc00f81e
 80021f0:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021fc:	d135      	bne.n	800226a <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	e00d      	b.n	8002220 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	fa22 f303 	lsr.w	r3, r2, r3
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	2b0f      	cmp	r3, #15
 8002218:	d006      	beq.n	8002228 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	3301      	adds	r3, #1
 800221e:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b07      	cmp	r3, #7
 8002224:	d9ee      	bls.n	8002204 <HAL_ADC_Init+0x520>
 8002226:	e000      	b.n	800222a <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8002228:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d108      	bne.n	8002242 <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f062 020f 	orn	r2, r2, #15
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
 8002240:	e013      	b.n	800226a <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	3b01      	subs	r3, #1
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	f003 031c 	and.w	r3, r3, #28
 8002254:	f06f 020f 	mvn.w	r2, #15
 8002258:	fa02 f103 	lsl.w	r1, r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_ADC_Init+0x5f0>)
 8002272:	4013      	ands	r3, r2
 8002274:	6a3a      	ldr	r2, [r7, #32]
 8002276:	429a      	cmp	r2, r3
 8002278:	d10b      	bne.n	8002292 <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002284:	f023 0303 	bic.w	r3, r3, #3
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002290:	e01a      	b.n	80022c8 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002296:	f023 0312 	bic.w	r3, r3, #18
 800229a:	f043 0210 	orr.w	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022b4:	e008      	b.n	80022c8 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ba:	f043 0210 	orr.w	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 80022c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3728      	adds	r7, #40	; 0x28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	833ffff3 	.word	0x833ffff3

080022d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0a2      	sub	sp, #136	; 0x88
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fcd5 	bl	8001c98 <LL_ADC_REG_IsConversionOngoing>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 80e9 	bne.w	80024c8 <HAL_ADC_Start_DMA+0x1f0>
  {
    __HAL_LOCK(hadc);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_ADC_Start_DMA+0x2c>
 8002300:	2302      	movs	r3, #2
 8002302:	e0e6      	b.n	80024d2 <HAL_ADC_Start_DMA+0x1fa>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fe65 	bl	8002fdc <ADC_Enable>
 8002312:	4603      	mov	r3, r0
 8002314:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002318:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800231c:	2b00      	cmp	r3, #0
 800231e:	f040 80ce 	bne.w	80024be <HAL_ADC_Start_DMA+0x1e6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002326:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	679a      	str	r2, [r3, #120]	; 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a68      	ldr	r2, [pc, #416]	; (80024dc <HAL_ADC_Start_DMA+0x204>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d010      	beq.n	8002362 <HAL_ADC_Start_DMA+0x8a>
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d006      	beq.n	800235a <HAL_ADC_Start_DMA+0x82>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002350:	f023 0206 	bic.w	r2, r3, #6
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	67da      	str	r2, [r3, #124]	; 0x7c
 8002358:	e006      	b.n	8002368 <HAL_ADC_Start_DMA+0x90>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002360:	e002      	b.n	8002368 <HAL_ADC_Start_DMA+0x90>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	67da      	str	r2, [r3, #124]	; 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	4a5c      	ldr	r2, [pc, #368]	; (80024e0 <HAL_ADC_Start_DMA+0x208>)
 800236e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	4a5b      	ldr	r2, [pc, #364]	; (80024e4 <HAL_ADC_Start_DMA+0x20c>)
 8002376:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	4a5a      	ldr	r2, [pc, #360]	; (80024e8 <HAL_ADC_Start_DMA+0x210>)
 800237e:	669a      	str	r2, [r3, #104]	; 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	221c      	movs	r2, #28
 8002386:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0210 	orr.w	r2, r2, #16
 800239e:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a4d      	ldr	r2, [pc, #308]	; (80024dc <HAL_ADC_Start_DMA+0x204>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d107      	bne.n	80023ba <HAL_ADC_Start_DMA+0xe2>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d04f      	beq.n	8002468 <HAL_ADC_Start_DMA+0x190>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d046      	beq.n	8002460 <HAL_ADC_Start_DMA+0x188>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d040      	beq.n	8002460 <HAL_ADC_Start_DMA+0x188>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 fce5 	bl	8003dbc <HAL_DMAEx_List_GetNodeConfig>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_ADC_Start_DMA+0x124>
            {
              return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e06a      	b.n	80024d2 <HAL_ADC_Start_DMA+0x1fa>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80023fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d104      	bne.n	800240c <HAL_ADC_Start_DMA+0x134>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800240a:	e00a      	b.n	8002422 <HAL_ADC_Start_DMA+0x14a>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240e:	2b01      	cmp	r3, #1
 8002410:	d104      	bne.n	800241c <HAL_ADC_Start_DMA+0x144>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800241a:	e002      	b.n	8002422 <HAL_ADC_Start_DMA+0x14a>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800242e:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f103 0240 	add.w	r2, r3, #64	; 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002452:	4618      	mov	r0, r3
 8002454:	f001 fc08 	bl	8003c68 <HAL_DMAEx_List_Start_IT>
 8002458:	4603      	mov	r3, r0
 800245a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800245e:	e028      	b.n	80024b2 <HAL_ADC_Start_DMA+0x1da>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002466:	e024      	b.n	80024b2 <HAL_ADC_Start_DMA+0x1da>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d104      	bne.n	800247c <HAL_ADC_Start_DMA+0x1a4>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800247a:	e00c      	b.n	8002496 <HAL_ADC_Start_DMA+0x1be>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d104      	bne.n	8002490 <HAL_ADC_Start_DMA+0x1b8>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800248e:	e002      	b.n	8002496 <HAL_ADC_Start_DMA+0x1be>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3340      	adds	r3, #64	; 0x40
 80024a0:	4619      	mov	r1, r3
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024a8:	f001 f87a 	bl	80035a0 <HAL_DMA_Start_IT>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fbda 	bl	8001c70 <LL_ADC_REG_StartConversion>
 80024bc:	e007      	b.n	80024ce <HAL_ADC_Start_DMA+0x1f6>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80024c6:	e002      	b.n	80024ce <HAL_ADC_Start_DMA+0x1f6>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024c8:	2302      	movs	r3, #2
 80024ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  }

  return tmp_hal_status;
 80024ce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3788      	adds	r7, #136	; 0x88
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	46021000 	.word	0x46021000
 80024e0:	08003173 	.word	0x08003173
 80024e4:	0800324b 	.word	0x0800324b
 80024e8:	08003267 	.word	0x08003267

080024ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b0a4      	sub	sp, #144	; 0x90
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a94      	ldr	r2, [pc, #592]	; (800276c <HAL_ADC_ConfigChannel+0x26c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d103      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800252c:	2b01      	cmp	r3, #1
 800252e:	d102      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x36>
 8002530:	2302      	movs	r3, #2
 8002532:	f000 bd4b 	b.w	8002fcc <HAL_ADC_ConfigChannel+0xacc>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fba8 	bl	8001c98 <LL_ADC_REG_IsConversionOngoing>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 852b 	bne.w	8002fa6 <HAL_ADC_ConfigChannel+0xaa6>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a85      	ldr	r2, [pc, #532]	; (800276c <HAL_ADC_ConfigChannel+0x26c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	f000 827f 	beq.w	8002a5a <HAL_ADC_ConfigChannel+0x55a>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d108      	bne.n	800257a <HAL_ADC_ConfigChannel+0x7a>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2201      	movs	r2, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	e016      	b.n	80025a8 <HAL_ADC_ConfigChannel+0xa8>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800258c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x96>
    return 32U;
 8002592:	2320      	movs	r3, #32
 8002594:	e003      	b.n	800259e <HAL_ADC_ConfigChannel+0x9e>
  return __builtin_clz(value);
 8002596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2201      	movs	r2, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	69d1      	ldr	r1, [r2, #28]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	430b      	orrs	r3, r1
 80025b4:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f7ff f966 	bl	8001894 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fb63 	bl	8001c98 <LL_ADC_REG_IsConversionOngoing>
 80025d2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fb6f 	bl	8001cbe <LL_ADC_INJ_IsConversionOngoing>
 80025e0:	67f8      	str	r0, [r7, #124]	; 0x7c
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 8087 	bne.w	80026fa <HAL_ADC_ConfigChannel+0x1fa>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 8083 	bne.w	80026fa <HAL_ADC_ConfigChannel+0x1fa>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6819      	ldr	r1, [r3, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	461a      	mov	r2, r3
 8002602:	f7ff f9f3 	bl	80019ec <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	67bb      	str	r3, [r7, #120]	; 0x78

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b04      	cmp	r3, #4
 8002624:	d021      	beq.n	800266a <HAL_ADC_ConfigChannel+0x16a>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6919      	ldr	r1, [r3, #16]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002634:	f7ff f882 	bl	800173c <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6919      	ldr	r1, [r3, #16]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	461a      	mov	r2, r3
 8002646:	f7ff f89a 	bl	800177e <LL_ADC_SetOffsetSign>
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,                  \
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6919      	ldr	r1, [r3, #16]
                                           (pConfig->OffsetSignedSaturation == ENABLE)             \
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	7e5b      	ldrb	r3, [r3, #25]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,                  \
 8002656:	2b01      	cmp	r3, #1
 8002658:	d102      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x160>
 800265a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800265e:	e000      	b.n	8002662 <HAL_ADC_ConfigChannel+0x162>
 8002660:	2300      	movs	r3, #0
 8002662:	461a      	mov	r2, r3
 8002664:	f7ff f8a6 	bl	80017b4 <LL_ADC_SetOffsetSignedSaturation>
 8002668:	e047      	b.n	80026fa <HAL_ADC_ConfigChannel+0x1fa>
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
            If this is the case, offset OFRx is disabled since
            pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002670:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	06db      	lsls	r3, r3, #27
 800267a:	429a      	cmp	r2, r3
 800267c:	d107      	bne.n	800268e <HAL_ADC_ConfigChannel+0x18e>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSAT);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800268c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002694:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	06db      	lsls	r3, r3, #27
 800269e:	429a      	cmp	r2, r3
 80026a0:	d107      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x1b2>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSAT);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80026b0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	06db      	lsls	r3, r3, #27
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d107      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x1d6>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSAT);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80026d4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026dc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	06db      	lsls	r3, r3, #27
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d107      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x1fa>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSAT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80026f8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fa90 	bl	8001c24 <LL_ADC_IsEnabled>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 845a 	bne.w	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	6819      	ldr	r1, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	461a      	mov	r2, r3
 800271a:	f7ff f9e9 	bl	8001af0 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002726:	f040 80d9 	bne.w	80028dc <HAL_ADC_ConfigChannel+0x3dc>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10b      	bne.n	800274e <HAL_ADC_ConfigChannel+0x24e>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	0e9b      	lsrs	r3, r3, #26
 800273c:	3301      	adds	r3, #1
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2b09      	cmp	r3, #9
 8002744:	bf94      	ite	ls
 8002746:	2301      	movls	r3, #1
 8002748:	2300      	movhi	r3, #0
 800274a:	b2db      	uxtb	r3, r3
 800274c:	e01c      	b.n	8002788 <HAL_ADC_ConfigChannel+0x288>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800275c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800275e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002762:	2b00      	cmp	r3, #0
 8002764:	d104      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x270>
    return 32U;
 8002766:	2320      	movs	r3, #32
 8002768:	e006      	b.n	8002778 <HAL_ADC_ConfigChannel+0x278>
 800276a:	bf00      	nop
 800276c:	46021000 	.word	0x46021000
  return __builtin_clz(value);
 8002770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	3301      	adds	r3, #1
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2b09      	cmp	r3, #9
 8002780:	bf94      	ite	ls
 8002782:	2301      	movls	r3, #1
 8002784:	2300      	movhi	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d04d      	beq.n	8002828 <HAL_ADC_ConfigChannel+0x328>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x2a8>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0e9b      	lsrs	r3, r3, #26
 800279e:	3301      	adds	r3, #1
 80027a0:	069b      	lsls	r3, r3, #26
 80027a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027a6:	e015      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x2d4>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80027b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80027ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	e003      	b.n	80027cc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80027c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	069b      	lsls	r3, r3, #26
 80027d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d109      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x2f4>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0e9b      	lsrs	r3, r3, #26
 80027e6:	3301      	adds	r3, #1
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2101      	movs	r1, #1
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	e017      	b.n	8002824 <HAL_ADC_ConfigChannel+0x324>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002804:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e003      	b.n	8002818 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	3301      	adds	r3, #1
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	2101      	movs	r1, #1
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	4313      	orrs	r3, r2
 8002826:	e04e      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x3c6>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d107      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x344>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0e9b      	lsrs	r3, r3, #26
 800283a:	3301      	adds	r3, #1
 800283c:	069b      	lsls	r3, r3, #26
 800283e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002842:	e015      	b.n	8002870 <HAL_ADC_ConfigChannel+0x370>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002854:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800285c:	2320      	movs	r3, #32
 800285e:	e003      	b.n	8002868 <HAL_ADC_ConfigChannel+0x368>
  return __builtin_clz(value);
 8002860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	3301      	adds	r3, #1
 800286a:	069b      	lsls	r3, r3, #26
 800286c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d109      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x390>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0e9b      	lsrs	r3, r3, #26
 8002882:	3301      	adds	r3, #1
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2101      	movs	r1, #1
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	e017      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x3c0>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80028a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x3ac>
    return 32U;
 80028a8:	2320      	movs	r3, #32
 80028aa:	e003      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x3b4>
  return __builtin_clz(value);
 80028ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	3301      	adds	r3, #1
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80028d8:	f7ff f888 	bl	80019ec <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f280 836d 	bge.w	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a98      	ldr	r2, [pc, #608]	; (8002b4c <HAL_ADC_ConfigChannel+0x64c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x3f4>
 80028f0:	4b97      	ldr	r3, [pc, #604]	; (8002b50 <HAL_ADC_ConfigChannel+0x650>)
 80028f2:	e000      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x3f6>
 80028f4:	4b97      	ldr	r3, [pc, #604]	; (8002b54 <HAL_ADC_ConfigChannel+0x654>)
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe ff12 	bl	8001720 <LL_ADC_GetCommonPathInternalCh>
 80028fc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a91      	ldr	r2, [pc, #580]	; (8002b4c <HAL_ADC_ConfigChannel+0x64c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d109      	bne.n	800291e <HAL_ADC_ConfigChannel+0x41e>
 800290a:	4890      	ldr	r0, [pc, #576]	; (8002b4c <HAL_ADC_ConfigChannel+0x64c>)
 800290c:	f7ff f98a 	bl	8001c24 <LL_ADC_IsEnabled>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf0c      	ite	eq
 8002916:	2301      	moveq	r3, #1
 8002918:	2300      	movne	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	e008      	b.n	8002930 <HAL_ADC_ConfigChannel+0x430>
 800291e:	488e      	ldr	r0, [pc, #568]	; (8002b58 <HAL_ADC_ConfigChannel+0x658>)
 8002920:	f7ff f980 	bl	8001c24 <LL_ADC_IsEnabled>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf0c      	ite	eq
 800292a:	2301      	moveq	r3, #1
 800292c:	2300      	movne	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8088 	beq.w	8002a46 <HAL_ADC_ConfigChannel+0x546>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a88      	ldr	r2, [pc, #544]	; (8002b5c <HAL_ADC_ConfigChannel+0x65c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d132      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x4a6>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d12c      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x4a6>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a7e      	ldr	r2, [pc, #504]	; (8002b4c <HAL_ADC_ConfigChannel+0x64c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d005      	beq.n	8002962 <HAL_ADC_ConfigChannel+0x462>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a7f      	ldr	r2, [pc, #508]	; (8002b58 <HAL_ADC_ConfigChannel+0x658>)
 800295c:	4293      	cmp	r3, r2
 800295e:	f040 832c 	bne.w	8002fba <HAL_ADC_ConfigChannel+0xaba>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a79      	ldr	r2, [pc, #484]	; (8002b4c <HAL_ADC_ConfigChannel+0x64c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d101      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x470>
 800296c:	4a78      	ldr	r2, [pc, #480]	; (8002b50 <HAL_ADC_ConfigChannel+0x650>)
 800296e:	e000      	b.n	8002972 <HAL_ADC_ConfigChannel+0x472>
 8002970:	4a78      	ldr	r2, [pc, #480]	; (8002b54 <HAL_ADC_ConfigChannel+0x654>)
 8002972:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002976:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800297a:	4619      	mov	r1, r3
 800297c:	4610      	mov	r0, r2
 800297e:	f7fe febc 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002982:	4b77      	ldr	r3, [pc, #476]	; (8002b60 <HAL_ADC_ConfigChannel+0x660>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	099b      	lsrs	r3, r3, #6
 8002988:	4a76      	ldr	r2, [pc, #472]	; (8002b64 <HAL_ADC_ConfigChannel+0x664>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	3301      	adds	r3, #1
 8002992:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8002994:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002996:	e002      	b.n	800299e <HAL_ADC_ConfigChannel+0x49e>
                {
                  wait_loop_index--;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	3b01      	subs	r3, #1
 800299c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f9      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x498>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029a4:	e309      	b.n	8002fba <HAL_ADC_ConfigChannel+0xaba>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a6f      	ldr	r2, [pc, #444]	; (8002b68 <HAL_ADC_ConfigChannel+0x668>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d121      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x4f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d11b      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x4f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a62      	ldr	r2, [pc, #392]	; (8002b4c <HAL_ADC_ConfigChannel+0x64c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d005      	beq.n	80029d2 <HAL_ADC_ConfigChannel+0x4d2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a63      	ldr	r2, [pc, #396]	; (8002b58 <HAL_ADC_ConfigChannel+0x658>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	f040 82f6 	bne.w	8002fbe <HAL_ADC_ConfigChannel+0xabe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a5d      	ldr	r2, [pc, #372]	; (8002b4c <HAL_ADC_ConfigChannel+0x64c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x4e0>
 80029dc:	4a5c      	ldr	r2, [pc, #368]	; (8002b50 <HAL_ADC_ConfigChannel+0x650>)
 80029de:	e000      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x4e2>
 80029e0:	4a5c      	ldr	r2, [pc, #368]	; (8002b54 <HAL_ADC_ConfigChannel+0x654>)
 80029e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ea:	4619      	mov	r1, r3
 80029ec:	4610      	mov	r0, r2
 80029ee:	f7fe fe84 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029f2:	e2e4      	b.n	8002fbe <HAL_ADC_ConfigChannel+0xabe>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a5c      	ldr	r2, [pc, #368]	; (8002b6c <HAL_ADC_ConfigChannel+0x66c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	f040 82e0 	bne.w	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f040 82d9 	bne.w	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a4e      	ldr	r2, [pc, #312]	; (8002b4c <HAL_ADC_ConfigChannel+0x64c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d005      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0x524>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a4e      	ldr	r2, [pc, #312]	; (8002b58 <HAL_ADC_ConfigChannel+0x658>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	f040 82ce 	bne.w	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a48      	ldr	r2, [pc, #288]	; (8002b4c <HAL_ADC_ConfigChannel+0x64c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x532>
 8002a2e:	4a48      	ldr	r2, [pc, #288]	; (8002b50 <HAL_ADC_ConfigChannel+0x650>)
 8002a30:	e000      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x534>
 8002a32:	4a48      	ldr	r2, [pc, #288]	; (8002b54 <HAL_ADC_ConfigChannel+0x654>)
 8002a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f7fe fe5b 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
 8002a44:	e2bc      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8002a58:	e2b2      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
      }
    }
    else
    {
      /* Remap Internal Channels for Cut1 vs Cut2 (or 4M) */
      tmp_channel = pConfig->Channel;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#if !defined (ADC2)
      if (HAL_GetREVID() == REV_ID_A) /* STM32U5 silicon Rev.A */
 8002a62:	f7fe fe29 	bl	80016b8 <HAL_GetREVID>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6c:	d130      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x5d0>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a3f      	ldr	r2, [pc, #252]	; (8002b70 <HAL_ADC_ConfigChannel+0x670>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d103      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x580>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 8002a78:	4b3e      	ldr	r3, [pc, #248]	; (8002b74 <HAL_ADC_ConfigChannel+0x674>)
 8002a7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a7e:	e027      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a3c      	ldr	r2, [pc, #240]	; (8002b78 <HAL_ADC_ConfigChannel+0x678>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d103      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x592>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 8002a8a:	4b3c      	ldr	r3, [pc, #240]	; (8002b7c <HAL_ADC_ConfigChannel+0x67c>)
 8002a8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a90:	e01e      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a3a      	ldr	r2, [pc, #232]	; (8002b80 <HAL_ADC_ConfigChannel+0x680>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d103      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x5a4>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 8002a9c:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <HAL_ADC_ConfigChannel+0x684>)
 8002a9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002aa2:	e015      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a37      	ldr	r2, [pc, #220]	; (8002b88 <HAL_ADC_ConfigChannel+0x688>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d103      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x5b6>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 8002aae:	4b37      	ldr	r3, [pc, #220]	; (8002b8c <HAL_ADC_ConfigChannel+0x68c>)
 8002ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ab4:	e00c      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a35      	ldr	r2, [pc, #212]	; (8002b90 <HAL_ADC_ConfigChannel+0x690>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d103      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x5c8>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8002ac0:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_ADC_ConfigChannel+0x688>)
 8002ac2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ac6:	e003      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	f000 81a3 	beq.w	8002e20 <HAL_ADC_ConfigChannel+0x920>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ae2:	d004      	beq.n	8002aee <HAL_ADC_ConfigChannel+0x5ee>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <HAL_ADC_ConfigChannel+0x694>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d107      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x5fe>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe ff2c 	bl	8001954 <LL_ADC_REG_SetSequencerChAdd>
 8002afc:	e0c2      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x784>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	210f      	movs	r1, #15
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	401a      	ands	r2, r3
 8002b16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x62e>
 8002b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b26:	0e9b      	lsrs	r3, r3, #26
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	e038      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x6a0>
 8002b2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d128      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x698>
    return 32U;
 8002b46:	2320      	movs	r3, #32
 8002b48:	e02a      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x6a0>
 8002b4a:	bf00      	nop
 8002b4c:	42028000 	.word	0x42028000
 8002b50:	42028308 	.word	0x42028308
 8002b54:	46021308 	.word	0x46021308
 8002b58:	46021000 	.word	0x46021000
 8002b5c:	ce080000 	.word	0xce080000
 8002b60:	20000014 	.word	0x20000014
 8002b64:	053e2d63 	.word	0x053e2d63
 8002b68:	ca040000 	.word	0xca040000
 8002b6c:	80000001 	.word	0x80000001
 8002b70:	b6002000 	.word	0xb6002000
 8002b74:	da400000 	.word	0xda400000
 8002b78:	ba004000 	.word	0xba004000
 8002b7c:	de800000 	.word	0xde800000
 8002b80:	b2001000 	.word	0xb2001000
 8002b84:	81000001 	.word	0x81000001
 8002b88:	d6200000 	.word	0xd6200000
 8002b8c:	d2100000 	.word	0xd2100000
 8002b90:	d7200000 	.word	0xd7200000
 8002b94:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	6839      	ldr	r1, [r7, #0]
 8002ba2:	6849      	ldr	r1, [r1, #4]
 8002ba4:	f001 011f 	and.w	r1, r1, #31
 8002ba8:	408b      	lsls	r3, r1
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d860      	bhi.n	8002c84 <HAL_ADC_ConfigChannel+0x784>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002bc2:	f7fe fd79 	bl	80016b8 <HAL_GetREVID>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bcc:	d851      	bhi.n	8002c72 <HAL_ADC_ConfigChannel+0x772>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8002bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bd2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10a      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x6f0>
 8002bda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bde:	0e9b      	lsrs	r3, r3, #26
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	2b13      	cmp	r3, #19
 8002be6:	bf8c      	ite	hi
 8002be8:	2301      	movhi	r3, #1
 8002bea:	2300      	movls	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e016      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x71e>
 8002bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	61bb      	str	r3, [r7, #24]
  return result;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x70c>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e003      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x714>
  return __builtin_clz(value);
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b13      	cmp	r3, #19
 8002c16:	bf8c      	ite	hi
 8002c18:	2301      	movhi	r3, #1
 8002c1a:	2300      	movls	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d027      	beq.n	8002c72 <HAL_ADC_ConfigChannel+0x772>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 8002c22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x742>
 8002c2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c32:	0e9b      	lsrs	r3, r3, #26
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	3b09      	subs	r3, #9
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	e015      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x76e>
 8002c42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	60fb      	str	r3, [r7, #12]
  return result;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x75e>
    return 32U;
 8002c5a:	2320      	movs	r3, #32
 8002c5c:	e003      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x766>
  return __builtin_clz(value);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	3b09      	subs	r3, #9
 8002c68:	2201      	movs	r2, #1
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f7fe fe08 	bl	8001894 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002c92:	f7fe feab 	bl	80019ec <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f280 8190 	bge.w	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a97      	ldr	r2, [pc, #604]	; (8002f04 <HAL_ADC_ConfigChannel+0xa04>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x7ae>
 8002caa:	4b97      	ldr	r3, [pc, #604]	; (8002f08 <HAL_ADC_ConfigChannel+0xa08>)
 8002cac:	e000      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x7b0>
 8002cae:	4b97      	ldr	r3, [pc, #604]	; (8002f0c <HAL_ADC_ConfigChannel+0xa0c>)
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe fd35 	bl	8001720 <LL_ADC_GetCommonPathInternalCh>
 8002cb6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a94      	ldr	r2, [pc, #592]	; (8002f10 <HAL_ADC_ConfigChannel+0xa10>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d126      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x812>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d120      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x812>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a8b      	ldr	r2, [pc, #556]	; (8002f04 <HAL_ADC_ConfigChannel+0xa04>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x7de>
 8002cda:	4a8b      	ldr	r2, [pc, #556]	; (8002f08 <HAL_ADC_ConfigChannel+0xa08>)
 8002cdc:	e000      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x7e0>
 8002cde:	4a8b      	ldr	r2, [pc, #556]	; (8002f0c <HAL_ADC_ConfigChannel+0xa0c>)
 8002ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ce4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f7fe fd05 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002cf0:	4b88      	ldr	r3, [pc, #544]	; (8002f14 <HAL_ADC_ConfigChannel+0xa14>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	4a88      	ldr	r2, [pc, #544]	; (8002f18 <HAL_ADC_ConfigChannel+0xa18>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	099b      	lsrs	r3, r3, #6
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002d02:	e002      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x80a>
            {
              wait_loop_index--;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f9      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x804>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002d10:	e067      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x8e2>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a81      	ldr	r2, [pc, #516]	; (8002f1c <HAL_ADC_ConfigChannel+0xa1c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d116      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x84a>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d110      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x84a>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a75      	ldr	r2, [pc, #468]	; (8002f04 <HAL_ADC_ConfigChannel+0xa04>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x836>
 8002d32:	4a75      	ldr	r2, [pc, #468]	; (8002f08 <HAL_ADC_ConfigChannel+0xa08>)
 8002d34:	e000      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x838>
 8002d36:	4a75      	ldr	r2, [pc, #468]	; (8002f0c <HAL_ADC_ConfigChannel+0xa0c>)
 8002d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f7fe fcd9 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
 8002d48:	e04b      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x8e2>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a74      	ldr	r2, [pc, #464]	; (8002f20 <HAL_ADC_ConfigChannel+0xa20>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d116      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x882>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d110      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x882>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a67      	ldr	r2, [pc, #412]	; (8002f04 <HAL_ADC_ConfigChannel+0xa04>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x86e>
 8002d6a:	4a67      	ldr	r2, [pc, #412]	; (8002f08 <HAL_ADC_ConfigChannel+0xa08>)
 8002d6c:	e000      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x870>
 8002d6e:	4a67      	ldr	r2, [pc, #412]	; (8002f0c <HAL_ADC_ConfigChannel+0xa0c>)
 8002d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	f7fe fcbd 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
 8002d80:	e02f      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x8e2>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a67      	ldr	r2, [pc, #412]	; (8002f24 <HAL_ADC_ConfigChannel+0xa24>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d12a      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x8e2>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d124      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x8e2>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a62      	ldr	r2, [pc, #392]	; (8002f28 <HAL_ADC_ConfigChannel+0xa28>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d11f      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x8e2>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a57      	ldr	r2, [pc, #348]	; (8002f04 <HAL_ADC_ConfigChannel+0xa04>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x8b0>
 8002dac:	4a56      	ldr	r2, [pc, #344]	; (8002f08 <HAL_ADC_ConfigChannel+0xa08>)
 8002dae:	e000      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x8b2>
 8002db0:	4a56      	ldr	r2, [pc, #344]	; (8002f0c <HAL_ADC_ConfigChannel+0xa0c>)
 8002db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f7fe fc9c 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002dc2:	f7fe fc79 	bl	80016b8 <HAL_GetREVID>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dcc:	d809      	bhi.n	8002de2 <HAL_ADC_ConfigChannel+0x8e2>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8002de2:	f7fe fc69 	bl	80016b8 <HAL_GetREVID>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dec:	f040 80e8 	bne.w	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a4d      	ldr	r2, [pc, #308]	; (8002f2c <HAL_ADC_ConfigChannel+0xa2c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	f040 80e2 	bne.w	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f040 80db 	bne.w	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002e1e:	e0cf      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e28:	d004      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x934>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002e2e:	4a40      	ldr	r2, [pc, #256]	; (8002f30 <HAL_ADC_ConfigChannel+0xa30>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d106      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x942>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe fdbc 	bl	80019ba <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f280 80ba 	bge.w	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a2c      	ldr	r2, [pc, #176]	; (8002f04 <HAL_ADC_ConfigChannel+0xa04>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x95a>
 8002e56:	4b2c      	ldr	r3, [pc, #176]	; (8002f08 <HAL_ADC_ConfigChannel+0xa08>)
 8002e58:	e000      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x95c>
 8002e5a:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <HAL_ADC_ConfigChannel+0xa0c>)
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe fc5f 	bl	8001720 <LL_ADC_GetCommonPathInternalCh>
 8002e62:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a32      	ldr	r2, [pc, #200]	; (8002f34 <HAL_ADC_ConfigChannel+0xa34>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d110      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a23      	ldr	r2, [pc, #140]	; (8002f04 <HAL_ADC_ConfigChannel+0xa04>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x97e>
 8002e7a:	4a23      	ldr	r2, [pc, #140]	; (8002f08 <HAL_ADC_ConfigChannel+0xa08>)
 8002e7c:	e000      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x980>
 8002e7e:	4a23      	ldr	r2, [pc, #140]	; (8002f0c <HAL_ADC_ConfigChannel+0xa0c>)
 8002e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f7fe fc35 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
 8002e90:	e06d      	b.n	8002f6e <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a28      	ldr	r2, [pc, #160]	; (8002f38 <HAL_ADC_ConfigChannel+0xa38>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d110      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x9be>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_ADC_ConfigChannel+0xa04>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x9aa>
 8002ea6:	4a18      	ldr	r2, [pc, #96]	; (8002f08 <HAL_ADC_ConfigChannel+0xa08>)
 8002ea8:	e000      	b.n	8002eac <HAL_ADC_ConfigChannel+0x9ac>
 8002eaa:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <HAL_ADC_ConfigChannel+0xa0c>)
 8002eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f7fe fc1f 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
 8002ebc:	e057      	b.n	8002f6e <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_ADC_ConfigChannel+0xa20>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d110      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x9ea>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	; (8002f04 <HAL_ADC_ConfigChannel+0xa04>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x9d6>
 8002ed2:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <HAL_ADC_ConfigChannel+0xa08>)
 8002ed4:	e000      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x9d8>
 8002ed6:	4a0d      	ldr	r2, [pc, #52]	; (8002f0c <HAL_ADC_ConfigChannel+0xa0c>)
 8002ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002edc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	f7fe fc09 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
 8002ee8:	e041      	b.n	8002f6e <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a0d      	ldr	r2, [pc, #52]	; (8002f24 <HAL_ADC_ConfigChannel+0xa24>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d13c      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0xa6e>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a02      	ldr	r2, [pc, #8]	; (8002f04 <HAL_ADC_ConfigChannel+0xa04>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d11e      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0xa3c>
 8002efe:	4a02      	ldr	r2, [pc, #8]	; (8002f08 <HAL_ADC_ConfigChannel+0xa08>)
 8002f00:	e01d      	b.n	8002f3e <HAL_ADC_ConfigChannel+0xa3e>
 8002f02:	bf00      	nop
 8002f04:	42028000 	.word	0x42028000
 8002f08:	42028308 	.word	0x42028308
 8002f0c:	46021308 	.word	0x46021308
 8002f10:	b6002000 	.word	0xb6002000
 8002f14:	20000014 	.word	0x20000014
 8002f18:	053e2d63 	.word	0x053e2d63
 8002f1c:	ba004000 	.word	0xba004000
 8002f20:	80000001 	.word	0x80000001
 8002f24:	b2001000 	.word	0xb2001000
 8002f28:	46021000 	.word	0x46021000
 8002f2c:	d7200000 	.word	0xd7200000
 8002f30:	80000010 	.word	0x80000010
 8002f34:	ce080000 	.word	0xce080000
 8002f38:	ca040000 	.word	0xca040000
 8002f3c:	4a25      	ldr	r2, [pc, #148]	; (8002fd4 <HAL_ADC_ConfigChannel+0xad4>)
 8002f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f42:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f7fe fbd6 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002f4e:	f7fe fbb3 	bl	80016b8 <HAL_GetREVID>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f58:	d809      	bhi.n	8002f6e <HAL_ADC_ConfigChannel+0xa6e>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8002f6e:	f7fe fba3 	bl	80016b8 <HAL_GetREVID>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f78:	d122      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a16      	ldr	r2, [pc, #88]	; (8002fd8 <HAL_ADC_ConfigChannel+0xad8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d11d      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d117      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0201 	orr.w	r2, r2, #1
 8002fa0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002fa4:	e00c      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002faa:	f043 0220 	orr.w	r2, r3, #32
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8002fb8:	e002      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0xac0>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fbe:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8002fc8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3790      	adds	r7, #144	; 0x90
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	46021308 	.word	0x46021308
 8002fd8:	d7200000 	.word	0xd7200000

08002fdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fe1b 	bl	8001c24 <LL_ADC_IsEnabled>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d156      	bne.n	80030a2 <ADC_Enable+0xc6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <ADC_Enable+0xd0>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003006:	f043 0210 	orr.w	r2, r3, #16
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e042      	b.n	80030a4 <ADC_Enable+0xc8>
    }

    LL_ADC_Enable(hadc->Instance);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fdd6 	bl	8001bd4 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <ADC_Enable+0x5e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <ADC_Enable+0xd4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d033      	beq.n	80030a2 <ADC_Enable+0xc6>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800303a:	f7fe fb31 	bl	80016a0 <HAL_GetTick>
 800303e:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003040:	e028      	b.n	8003094 <ADC_Enable+0xb8>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fdec 	bl	8001c24 <LL_ADC_IsEnabled>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d104      	bne.n	800305c <ADC_Enable+0x80>
          {
            LL_ADC_Enable(hadc->Instance);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fdbc 	bl	8001bd4 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800305c:	f7fe fb20 	bl	80016a0 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d914      	bls.n	8003094 <ADC_Enable+0xb8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d00d      	beq.n	8003094 <ADC_Enable+0xb8>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800307c:	f043 0210 	orr.w	r2, r3, #16
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003088:	f043 0201 	orr.w	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e007      	b.n	80030a4 <ADC_Enable+0xc8>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d1cf      	bne.n	8003042 <ADC_Enable+0x66>
        }
      }
    }
  }

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	8000003f 	.word	0x8000003f
 80030b0:	46021000 	.word	0x46021000

080030b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe fdc2 	bl	8001c4a <LL_ADC_IsDisableOngoing>
 80030c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe fda9 	bl	8001c24 <LL_ADC_IsEnabled>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d047      	beq.n	8003168 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d144      	bne.n	8003168 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 030d 	and.w	r3, r3, #13
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d10c      	bne.n	8003106 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fe fd83 	bl	8001bfc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2203      	movs	r2, #3
 80030fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030fe:	f7fe facf 	bl	80016a0 <HAL_GetTick>
 8003102:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003104:	e029      	b.n	800315a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800310a:	f043 0210 	orr.w	r2, r3, #16
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	679a      	str	r2, [r3, #120]	; 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003116:	f043 0201 	orr.w	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	67da      	str	r2, [r3, #124]	; 0x7c
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e023      	b.n	800316a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003122:	f7fe fabd 	bl	80016a0 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d914      	bls.n	800315a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00d      	beq.n	800315a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003142:	f043 0210 	orr.w	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800314e:	f043 0201 	orr.w	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e007      	b.n	800316a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1dc      	bne.n	8003122 <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003188:	2b00      	cmp	r3, #0
 800318a:	d14b      	bne.n	8003224 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003190:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	679a      	str	r2, [r3, #120]	; 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d021      	beq.n	80031ea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe fb5f 	bl	800186e <LL_ADC_REG_IsTriggerSourceSWStart>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d032      	beq.n	800321c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d12b      	bne.n	800321c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	679a      	str	r2, [r3, #120]	; 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d11f      	bne.n	800321c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e0:	f043 0201 	orr.w	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	679a      	str	r2, [r3, #120]	; 0x78
 80031e8:	e018      	b.n	800321c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d111      	bne.n	800321c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	679a      	str	r2, [r3, #120]	; 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d105      	bne.n	800321c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003214:	f043 0201 	orr.w	r2, r3, #1
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f7fe f88b 	bl	8001338 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003222:	e00e      	b.n	8003242 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f7ff f95b 	bl	80024ec <HAL_ADC_ErrorCallback>
}
 8003236:	e004      	b.n	8003242 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003256:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7fe f863 	bl	8001324 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003272:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003278:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003284:	f043 0204 	orr.w	r2, r3, #4
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff f92d 	bl	80024ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <LL_ADC_StartCalibration>:
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <LL_ADC_StartCalibration+0x4c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00c      	beq.n	80032c8 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <LL_ADC_StartCalibration+0x50>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80032bc:	4313      	orrs	r3, r2
 80032be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	609a      	str	r2, [r3, #8]
}
 80032c6:	e009      	b.n	80032dc <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	609a      	str	r2, [r3, #8]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	46021000 	.word	0x46021000
 80032ec:	7ffeffc0 	.word	0x7ffeffc0

080032f0 <LL_ADC_IsCalibrationOnGoing>:
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003304:	d101      	bne.n	800330a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_ADCEx_Calibration_Start+0x1e>
 8003332:	2302      	movs	r3, #2
 8003334:	e04d      	b.n	80033d2 <HAL_ADCEx_Calibration_Start+0xba>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f7ff feb8 	bl	80030b4 <ADC_Disable>
 8003344:	4603      	mov	r3, r0
 8003346:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003348:	7dfb      	ldrb	r3, [r7, #23]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d136      	bne.n	80033bc <HAL_ADCEx_Calibration_Start+0xa4>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003352:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003356:	f023 0302 	bic.w	r3, r3, #2
 800335a:	f043 0202 	orr.w	r2, r3, #2
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	679a      	str	r2, [r3, #120]	; 0x78

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff97 	bl	800329c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800336e:	e014      	b.n	800339a <HAL_ADCEx_Calibration_Start+0x82>
    {
      wait_loop_index++;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	3301      	adds	r3, #1
 8003374:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4a18      	ldr	r2, [pc, #96]	; (80033dc <HAL_ADCEx_Calibration_Start+0xc4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d90d      	bls.n	800339a <HAL_ADCEx_Calibration_Start+0x82>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003382:	f023 0312 	bic.w	r3, r3, #18
 8003386:	f043 0210 	orr.w	r2, r3, #16
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(hadc);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e01b      	b.n	80033d2 <HAL_ADCEx_Calibration_Start+0xba>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ffa6 	bl	80032f0 <LL_ADC_IsCalibrationOnGoing>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e2      	bne.n	8003370 <HAL_ADCEx_Calibration_Start+0x58>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	679a      	str	r2, [r3, #120]	; 0x78
 80033ba:	e005      	b.n	80033c8 <HAL_ADCEx_Calibration_Start+0xb0>
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c0:	f043 0210 	orr.w	r2, r3, #16
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	555a95ff 	.word	0x555a95ff

080033e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <__NVIC_SetPriorityGrouping+0x44>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033fc:	4013      	ands	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800340c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003412:	4a04      	ldr	r2, [pc, #16]	; (8003424 <__NVIC_SetPriorityGrouping+0x44>)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	60d3      	str	r3, [r2, #12]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <__NVIC_GetPriorityGrouping+0x18>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	0a1b      	lsrs	r3, r3, #8
 8003432:	f003 0307 	and.w	r3, r3, #7
}
 8003436:	4618      	mov	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	2b00      	cmp	r3, #0
 8003454:	db0b      	blt.n	800346e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	f003 021f 	and.w	r2, r3, #31
 800345c:	4907      	ldr	r1, [pc, #28]	; (800347c <__NVIC_EnableIRQ+0x38>)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2001      	movs	r0, #1
 8003466:	fa00 f202 	lsl.w	r2, r0, r2
 800346a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000e100 	.word	0xe000e100

08003480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	6039      	str	r1, [r7, #0]
 800348a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003490:	2b00      	cmp	r3, #0
 8003492:	db0a      	blt.n	80034aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	b2da      	uxtb	r2, r3
 8003498:	490c      	ldr	r1, [pc, #48]	; (80034cc <__NVIC_SetPriority+0x4c>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	0112      	lsls	r2, r2, #4
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	440b      	add	r3, r1
 80034a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a8:	e00a      	b.n	80034c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4908      	ldr	r1, [pc, #32]	; (80034d0 <__NVIC_SetPriority+0x50>)
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	3b04      	subs	r3, #4
 80034b8:	0112      	lsls	r2, r2, #4
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	440b      	add	r3, r1
 80034be:	761a      	strb	r2, [r3, #24]
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000e100 	.word	0xe000e100
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b089      	sub	sp, #36	; 0x24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f1c3 0307 	rsb	r3, r3, #7
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	bf28      	it	cs
 80034f2:	2304      	movcs	r3, #4
 80034f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3304      	adds	r3, #4
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d902      	bls.n	8003504 <NVIC_EncodePriority+0x30>
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3b03      	subs	r3, #3
 8003502:	e000      	b.n	8003506 <NVIC_EncodePriority+0x32>
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43da      	mvns	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	401a      	ands	r2, r3
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800351c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	43d9      	mvns	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	4313      	orrs	r3, r2
         );
}
 800352e:	4618      	mov	r0, r3
 8003530:	3724      	adds	r7, #36	; 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff ff4c 	bl	80033e0 <__NVIC_SetPriorityGrouping>
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800355e:	f7ff ff63 	bl	8003428 <__NVIC_GetPriorityGrouping>
 8003562:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	6978      	ldr	r0, [r7, #20]
 800356a:	f7ff ffb3 	bl	80034d4 <NVIC_EncodePriority>
 800356e:	4602      	mov	r2, r0
 8003570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff ff82 	bl	8003480 <__NVIC_SetPriority>
}
 800357c:	bf00      	nop
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800358e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff ff56 	bl	8003444 <__NVIC_EnableIRQ>
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e04f      	b.n	8003658 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_DMA_Start_IT+0x26>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e048      	b.n	8003658 <HAL_DMA_Start_IT+0xb8>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d136      	bne.n	8003648 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2202      	movs	r2, #2
 80035de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f9e6 	bl	80039c0 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8003602:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003632:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	e007      	b.n	8003658 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2240      	movs	r2, #64	; 0x40
 800364c:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003670:	f023 030f 	bic.w	r3, r3, #15
 8003674:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367e:	3b50      	subs	r3, #80	; 0x50
 8003680:	09db      	lsrs	r3, r3, #7
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	2201      	movs	r2, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 8150 	beq.w	800393c <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d011      	beq.n	80036ce <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036c0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c6:	f043 0201 	orr.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d011      	beq.n	8003700 <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f043 0202 	orr.w	r2, r3, #2
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d011      	beq.n	8003732 <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003724:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	f043 0204 	orr.w	r2, r3, #4
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d011      	beq.n	8003764 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003756:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375c:	f043 0208 	orr.w	r2, r3, #8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376e:	2b00      	cmp	r3, #0
 8003770:	d013      	beq.n	800379a <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00c      	beq.n	800379a <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003788:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d055      	beq.n	8003854 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d04e      	beq.n	8003854 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037be:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d137      	bne.n	800383c <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037da:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0202 	orr.w	r2, r2, #2
 80037ea:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d004      	beq.n	8003804 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2203      	movs	r2, #3
 80037fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003802:	e003      	b.n	800380c <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381c:	2201      	movs	r2, #1
 800381e:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8087 	beq.w	8003940 <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
        }

        return;
 800383a:	e081      	b.n	8003940 <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2205      	movs	r2, #5
 8003840:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d039      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d032      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b00      	cmp	r3, #0
 800387a:	d012      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d116      	bne.n	80038b4 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388c:	2b00      	cmp	r3, #0
 800388e:	d111      	bne.n	80038b4 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389c:	2201      	movs	r2, #1
 800389e:	731a      	strb	r2, [r3, #12]
 80038a0:	e008      	b.n	80038b4 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80038bc:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d031      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0202 	orr.w	r2, r2, #2
 80038ec:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2203      	movs	r2, #3
 8003900:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003904:	e003      	b.n	800390e <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391e:	2201      	movs	r2, #1
 8003920:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4798      	blx	r3
 800393a:	e002      	b.n	8003942 <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800393c:	bf00      	nop
 800393e:	e000      	b.n	8003942 <HAL_DMA_IRQHandler+0x2e2>
        return;
 8003940:	bf00      	nop
    }
  }
}
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e02b      	b.n	80039b4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003964:	f023 030f 	bic.w	r3, r3, #15
 8003968:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003972:	3b50      	subs	r3, #80	; 0x50
 8003974:	09db      	lsrs	r3, r3, #7
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2201      	movs	r2, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b00      	cmp	r3, #0
 800398a:	d012      	beq.n	80039b2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f003 0311 	and.w	r3, r3, #17
 8003992:	2b11      	cmp	r3, #17
 8003994:	d106      	bne.n	80039a4 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	431a      	orrs	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	e006      	b.n	80039b2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	43db      	mvns	r3, r3
 80039ac:	401a      	ands	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	b291      	uxth	r1, r2
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	430b      	orrs	r3, r1
 80039e2:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80039ec:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003a14:	f7fd fe44 	bl	80016a0 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0dc      	b.n	8003bde <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a6f      	ldr	r2, [pc, #444]	; (8003be8 <HAL_DMAEx_List_Init+0x1dc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	f000 809f 	beq.w	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a6d      	ldr	r2, [pc, #436]	; (8003bec <HAL_DMAEx_List_Init+0x1e0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	f000 8099 	beq.w	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a6b      	ldr	r2, [pc, #428]	; (8003bf0 <HAL_DMAEx_List_Init+0x1e4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	f000 8093 	beq.w	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a69      	ldr	r2, [pc, #420]	; (8003bf4 <HAL_DMAEx_List_Init+0x1e8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	f000 808d 	beq.w	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a67      	ldr	r2, [pc, #412]	; (8003bf8 <HAL_DMAEx_List_Init+0x1ec>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	f000 8087 	beq.w	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a65      	ldr	r2, [pc, #404]	; (8003bfc <HAL_DMAEx_List_Init+0x1f0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	f000 8081 	beq.w	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a63      	ldr	r2, [pc, #396]	; (8003c00 <HAL_DMAEx_List_Init+0x1f4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d07b      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a62      	ldr	r2, [pc, #392]	; (8003c04 <HAL_DMAEx_List_Init+0x1f8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d076      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a60      	ldr	r2, [pc, #384]	; (8003c08 <HAL_DMAEx_List_Init+0x1fc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d071      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a5f      	ldr	r2, [pc, #380]	; (8003c0c <HAL_DMAEx_List_Init+0x200>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d06c      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a5d      	ldr	r2, [pc, #372]	; (8003c10 <HAL_DMAEx_List_Init+0x204>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d067      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a5c      	ldr	r2, [pc, #368]	; (8003c14 <HAL_DMAEx_List_Init+0x208>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d062      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a5a      	ldr	r2, [pc, #360]	; (8003c18 <HAL_DMAEx_List_Init+0x20c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d05d      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a59      	ldr	r2, [pc, #356]	; (8003c1c <HAL_DMAEx_List_Init+0x210>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d058      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a57      	ldr	r2, [pc, #348]	; (8003c20 <HAL_DMAEx_List_Init+0x214>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d053      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a56      	ldr	r2, [pc, #344]	; (8003c24 <HAL_DMAEx_List_Init+0x218>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d04e      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a54      	ldr	r2, [pc, #336]	; (8003c28 <HAL_DMAEx_List_Init+0x21c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d049      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a53      	ldr	r2, [pc, #332]	; (8003c2c <HAL_DMAEx_List_Init+0x220>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d044      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a51      	ldr	r2, [pc, #324]	; (8003c30 <HAL_DMAEx_List_Init+0x224>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d03f      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a50      	ldr	r2, [pc, #320]	; (8003c34 <HAL_DMAEx_List_Init+0x228>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d03a      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a4e      	ldr	r2, [pc, #312]	; (8003c38 <HAL_DMAEx_List_Init+0x22c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d035      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a4d      	ldr	r2, [pc, #308]	; (8003c3c <HAL_DMAEx_List_Init+0x230>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d030      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a4b      	ldr	r2, [pc, #300]	; (8003c40 <HAL_DMAEx_List_Init+0x234>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d02b      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a4a      	ldr	r2, [pc, #296]	; (8003c44 <HAL_DMAEx_List_Init+0x238>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d026      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a48      	ldr	r2, [pc, #288]	; (8003c48 <HAL_DMAEx_List_Init+0x23c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d021      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a47      	ldr	r2, [pc, #284]	; (8003c4c <HAL_DMAEx_List_Init+0x240>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d01c      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a45      	ldr	r2, [pc, #276]	; (8003c50 <HAL_DMAEx_List_Init+0x244>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d017      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a44      	ldr	r2, [pc, #272]	; (8003c54 <HAL_DMAEx_List_Init+0x248>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d012      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a42      	ldr	r2, [pc, #264]	; (8003c58 <HAL_DMAEx_List_Init+0x24c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00d      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a41      	ldr	r2, [pc, #260]	; (8003c5c <HAL_DMAEx_List_Init+0x250>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d008      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a3f      	ldr	r2, [pc, #252]	; (8003c60 <HAL_DMAEx_List_Init+0x254>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d003      	beq.n	8003b6e <HAL_DMAEx_List_Init+0x162>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a3e      	ldr	r2, [pc, #248]	; (8003c64 <HAL_DMAEx_List_Init+0x258>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0206 	orr.w	r2, r2, #6
 8003b8e:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003b90:	e00f      	b.n	8003bb2 <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003b92:	f7fd fd85 	bl	80016a0 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b05      	cmp	r3, #5
 8003b9e:	d908      	bls.n	8003bb2 <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2210      	movs	r2, #16
 8003ba4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2203      	movs	r2, #3
 8003baa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e015      	b.n	8003bde <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e8      	bne.n	8003b92 <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fa7f 	bl	80040c4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40020050 	.word	0x40020050
 8003bec:	50020050 	.word	0x50020050
 8003bf0:	400200d0 	.word	0x400200d0
 8003bf4:	500200d0 	.word	0x500200d0
 8003bf8:	40020150 	.word	0x40020150
 8003bfc:	50020150 	.word	0x50020150
 8003c00:	400201d0 	.word	0x400201d0
 8003c04:	500201d0 	.word	0x500201d0
 8003c08:	40020250 	.word	0x40020250
 8003c0c:	50020250 	.word	0x50020250
 8003c10:	400202d0 	.word	0x400202d0
 8003c14:	500202d0 	.word	0x500202d0
 8003c18:	40020350 	.word	0x40020350
 8003c1c:	50020350 	.word	0x50020350
 8003c20:	400203d0 	.word	0x400203d0
 8003c24:	500203d0 	.word	0x500203d0
 8003c28:	40020450 	.word	0x40020450
 8003c2c:	50020450 	.word	0x50020450
 8003c30:	400204d0 	.word	0x400204d0
 8003c34:	500204d0 	.word	0x500204d0
 8003c38:	40020550 	.word	0x40020550
 8003c3c:	50020550 	.word	0x50020550
 8003c40:	400205d0 	.word	0x400205d0
 8003c44:	500205d0 	.word	0x500205d0
 8003c48:	40020650 	.word	0x40020650
 8003c4c:	50020650 	.word	0x50020650
 8003c50:	400206d0 	.word	0x400206d0
 8003c54:	500206d0 	.word	0x500206d0
 8003c58:	40020750 	.word	0x40020750
 8003c5c:	50020750 	.word	0x50020750
 8003c60:	400207d0 	.word	0x400207d0
 8003c64:	500207d0 	.word	0x500207d0

08003c68 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_DMAEx_List_Start_IT+0x16>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e082      	b.n	8003d88 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003c88:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c94:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d005      	beq.n	8003ca8 <HAL_DMAEx_List_Start_IT+0x40>
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d16a      	bne.n	8003d78 <HAL_DMAEx_List_Start_IT+0x110>
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d067      	beq.n	8003d78 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d157      	bne.n	8003d64 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_DMAEx_List_Start_IT+0x5a>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e062      	b.n	8003d88 <HAL_DMAEx_List_Start_IT+0x120>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8003cf6:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0e:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d26:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f107 010c 	add.w	r1, r7, #12
 8003d32:	2200      	movs	r2, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fde5 	bl	8004904 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4619      	mov	r1, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	0c0b      	lsrs	r3, r1, #16
 8003d48:	041b      	lsls	r3, r3, #16
 8003d4a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003d58:	4013      	ands	r3, r2
 8003d5a:	68f9      	ldr	r1, [r7, #12]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	430b      	orrs	r3, r1
 8003d62:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	e007      	b.n	8003d88 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2240      	movs	r2, #64	; 0x40
 8003d7c:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_DMAEx_List_BuildNode>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_DMAEx_List_BuildNode+0x16>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e004      	b.n	8003db4 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8003daa:	6839      	ldr	r1, [r7, #0]
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fae1 	bl	8004374 <DMA_List_BuildNode>

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_DMAEx_List_GetNodeConfig+0x16>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e004      	b.n	8003de0 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8003dd6:	6839      	ldr	r1, [r7, #0]
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fc1d 	bl	8004618 <DMA_List_GetNodeConfig>

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e066      	b.n	8003ed0 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d104      	bne.n	8003e14 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e05d      	b.n	8003ed0 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	6839      	ldr	r1, [r7, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fd05 	bl	800482c <DMA_List_CheckNodesBaseAddresses>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2205      	movs	r2, #5
 8003e2c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e04e      	b.n	8003ed0 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2200      	movs	r2, #0
 8003e38:	6839      	ldr	r1, [r7, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fd26 	bl	800488c <DMA_List_CheckNodesTypes>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2204      	movs	r2, #4
 8003e4a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e03f      	b.n	8003ed0 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d103      	bne.n	8003e60 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	e02b      	b.n	8003eb8 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003e60:	f107 0220 	add.w	r2, r7, #32
 8003e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e68:	4619      	mov	r1, r3
 8003e6a:	6838      	ldr	r0, [r7, #0]
 8003e6c:	f000 fd4a 	bl	8004904 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fd71 	bl	8004964 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003e94:	4013      	ands	r3, r2
 8003e96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e98:	6a3a      	ldr	r2, [r7, #32]
 8003e9a:	4319      	orrs	r1, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4610      	mov	r0, r2
 8003eb0:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003eb2:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8003eb4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3728      	adds	r7, #40	; 0x28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e052      	b.n	8003f90 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e049      	b.n	8003f90 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00c      	beq.n	8003f1e <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d101      	bne.n	8003f14 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e03d      	b.n	8003f90 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2204      	movs	r2, #4
 8003f18:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e038      	b.n	8003f90 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d104      	bne.n	8003f30 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2204      	movs	r2, #4
 8003f2a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e02f      	b.n	8003f90 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f107 0220 	add.w	r2, r7, #32
 8003f44:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fcdb 	bl	8004904 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003f52:	f107 030c 	add.w	r3, r7, #12
 8003f56:	461a      	mov	r2, r3
 8003f58:	2100      	movs	r1, #0
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fd02 	bl	8004964 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4610      	mov	r0, r2
 8003f72:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003f74:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003f76:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3728      	adds	r7, #40	; 0x28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_DMAEx_List_LinkQ+0x16>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e072      	b.n	8004098 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003fb8:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d002      	beq.n	8003fcc <HAL_DMAEx_List_LinkQ+0x34>
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	2b05      	cmp	r3, #5
 8003fca:	d108      	bne.n	8003fde <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2240      	movs	r2, #64	; 0x40
 8003fd0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e05c      	b.n	8004098 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	7b1b      	ldrb	r3, [r3, #12]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d104      	bne.n	8003ff2 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2201      	movs	r2, #1
 8003fec:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e052      	b.n	8004098 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a2b      	ldr	r2, [pc, #172]	; (80040a4 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d022      	beq.n	8004042 <HAL_DMAEx_List_LinkQ+0xaa>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a29      	ldr	r2, [pc, #164]	; (80040a8 <HAL_DMAEx_List_LinkQ+0x110>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01d      	beq.n	8004042 <HAL_DMAEx_List_LinkQ+0xaa>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a28      	ldr	r2, [pc, #160]	; (80040ac <HAL_DMAEx_List_LinkQ+0x114>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d018      	beq.n	8004042 <HAL_DMAEx_List_LinkQ+0xaa>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a26      	ldr	r2, [pc, #152]	; (80040b0 <HAL_DMAEx_List_LinkQ+0x118>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_DMAEx_List_LinkQ+0xaa>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a25      	ldr	r2, [pc, #148]	; (80040b4 <HAL_DMAEx_List_LinkQ+0x11c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00e      	beq.n	8004042 <HAL_DMAEx_List_LinkQ+0xaa>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a23      	ldr	r2, [pc, #140]	; (80040b8 <HAL_DMAEx_List_LinkQ+0x120>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_DMAEx_List_LinkQ+0xaa>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a22      	ldr	r2, [pc, #136]	; (80040bc <HAL_DMAEx_List_LinkQ+0x124>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_DMAEx_List_LinkQ+0xaa>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a20      	ldr	r2, [pc, #128]	; (80040c0 <HAL_DMAEx_List_LinkQ+0x128>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <HAL_DMAEx_List_LinkQ+0xae>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_DMAEx_List_LinkQ+0xb0>
 8004046:	2300      	movs	r3, #0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004056:	2b00      	cmp	r3, #0
 8004058:	d004      	beq.n	8004064 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2203      	movs	r2, #3
 800405e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e019      	b.n	8004098 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004068:	2b81      	cmp	r3, #129	; 0x81
 800406a:	d108      	bne.n	800407e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10d      	bne.n	8004090 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2204      	movs	r2, #4
 8004078:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e00c      	b.n	8004098 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2204      	movs	r2, #4
 800408a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e003      	b.n	8004098 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40020650 	.word	0x40020650
 80040a8:	50020650 	.word	0x50020650
 80040ac:	400206d0 	.word	0x400206d0
 80040b0:	500206d0 	.word	0x500206d0
 80040b4:	40020750 	.word	0x40020750
 80040b8:	50020750 	.word	0x50020750
 80040bc:	400207d0 	.word	0x400207d0
 80040c0:	500207d0 	.word	0x500207d0

080040c4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a85      	ldr	r2, [pc, #532]	; (80042f4 <DMA_List_Init+0x230>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	f000 80a0 	beq.w	8004224 <DMA_List_Init+0x160>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a83      	ldr	r2, [pc, #524]	; (80042f8 <DMA_List_Init+0x234>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	f000 809a 	beq.w	8004224 <DMA_List_Init+0x160>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a81      	ldr	r2, [pc, #516]	; (80042fc <DMA_List_Init+0x238>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	f000 8094 	beq.w	8004224 <DMA_List_Init+0x160>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a7f      	ldr	r2, [pc, #508]	; (8004300 <DMA_List_Init+0x23c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	f000 808e 	beq.w	8004224 <DMA_List_Init+0x160>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a7d      	ldr	r2, [pc, #500]	; (8004304 <DMA_List_Init+0x240>)
 800410e:	4293      	cmp	r3, r2
 8004110:	f000 8088 	beq.w	8004224 <DMA_List_Init+0x160>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a7b      	ldr	r2, [pc, #492]	; (8004308 <DMA_List_Init+0x244>)
 800411a:	4293      	cmp	r3, r2
 800411c:	f000 8082 	beq.w	8004224 <DMA_List_Init+0x160>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a79      	ldr	r2, [pc, #484]	; (800430c <DMA_List_Init+0x248>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d07c      	beq.n	8004224 <DMA_List_Init+0x160>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a78      	ldr	r2, [pc, #480]	; (8004310 <DMA_List_Init+0x24c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d077      	beq.n	8004224 <DMA_List_Init+0x160>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a76      	ldr	r2, [pc, #472]	; (8004314 <DMA_List_Init+0x250>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d072      	beq.n	8004224 <DMA_List_Init+0x160>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a75      	ldr	r2, [pc, #468]	; (8004318 <DMA_List_Init+0x254>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d06d      	beq.n	8004224 <DMA_List_Init+0x160>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a73      	ldr	r2, [pc, #460]	; (800431c <DMA_List_Init+0x258>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d068      	beq.n	8004224 <DMA_List_Init+0x160>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a72      	ldr	r2, [pc, #456]	; (8004320 <DMA_List_Init+0x25c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d063      	beq.n	8004224 <DMA_List_Init+0x160>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a70      	ldr	r2, [pc, #448]	; (8004324 <DMA_List_Init+0x260>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d05e      	beq.n	8004224 <DMA_List_Init+0x160>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a6f      	ldr	r2, [pc, #444]	; (8004328 <DMA_List_Init+0x264>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d059      	beq.n	8004224 <DMA_List_Init+0x160>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a6d      	ldr	r2, [pc, #436]	; (800432c <DMA_List_Init+0x268>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d054      	beq.n	8004224 <DMA_List_Init+0x160>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a6c      	ldr	r2, [pc, #432]	; (8004330 <DMA_List_Init+0x26c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d04f      	beq.n	8004224 <DMA_List_Init+0x160>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a6a      	ldr	r2, [pc, #424]	; (8004334 <DMA_List_Init+0x270>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d04a      	beq.n	8004224 <DMA_List_Init+0x160>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a69      	ldr	r2, [pc, #420]	; (8004338 <DMA_List_Init+0x274>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d045      	beq.n	8004224 <DMA_List_Init+0x160>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a67      	ldr	r2, [pc, #412]	; (800433c <DMA_List_Init+0x278>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d040      	beq.n	8004224 <DMA_List_Init+0x160>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a66      	ldr	r2, [pc, #408]	; (8004340 <DMA_List_Init+0x27c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d03b      	beq.n	8004224 <DMA_List_Init+0x160>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a64      	ldr	r2, [pc, #400]	; (8004344 <DMA_List_Init+0x280>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d036      	beq.n	8004224 <DMA_List_Init+0x160>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a63      	ldr	r2, [pc, #396]	; (8004348 <DMA_List_Init+0x284>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d031      	beq.n	8004224 <DMA_List_Init+0x160>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a61      	ldr	r2, [pc, #388]	; (800434c <DMA_List_Init+0x288>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d02c      	beq.n	8004224 <DMA_List_Init+0x160>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a60      	ldr	r2, [pc, #384]	; (8004350 <DMA_List_Init+0x28c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d027      	beq.n	8004224 <DMA_List_Init+0x160>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a5e      	ldr	r2, [pc, #376]	; (8004354 <DMA_List_Init+0x290>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d022      	beq.n	8004224 <DMA_List_Init+0x160>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a5d      	ldr	r2, [pc, #372]	; (8004358 <DMA_List_Init+0x294>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d01d      	beq.n	8004224 <DMA_List_Init+0x160>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a5b      	ldr	r2, [pc, #364]	; (800435c <DMA_List_Init+0x298>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d018      	beq.n	8004224 <DMA_List_Init+0x160>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a5a      	ldr	r2, [pc, #360]	; (8004360 <DMA_List_Init+0x29c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d013      	beq.n	8004224 <DMA_List_Init+0x160>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a58      	ldr	r2, [pc, #352]	; (8004364 <DMA_List_Init+0x2a0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00e      	beq.n	8004224 <DMA_List_Init+0x160>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a57      	ldr	r2, [pc, #348]	; (8004368 <DMA_List_Init+0x2a4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d009      	beq.n	8004224 <DMA_List_Init+0x160>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a55      	ldr	r2, [pc, #340]	; (800436c <DMA_List_Init+0x2a8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <DMA_List_Init+0x160>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a54      	ldr	r2, [pc, #336]	; (8004370 <DMA_List_Init+0x2ac>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d101      	bne.n	8004228 <DMA_List_Init+0x164>
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <DMA_List_Init+0x166>
 8004228:	2300      	movs	r3, #0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d004      	beq.n	8004238 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	430a      	orrs	r2, r1
 800424a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2200      	movs	r2, #0
 8004252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800425c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2200      	movs	r2, #0
 8004264:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2200      	movs	r2, #0
 800426c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2200      	movs	r2, #0
 8004274:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a36      	ldr	r2, [pc, #216]	; (8004354 <DMA_List_Init+0x290>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d022      	beq.n	80042c6 <DMA_List_Init+0x202>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a34      	ldr	r2, [pc, #208]	; (8004358 <DMA_List_Init+0x294>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01d      	beq.n	80042c6 <DMA_List_Init+0x202>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a33      	ldr	r2, [pc, #204]	; (800435c <DMA_List_Init+0x298>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d018      	beq.n	80042c6 <DMA_List_Init+0x202>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a31      	ldr	r2, [pc, #196]	; (8004360 <DMA_List_Init+0x29c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <DMA_List_Init+0x202>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a30      	ldr	r2, [pc, #192]	; (8004364 <DMA_List_Init+0x2a0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <DMA_List_Init+0x202>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a2e      	ldr	r2, [pc, #184]	; (8004368 <DMA_List_Init+0x2a4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d009      	beq.n	80042c6 <DMA_List_Init+0x202>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a2d      	ldr	r2, [pc, #180]	; (800436c <DMA_List_Init+0x2a8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <DMA_List_Init+0x202>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a2b      	ldr	r2, [pc, #172]	; (8004370 <DMA_List_Init+0x2ac>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <DMA_List_Init+0x206>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <DMA_List_Init+0x208>
 80042ca:	2300      	movs	r3, #0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d007      	beq.n	80042e0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2200      	movs	r2, #0
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2200      	movs	r2, #0
 80042de:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2200      	movs	r2, #0
 80042e6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	40020050 	.word	0x40020050
 80042f8:	50020050 	.word	0x50020050
 80042fc:	400200d0 	.word	0x400200d0
 8004300:	500200d0 	.word	0x500200d0
 8004304:	40020150 	.word	0x40020150
 8004308:	50020150 	.word	0x50020150
 800430c:	400201d0 	.word	0x400201d0
 8004310:	500201d0 	.word	0x500201d0
 8004314:	40020250 	.word	0x40020250
 8004318:	50020250 	.word	0x50020250
 800431c:	400202d0 	.word	0x400202d0
 8004320:	500202d0 	.word	0x500202d0
 8004324:	40020350 	.word	0x40020350
 8004328:	50020350 	.word	0x50020350
 800432c:	400203d0 	.word	0x400203d0
 8004330:	500203d0 	.word	0x500203d0
 8004334:	40020450 	.word	0x40020450
 8004338:	50020450 	.word	0x50020450
 800433c:	400204d0 	.word	0x400204d0
 8004340:	500204d0 	.word	0x500204d0
 8004344:	40020550 	.word	0x40020550
 8004348:	50020550 	.word	0x50020550
 800434c:	400205d0 	.word	0x400205d0
 8004350:	500205d0 	.word	0x500205d0
 8004354:	40020650 	.word	0x40020650
 8004358:	50020650 	.word	0x50020650
 800435c:	400206d0 	.word	0x400206d0
 8004360:	500206d0 	.word	0x500206d0
 8004364:	40020750 	.word	0x40020750
 8004368:	50020750 	.word	0x50020750
 800436c:	400207d0 	.word	0x400207d0
 8004370:	500207d0 	.word	0x500207d0

08004374 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004386:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 800438c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004392:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8004398:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d017      	beq.n	80043da <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	3b01      	subs	r3, #1
 80043be:	051b      	lsls	r3, r3, #20
 80043c0:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80043c4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	3b01      	subs	r3, #1
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80043d2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80043d4:	431a      	orrs	r2, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6859      	ldr	r1, [r3, #4]
 80043e2:	f240 237f 	movw	r3, #639	; 0x27f
 80043e6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80043e8:	431a      	orrs	r2, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f6:	d10c      	bne.n	8004412 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d011      	beq.n	8004428 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	605a      	str	r2, [r3, #4]
 8004410:	e00a      	b.n	8004428 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800441a:	d105      	bne.n	8004428 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00f      	beq.n	8004450 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004442:	041b      	lsls	r3, r3, #16
 8004444:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8004448:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800444a:	431a      	orrs	r2, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004454:	b29a      	uxth	r2, r3
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d04e      	beq.n	8004504 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446e:	3b01      	subs	r3, #1
 8004470:	0419      	lsls	r1, r3, #16
 8004472:	4b67      	ldr	r3, [pc, #412]	; (8004610 <DMA_List_BuildNode+0x29c>)
 8004474:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004476:	431a      	orrs	r2, r3
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004480:	2b00      	cmp	r3, #0
 8004482:	da06      	bge.n	8004492 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	e005      	b.n	800449e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	da06      	bge.n	80044b4 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	609a      	str	r2, [r3, #8]
 80044b2:	e005      	b.n	80044c0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	da06      	bge.n	80044d6 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	e005      	b.n	80044e2 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	da06      	bge.n	80044f8 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	609a      	str	r2, [r3, #8]
 80044f6:	e005      	b.n	8004504 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d059      	beq.n	80045d4 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004524:	2b00      	cmp	r3, #0
 8004526:	da09      	bge.n	800453c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452c:	425b      	negs	r3, r3
 800452e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	615a      	str	r2, [r3, #20]
 800453a:	e005      	b.n	8004548 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004540:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454c:	2b00      	cmp	r3, #0
 800454e:	da0d      	bge.n	800456c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004554:	425b      	negs	r3, r3
 8004556:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	0419      	lsls	r1, r3, #16
 8004560:	4b2c      	ldr	r3, [pc, #176]	; (8004614 <DMA_List_BuildNode+0x2a0>)
 8004562:	400b      	ands	r3, r1
 8004564:	431a      	orrs	r2, r3
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	615a      	str	r2, [r3, #20]
 800456a:	e009      	b.n	8004580 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004574:	0419      	lsls	r1, r3, #16
 8004576:	4b27      	ldr	r3, [pc, #156]	; (8004614 <DMA_List_BuildNode+0x2a0>)
 8004578:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800457a:	431a      	orrs	r2, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004584:	2b00      	cmp	r3, #0
 8004586:	da08      	bge.n	800459a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458c:	425b      	negs	r3, r3
 800458e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	b29a      	uxth	r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	619a      	str	r2, [r3, #24]
 8004598:	e004      	b.n	80045a4 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	da0b      	bge.n	80045c4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b0:	425b      	negs	r3, r3
 80045b2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80045bc:	431a      	orrs	r2, r3
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	619a      	str	r2, [r3, #24]
 80045c2:	e007      	b.n	80045d4 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045cc:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80045ce:	431a      	orrs	r2, r3
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d006      	beq.n	80045f6 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80045f4:	e005      	b.n	8004602 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	07ff0000 	.word	0x07ff0000
 8004614:	1fff0000 	.word	0x1fff0000

08004618 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	b2da      	uxtb	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0208 	and.w	r2, r3, #8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 2200 	and.w	r2, r3, #524288	; 0x80000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0203 	and.w	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004666:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	625a      	str	r2, [r3, #36]	; 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8004670:	0d1b      	lsrs	r3, r3, #20
 8004672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004676:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	629a      	str	r2, [r3, #40]	; 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 2240 	and.w	r2, r3, #1073758208	; 0x40004000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	62da      	str	r2, [r3, #44]	; 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4b66      	ldr	r3, [pc, #408]	; (8004828 <DMA_List_GetNodeConfig+0x210>)
 800468e:	4013      	ands	r3, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6393      	str	r3, [r2, #56]	; 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046b2:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ba:	60da      	str	r2, [r3, #12]
 80046bc:	e013      	b.n	80046e6 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d004      	beq.n	80046e0 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046dc:	60da      	str	r2, [r3, #12]
 80046de:	e002      	b.n	80046e6 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	645a      	str	r2, [r3, #68]	; 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 800470e:	0c1b      	lsrs	r3, r3, #16
 8004710:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	649a      	str	r2, [r3, #72]	; 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	b29a      	uxth	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	669a      	str	r2, [r3, #104]	; 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	0c1b      	lsrs	r3, r3, #16
 8004740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004744:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	64da      	str	r2, [r3, #76]	; 0x4c
 800474a:	e002      	b.n	8004752 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	661a      	str	r2, [r3, #96]	; 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691a      	ldr	r2, [r3, #16]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	665a      	str	r2, [r3, #100]	; 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d04a      	beq.n	8004804 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	b29b      	uxth	r3, r3
 8004774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004778:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 800477a:	89fa      	ldrh	r2, [r7, #14]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	651a      	str	r2, [r3, #80]	; 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	0c1b      	lsrs	r3, r3, #16
 8004786:	b29b      	uxth	r3, r3
 8004788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800478c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 800478e:	89fa      	ldrh	r2, [r7, #14]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	655a      	str	r2, [r3, #84]	; 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a4:	425a      	negs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d004      	beq.n	80047c0 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ba:	425a      	negs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	655a      	str	r2, [r3, #84]	; 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 80047c6:	89fa      	ldrh	r2, [r7, #14]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	659a      	str	r2, [r3, #88]	; 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 80047d4:	89fa      	ldrh	r2, [r7, #14]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	65da      	str	r2, [r3, #92]	; 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d004      	beq.n	80047f0 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ea:	425a      	negs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	659a      	str	r2, [r3, #88]	; 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	da11      	bge.n	800481c <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fc:	425a      	negs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8004802:	e00b      	b.n	800481c <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	651a      	str	r2, [r3, #80]	; 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	655a      	str	r2, [r3, #84]	; 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	659a      	str	r2, [r3, #88]	; 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	0c002000 	.word	0x0c002000

0800482c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4313      	orrs	r3, r2
 8004842:	0c1b      	lsrs	r3, r3, #16
 8004844:	041b      	lsls	r3, r3, #16
 8004846:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e00a      	b.n	800486e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e004      	b.n	800486e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	0c1b      	lsrs	r3, r3, #16
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	429a      	cmp	r2, r3
 8004878:	d001      	beq.n	800487e <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d004      	beq.n	80048ac <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	e00e      	b.n	80048ca <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d004      	beq.n	80048bc <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e006      	b.n	80048ca <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80048dc:	2302      	movs	r3, #2
 80048de:	e00b      	b.n	80048f8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d001      	beq.n	80048f6 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e000      	b.n	80048f8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00c      	beq.n	8004936 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4a0d      	ldr	r2, [pc, #52]	; (800495c <DMA_List_GetCLLRNodeInfo+0x58>)
 8004926:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00f      	beq.n	800494e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2207      	movs	r2, #7
 8004932:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004934:	e00b      	b.n	800494e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4a08      	ldr	r2, [pc, #32]	; (8004960 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004940:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2205      	movs	r2, #5
 800494c:	601a      	str	r2, [r3, #0]
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	fe010000 	.word	0xfe010000
 8004960:	f8010000 	.word	0xf8010000

08004964 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8004964:	b480      	push	{r7}
 8004966:	b089      	sub	sp, #36	; 0x24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d142      	bne.n	8004a0e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8004988:	e01d      	b.n	80049c6 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d107      	bne.n	80049a0 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	e00f      	b.n	80049c0 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4413      	add	r3, r2
 80049b0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80049b8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80049bc:	4013      	ands	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	3301      	adds	r3, #1
 80049c4:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d3dc      	bcc.n	800498a <DMA_List_FindNode+0x26>
 80049d0:	e029      	b.n	8004a26 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d107      	bne.n	80049e8 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80049e2:	4013      	ands	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	e00f      	b.n	8004a08 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	0c1b      	lsrs	r3, r3, #16
 80049f2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4413      	add	r3, r2
 80049f8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004a00:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d206      	bcs.n	8004a26 <DMA_List_FindNode+0xc2>
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004a1e:	4013      	ands	r3, r2
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d1d5      	bne.n	80049d2 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d008      	beq.n	8004a3e <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004a32:	4013      	ands	r3, r2
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d001      	beq.n	8004a3e <DMA_List_FindNode+0xda>
    {
      return 1U;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e02b      	b.n	8004a96 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	041b      	lsls	r3, r3, #16
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00f      	beq.n	8004a94 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a80:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8004a84:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	0c1b      	lsrs	r3, r3, #16
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3724      	adds	r7, #36	; 0x24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b089      	sub	sp, #36	; 0x24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004ab6:	e1ba      	b.n	8004e2e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	2101      	movs	r1, #1
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 81aa 	beq.w	8004e28 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a55      	ldr	r2, [pc, #340]	; (8004c2c <HAL_GPIO_Init+0x188>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d15d      	bne.n	8004b98 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	43db      	mvns	r3, r3
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	4013      	ands	r3, r2
 8004af0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f003 0201 	and.w	r2, r3, #1
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004b0c:	4a48      	ldr	r2, [pc, #288]	; (8004c30 <HAL_GPIO_Init+0x18c>)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b14:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004b16:	4a46      	ldr	r2, [pc, #280]	; (8004c30 <HAL_GPIO_Init+0x18c>)
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	08da      	lsrs	r2, r3, #3
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3208      	adds	r2, #8
 8004b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b2e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	220f      	movs	r2, #15
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	4013      	ands	r3, r2
 8004b44:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	220b      	movs	r2, #11
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	08da      	lsrs	r2, r3, #3
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	3208      	adds	r2, #8
 8004b62:	69f9      	ldr	r1, [r7, #28]
 8004b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	2203      	movs	r2, #3
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	2202      	movs	r2, #2
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	69fa      	ldr	r2, [r7, #28]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e067      	b.n	8004c68 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d003      	beq.n	8004ba8 <HAL_GPIO_Init+0x104>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b12      	cmp	r3, #18
 8004ba6:	d145      	bne.n	8004c34 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	08da      	lsrs	r2, r3, #3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3208      	adds	r2, #8
 8004bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	220f      	movs	r2, #15
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f003 020f 	and.w	r2, r3, #15
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	08da      	lsrs	r2, r3, #3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3208      	adds	r2, #8
 8004bee:	69f9      	ldr	r1, [r7, #28]
 8004bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	2203      	movs	r2, #3
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	43db      	mvns	r3, r3
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 0203 	and.w	r2, r3, #3
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	e01e      	b.n	8004c68 <HAL_GPIO_Init+0x1c4>
 8004c2a:	bf00      	nop
 8004c2c:	46020000 	.word	0x46020000
 8004c30:	08008fe0 	.word	0x08008fe0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	2203      	movs	r2, #3
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 0203 	and.w	r2, r3, #3
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	69fa      	ldr	r2, [r7, #28]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d00b      	beq.n	8004c88 <HAL_GPIO_Init+0x1e4>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d007      	beq.n	8004c88 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c7c:	2b11      	cmp	r3, #17
 8004c7e:	d003      	beq.n	8004c88 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b12      	cmp	r3, #18
 8004c86:	d130      	bne.n	8004cea <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	2203      	movs	r2, #3
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	091b      	lsrs	r3, r3, #4
 8004cd4:	f003 0201 	and.w	r2, r3, #1
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d017      	beq.n	8004d22 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	4013      	ands	r3, r2
 8004d08:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d07c      	beq.n	8004e28 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004d2e:	4a47      	ldr	r2, [pc, #284]	; (8004e4c <HAL_GPIO_Init+0x3a8>)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	089b      	lsrs	r3, r3, #2
 8004d34:	3318      	adds	r3, #24
 8004d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	220f      	movs	r2, #15
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	69fa      	ldr	r2, [r7, #28]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	0a9a      	lsrs	r2, r3, #10
 8004d56:	4b3e      	ldr	r3, [pc, #248]	; (8004e50 <HAL_GPIO_Init+0x3ac>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	f002 0203 	and.w	r2, r2, #3
 8004d60:	00d2      	lsls	r2, r2, #3
 8004d62:	4093      	lsls	r3, r2
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004d6a:	4938      	ldr	r1, [pc, #224]	; (8004e4c <HAL_GPIO_Init+0x3a8>)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	3318      	adds	r3, #24
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004d78:	4b34      	ldr	r3, [pc, #208]	; (8004e4c <HAL_GPIO_Init+0x3a8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004d9c:	4a2b      	ldr	r2, [pc, #172]	; (8004e4c <HAL_GPIO_Init+0x3a8>)
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004da2:	4b2a      	ldr	r3, [pc, #168]	; (8004e4c <HAL_GPIO_Init+0x3a8>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004dc6:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <HAL_GPIO_Init+0x3a8>)
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004dcc:	4b1f      	ldr	r3, [pc, #124]	; (8004e4c <HAL_GPIO_Init+0x3a8>)
 8004dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	69fa      	ldr	r2, [r7, #28]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004df2:	4a16      	ldr	r2, [pc, #88]	; (8004e4c <HAL_GPIO_Init+0x3a8>)
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8004dfa:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <HAL_GPIO_Init+0x3a8>)
 8004dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e00:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004e20:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <HAL_GPIO_Init+0x3a8>)
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f47f ae3d 	bne.w	8004ab8 <HAL_GPIO_Init+0x14>
  }
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	3724      	adds	r7, #36	; 0x24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	46022000 	.word	0x46022000
 8004e50:	002f7f7f 	.word	0x002f7f7f

08004e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	807b      	strh	r3, [r7, #2]
 8004e60:	4613      	mov	r3, r2
 8004e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e64:	787b      	ldrb	r3, [r7, #1]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004e70:	e002      	b.n	8004e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004e72:	887a      	ldrh	r2, [r7, #2]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	e007      	b.n	8004eb2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004ea2:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f023 0204 	bic.w	r2, r3, #4
 8004eaa:	4905      	ldr	r1, [pc, #20]	; (8004ec0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	40030400 	.word	0x40030400

08004ec4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <HAL_ICACHE_Enable+0x1c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <HAL_ICACHE_Enable+0x1c>)
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40030400 	.word	0x40030400

08004ee4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004eec:	4b34      	ldr	r3, [pc, #208]	; (8004fc0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ef4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d101      	bne.n	8004f02 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e057      	b.n	8004fb2 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f08:	d90a      	bls.n	8004f20 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004f0a:	4b2d      	ldr	r3, [pc, #180]	; (8004fc0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	4a2a      	ldr	r2, [pc, #168]	; (8004fc0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f1c:	60d3      	str	r3, [r2, #12]
 8004f1e:	e007      	b.n	8004f30 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004f20:	4b27      	ldr	r3, [pc, #156]	; (8004fc0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f28:	4925      	ldr	r1, [pc, #148]	; (8004fc0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004f30:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a24      	ldr	r2, [pc, #144]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	099b      	lsrs	r3, r3, #6
 8004f3c:	2232      	movs	r2, #50	; 0x32
 8004f3e:	fb02 f303 	mul.w	r3, r2, r3
 8004f42:	4a21      	ldr	r2, [pc, #132]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	099b      	lsrs	r3, r3, #6
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004f4e:	e002      	b.n	8004f56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004f56:	4b1a      	ldr	r3, [pc, #104]	; (8004fc0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d102      	bne.n	8004f68 <HAL_PWREx_ControlVoltageScaling+0x84>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f3      	bne.n	8004f50 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01b      	beq.n	8004fa6 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004f6e:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a15      	ldr	r2, [pc, #84]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	099b      	lsrs	r3, r3, #6
 8004f7a:	2232      	movs	r2, #50	; 0x32
 8004f7c:	fb02 f303 	mul.w	r3, r2, r3
 8004f80:	4a11      	ldr	r2, [pc, #68]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	099b      	lsrs	r3, r3, #6
 8004f88:	3301      	adds	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004f8c:	e002      	b.n	8004f94 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004f94:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f3      	bne.n	8004f8e <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e000      	b.n	8004fb2 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	46020800 	.word	0x46020800
 8004fc4:	20000014 	.word	0x20000014
 8004fc8:	10624dd3 	.word	0x10624dd3

08004fcc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004fd0:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	46020800 	.word	0x46020800

08004fe8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	4a04      	ldr	r2, [pc, #16]	; (8005004 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004ff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ff6:	6113      	str	r3, [r2, #16]
}
 8004ff8:	bf00      	nop
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	46020800 	.word	0x46020800

08005008 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <HAL_PWREx_EnableVddA+0x1c>)
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	4a04      	ldr	r2, [pc, #16]	; (8005024 <HAL_PWREx_EnableVddA+0x1c>)
 8005012:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005016:	6113      	str	r3, [r2, #16]
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	46020800 	.word	0x46020800

08005028 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800502c:	4b05      	ldr	r3, [pc, #20]	; (8005044 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	4a04      	ldr	r2, [pc, #16]	; (8005044 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8005038:	bf00      	nop
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	46020800 	.word	0x46020800

08005048 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08e      	sub	sp, #56	; 0x38
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005050:	2300      	movs	r3, #0
 8005052:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d102      	bne.n	8005062 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	f000 bec3 	b.w	8005de8 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005062:	4b9c      	ldr	r3, [pc, #624]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f003 030c 	and.w	r3, r3, #12
 800506a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800506c:	4b99      	ldr	r3, [pc, #612]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	f003 0303 	and.w	r3, r3, #3
 8005074:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 8172 	beq.w	8005368 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <HAL_RCC_OscConfig+0x52>
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	2b0c      	cmp	r3, #12
 800508e:	f040 80e4 	bne.w	800525a <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005094:	2b01      	cmp	r3, #1
 8005096:	f040 80e0 	bne.w	800525a <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800509a:	4b8e      	ldr	r3, [pc, #568]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d006      	beq.n	80050b4 <HAL_RCC_OscConfig+0x6c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d102      	bne.n	80050b4 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	f000 be9a 	b.w	8005de8 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050b8:	4b86      	ldr	r3, [pc, #536]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <HAL_RCC_OscConfig+0x86>
 80050c4:	4b83      	ldr	r3, [pc, #524]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80050cc:	e005      	b.n	80050da <HAL_RCC_OscConfig+0x92>
 80050ce:	4b81      	ldr	r3, [pc, #516]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80050d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050d4:	041b      	lsls	r3, r3, #16
 80050d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80050da:	4293      	cmp	r3, r2
 80050dc:	d255      	bcs.n	800518a <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	4618      	mov	r0, r3
 80050ea:	f001 f9e3 	bl	80064b4 <RCC_SetFlashLatencyFromMSIRange>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f000 be77 	b.w	8005de8 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80050fa:	4b76      	ldr	r3, [pc, #472]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	4a75      	ldr	r2, [pc, #468]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005100:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005104:	6093      	str	r3, [r2, #8]
 8005106:	4b73      	ldr	r3, [pc, #460]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	4970      	ldr	r1, [pc, #448]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005114:	4313      	orrs	r3, r2
 8005116:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005120:	d309      	bcc.n	8005136 <HAL_RCC_OscConfig+0xee>
 8005122:	4b6c      	ldr	r3, [pc, #432]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f023 021f 	bic.w	r2, r3, #31
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	4969      	ldr	r1, [pc, #420]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005130:	4313      	orrs	r3, r2
 8005132:	60cb      	str	r3, [r1, #12]
 8005134:	e07e      	b.n	8005234 <HAL_RCC_OscConfig+0x1ec>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2b00      	cmp	r3, #0
 800513c:	da0a      	bge.n	8005154 <HAL_RCC_OscConfig+0x10c>
 800513e:	4b65      	ldr	r3, [pc, #404]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	015b      	lsls	r3, r3, #5
 800514c:	4961      	ldr	r1, [pc, #388]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 800514e:	4313      	orrs	r3, r2
 8005150:	60cb      	str	r3, [r1, #12]
 8005152:	e06f      	b.n	8005234 <HAL_RCC_OscConfig+0x1ec>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515c:	d30a      	bcc.n	8005174 <HAL_RCC_OscConfig+0x12c>
 800515e:	4b5d      	ldr	r3, [pc, #372]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	029b      	lsls	r3, r3, #10
 800516c:	4959      	ldr	r1, [pc, #356]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 800516e:	4313      	orrs	r3, r2
 8005170:	60cb      	str	r3, [r1, #12]
 8005172:	e05f      	b.n	8005234 <HAL_RCC_OscConfig+0x1ec>
 8005174:	4b57      	ldr	r3, [pc, #348]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	03db      	lsls	r3, r3, #15
 8005182:	4954      	ldr	r1, [pc, #336]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005184:	4313      	orrs	r3, r2
 8005186:	60cb      	str	r3, [r1, #12]
 8005188:	e054      	b.n	8005234 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800518a:	4b52      	ldr	r3, [pc, #328]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	4a51      	ldr	r2, [pc, #324]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005190:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005194:	6093      	str	r3, [r2, #8]
 8005196:	4b4f      	ldr	r3, [pc, #316]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	494c      	ldr	r1, [pc, #304]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80051b0:	d309      	bcc.n	80051c6 <HAL_RCC_OscConfig+0x17e>
 80051b2:	4b48      	ldr	r3, [pc, #288]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f023 021f 	bic.w	r2, r3, #31
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	4945      	ldr	r1, [pc, #276]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60cb      	str	r3, [r1, #12]
 80051c4:	e028      	b.n	8005218 <HAL_RCC_OscConfig+0x1d0>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da0a      	bge.n	80051e4 <HAL_RCC_OscConfig+0x19c>
 80051ce:	4b41      	ldr	r3, [pc, #260]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	015b      	lsls	r3, r3, #5
 80051dc:	493d      	ldr	r1, [pc, #244]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	60cb      	str	r3, [r1, #12]
 80051e2:	e019      	b.n	8005218 <HAL_RCC_OscConfig+0x1d0>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ec:	d30a      	bcc.n	8005204 <HAL_RCC_OscConfig+0x1bc>
 80051ee:	4b39      	ldr	r3, [pc, #228]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	029b      	lsls	r3, r3, #10
 80051fc:	4935      	ldr	r1, [pc, #212]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	60cb      	str	r3, [r1, #12]
 8005202:	e009      	b.n	8005218 <HAL_RCC_OscConfig+0x1d0>
 8005204:	4b33      	ldr	r3, [pc, #204]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	03db      	lsls	r3, r3, #15
 8005212:	4930      	ldr	r1, [pc, #192]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005214:	4313      	orrs	r3, r2
 8005216:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	4618      	mov	r0, r3
 8005224:	f001 f946 	bl	80064b4 <RCC_SetFlashLatencyFromMSIRange>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	f000 bdda 	b.w	8005de8 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005234:	f001 f8d8 	bl	80063e8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005238:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <HAL_RCC_OscConfig+0x290>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f7fc f91b 	bl	8001478 <HAL_InitTick>
 8005242:	4603      	mov	r3, r0
 8005244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8005248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 808a 	beq.w	8005366 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8005252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005256:	f000 bdc7 	b.w	8005de8 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d066      	beq.n	8005330 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005262:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1b      	ldr	r2, [pc, #108]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005268:	f043 0301 	orr.w	r3, r3, #1
 800526c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800526e:	f7fc fa17 	bl	80016a0 <HAL_GetTick>
 8005272:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005274:	e009      	b.n	800528a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005276:	f7fc fa13 	bl	80016a0 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d902      	bls.n	800528a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	f000 bdaf 	b.w	8005de8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0ef      	beq.n	8005276 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005296:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	4a0e      	ldr	r2, [pc, #56]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 800529c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052a0:	6093      	str	r3, [r2, #8]
 80052a2:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	4909      	ldr	r1, [pc, #36]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80052bc:	d30e      	bcc.n	80052dc <HAL_RCC_OscConfig+0x294>
 80052be:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f023 021f 	bic.w	r2, r3, #31
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	4902      	ldr	r1, [pc, #8]	; (80052d4 <HAL_RCC_OscConfig+0x28c>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60cb      	str	r3, [r1, #12]
 80052d0:	e04a      	b.n	8005368 <HAL_RCC_OscConfig+0x320>
 80052d2:	bf00      	nop
 80052d4:	46020c00 	.word	0x46020c00
 80052d8:	20000018 	.word	0x20000018
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	da0a      	bge.n	80052fa <HAL_RCC_OscConfig+0x2b2>
 80052e4:	4b9b      	ldr	r3, [pc, #620]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	015b      	lsls	r3, r3, #5
 80052f2:	4998      	ldr	r1, [pc, #608]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60cb      	str	r3, [r1, #12]
 80052f8:	e036      	b.n	8005368 <HAL_RCC_OscConfig+0x320>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005302:	d30a      	bcc.n	800531a <HAL_RCC_OscConfig+0x2d2>
 8005304:	4b93      	ldr	r3, [pc, #588]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	029b      	lsls	r3, r3, #10
 8005312:	4990      	ldr	r1, [pc, #576]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005314:	4313      	orrs	r3, r2
 8005316:	60cb      	str	r3, [r1, #12]
 8005318:	e026      	b.n	8005368 <HAL_RCC_OscConfig+0x320>
 800531a:	4b8e      	ldr	r3, [pc, #568]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	03db      	lsls	r3, r3, #15
 8005328:	498a      	ldr	r1, [pc, #552]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 800532a:	4313      	orrs	r3, r2
 800532c:	60cb      	str	r3, [r1, #12]
 800532e:	e01b      	b.n	8005368 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005330:	4b88      	ldr	r3, [pc, #544]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a87      	ldr	r2, [pc, #540]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005336:	f023 0301 	bic.w	r3, r3, #1
 800533a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800533c:	f7fc f9b0 	bl	80016a0 <HAL_GetTick>
 8005340:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005342:	e009      	b.n	8005358 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005344:	f7fc f9ac 	bl	80016a0 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d902      	bls.n	8005358 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	f000 bd48 	b.w	8005de8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005358:	4b7e      	ldr	r3, [pc, #504]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1ef      	bne.n	8005344 <HAL_RCC_OscConfig+0x2fc>
 8005364:	e000      	b.n	8005368 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005366:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8094 	beq.w	800549e <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	2b08      	cmp	r3, #8
 800537a:	d005      	beq.n	8005388 <HAL_RCC_OscConfig+0x340>
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	2b0c      	cmp	r3, #12
 8005380:	d110      	bne.n	80053a4 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005384:	2b03      	cmp	r3, #3
 8005386:	d10d      	bne.n	80053a4 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005388:	4b72      	ldr	r3, [pc, #456]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 8083 	beq.w	800549c <HAL_RCC_OscConfig+0x454>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d17e      	bne.n	800549c <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f000 bd22 	b.w	8005de8 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ac:	d106      	bne.n	80053bc <HAL_RCC_OscConfig+0x374>
 80053ae:	4b69      	ldr	r3, [pc, #420]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a68      	ldr	r2, [pc, #416]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80053b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	e041      	b.n	8005440 <HAL_RCC_OscConfig+0x3f8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053c4:	d112      	bne.n	80053ec <HAL_RCC_OscConfig+0x3a4>
 80053c6:	4b63      	ldr	r3, [pc, #396]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a62      	ldr	r2, [pc, #392]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80053cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	4b60      	ldr	r3, [pc, #384]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a5f      	ldr	r2, [pc, #380]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80053d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	4b5d      	ldr	r3, [pc, #372]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a5c      	ldr	r2, [pc, #368]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80053e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e029      	b.n	8005440 <HAL_RCC_OscConfig+0x3f8>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80053f4:	d112      	bne.n	800541c <HAL_RCC_OscConfig+0x3d4>
 80053f6:	4b57      	ldr	r3, [pc, #348]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a56      	ldr	r2, [pc, #344]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80053fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	4b54      	ldr	r3, [pc, #336]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a53      	ldr	r2, [pc, #332]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	4b51      	ldr	r3, [pc, #324]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a50      	ldr	r2, [pc, #320]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	e011      	b.n	8005440 <HAL_RCC_OscConfig+0x3f8>
 800541c:	4b4d      	ldr	r3, [pc, #308]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a4c      	ldr	r2, [pc, #304]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	4b4a      	ldr	r3, [pc, #296]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a49      	ldr	r2, [pc, #292]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 800542e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	4b47      	ldr	r3, [pc, #284]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a46      	ldr	r2, [pc, #280]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 800543a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800543e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d014      	beq.n	8005472 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8005448:	f7fc f92a 	bl	80016a0 <HAL_GetTick>
 800544c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800544e:	e009      	b.n	8005464 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005450:	f7fc f926 	bl	80016a0 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b64      	cmp	r3, #100	; 0x64
 800545c:	d902      	bls.n	8005464 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	f000 bcc2 	b.w	8005de8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005464:	4b3b      	ldr	r3, [pc, #236]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0ef      	beq.n	8005450 <HAL_RCC_OscConfig+0x408>
 8005470:	e015      	b.n	800549e <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005472:	f7fc f915 	bl	80016a0 <HAL_GetTick>
 8005476:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005478:	e009      	b.n	800548e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800547a:	f7fc f911 	bl	80016a0 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b64      	cmp	r3, #100	; 0x64
 8005486:	d902      	bls.n	800548e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	f000 bcad 	b.w	8005de8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800548e:	4b31      	ldr	r3, [pc, #196]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1ef      	bne.n	800547a <HAL_RCC_OscConfig+0x432>
 800549a:	e000      	b.n	800549e <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d066      	beq.n	8005578 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d005      	beq.n	80054bc <HAL_RCC_OscConfig+0x474>
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	2b0c      	cmp	r3, #12
 80054b4:	d11a      	bne.n	80054ec <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d117      	bne.n	80054ec <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054bc:	4b25      	ldr	r3, [pc, #148]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d006      	beq.n	80054d6 <HAL_RCC_OscConfig+0x48e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f000 bc89 	b.w	8005de8 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80054d6:	4b1f      	ldr	r3, [pc, #124]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	041b      	lsls	r3, r3, #16
 80054e4:	491b      	ldr	r1, [pc, #108]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ea:	e045      	b.n	8005578 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d024      	beq.n	800553e <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80054f4:	4b17      	ldr	r3, [pc, #92]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a16      	ldr	r2, [pc, #88]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 80054fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054fe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005500:	f7fc f8ce 	bl	80016a0 <HAL_GetTick>
 8005504:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005506:	e009      	b.n	800551c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005508:	f7fc f8ca 	bl	80016a0 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d902      	bls.n	800551c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	f000 bc66 	b.w	8005de8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800551c:	4b0d      	ldr	r3, [pc, #52]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0ef      	beq.n	8005508 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005528:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	041b      	lsls	r3, r3, #16
 8005536:	4907      	ldr	r1, [pc, #28]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005538:	4313      	orrs	r3, r2
 800553a:	610b      	str	r3, [r1, #16]
 800553c:	e01c      	b.n	8005578 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800553e:	4b05      	ldr	r3, [pc, #20]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a04      	ldr	r2, [pc, #16]	; (8005554 <HAL_RCC_OscConfig+0x50c>)
 8005544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005548:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800554a:	f7fc f8a9 	bl	80016a0 <HAL_GetTick>
 800554e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005550:	e00c      	b.n	800556c <HAL_RCC_OscConfig+0x524>
 8005552:	bf00      	nop
 8005554:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005558:	f7fc f8a2 	bl	80016a0 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d902      	bls.n	800556c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	f000 bc3e 	b.w	8005de8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800556c:	4baf      	ldr	r3, [pc, #700]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ef      	bne.n	8005558 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80c7 	beq.w	8005714 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8005586:	2300      	movs	r3, #0
 8005588:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800558c:	4ba7      	ldr	r3, [pc, #668]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 800558e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b00      	cmp	r3, #0
 8005598:	d111      	bne.n	80055be <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800559a:	4ba4      	ldr	r3, [pc, #656]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 800559c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055a0:	4aa2      	ldr	r2, [pc, #648]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80055a2:	f043 0304 	orr.w	r3, r3, #4
 80055a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80055aa:	4ba0      	ldr	r3, [pc, #640]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80055ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055be:	4b9c      	ldr	r3, [pc, #624]	; (8005830 <HAL_RCC_OscConfig+0x7e8>)
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d118      	bne.n	80055fc <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80055ca:	4b99      	ldr	r3, [pc, #612]	; (8005830 <HAL_RCC_OscConfig+0x7e8>)
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	4a98      	ldr	r2, [pc, #608]	; (8005830 <HAL_RCC_OscConfig+0x7e8>)
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055d6:	f7fc f863 	bl	80016a0 <HAL_GetTick>
 80055da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055de:	f7fc f85f 	bl	80016a0 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e3fb      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055f0:	4b8f      	ldr	r3, [pc, #572]	; (8005830 <HAL_RCC_OscConfig+0x7e8>)
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0f0      	beq.n	80055de <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d05f      	beq.n	80056c4 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005604:	4b89      	ldr	r3, [pc, #548]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 8005606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800560a:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005616:	429a      	cmp	r2, r3
 8005618:	d037      	beq.n	800568a <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d006      	beq.n	8005632 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e3da      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01b      	beq.n	8005674 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800563c:	4b7b      	ldr	r3, [pc, #492]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 800563e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005642:	4a7a      	ldr	r2, [pc, #488]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 8005644:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005648:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800564c:	f7fc f828 	bl	80016a0 <HAL_GetTick>
 8005650:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005654:	f7fc f824 	bl	80016a0 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e3c0      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005666:	4b71      	ldr	r3, [pc, #452]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 8005668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800566c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1ef      	bne.n	8005654 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005674:	4b6d      	ldr	r3, [pc, #436]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 8005676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800567a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	496a      	ldr	r1, [pc, #424]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800568a:	4b68      	ldr	r3, [pc, #416]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 800568c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005690:	4a66      	ldr	r2, [pc, #408]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 8005692:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005696:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800569a:	f7fc f801 	bl	80016a0 <HAL_GetTick>
 800569e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056a2:	f7fb fffd 	bl	80016a0 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e399      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80056b4:	4b5d      	ldr	r3, [pc, #372]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80056b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0ef      	beq.n	80056a2 <HAL_RCC_OscConfig+0x65a>
 80056c2:	e01b      	b.n	80056fc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80056c4:	4b59      	ldr	r3, [pc, #356]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80056c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056ca:	4a58      	ldr	r2, [pc, #352]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80056cc:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80056d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80056d4:	f7fb ffe4 	bl	80016a0 <HAL_GetTick>
 80056d8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056dc:	f7fb ffe0 	bl	80016a0 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e37c      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80056ee:	4b4f      	ldr	r3, [pc, #316]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80056f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1ef      	bne.n	80056dc <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005700:	2b01      	cmp	r3, #1
 8005702:	d107      	bne.n	8005714 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005704:	4b49      	ldr	r3, [pc, #292]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 8005706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800570a:	4a48      	ldr	r2, [pc, #288]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 800570c:	f023 0304 	bic.w	r3, r3, #4
 8005710:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8112 	beq.w	8005946 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8005722:	2300      	movs	r3, #0
 8005724:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005728:	4b40      	ldr	r3, [pc, #256]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 800572a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	d111      	bne.n	800575a <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005736:	4b3d      	ldr	r3, [pc, #244]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 8005738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800573c:	4a3b      	ldr	r2, [pc, #236]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 800573e:	f043 0304 	orr.w	r3, r3, #4
 8005742:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005746:	4b39      	ldr	r3, [pc, #228]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 8005748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800575a:	4b35      	ldr	r3, [pc, #212]	; (8005830 <HAL_RCC_OscConfig+0x7e8>)
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d118      	bne.n	8005798 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005766:	4b32      	ldr	r3, [pc, #200]	; (8005830 <HAL_RCC_OscConfig+0x7e8>)
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576a:	4a31      	ldr	r2, [pc, #196]	; (8005830 <HAL_RCC_OscConfig+0x7e8>)
 800576c:	f043 0301 	orr.w	r3, r3, #1
 8005770:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005772:	f7fb ff95 	bl	80016a0 <HAL_GetTick>
 8005776:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800577a:	f7fb ff91 	bl	80016a0 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e32d      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800578c:	4b28      	ldr	r3, [pc, #160]	; (8005830 <HAL_RCC_OscConfig+0x7e8>)
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01f      	beq.n	80057e4 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d010      	beq.n	80057d2 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80057b0:	4b1e      	ldr	r3, [pc, #120]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80057b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057b6:	4a1d      	ldr	r2, [pc, #116]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80057b8:	f043 0304 	orr.w	r3, r3, #4
 80057bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80057c0:	4b1a      	ldr	r3, [pc, #104]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80057c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057c6:	4a19      	ldr	r2, [pc, #100]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80057c8:	f043 0301 	orr.w	r3, r3, #1
 80057cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80057d0:	e018      	b.n	8005804 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80057d2:	4b16      	ldr	r3, [pc, #88]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80057d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057d8:	4a14      	ldr	r2, [pc, #80]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80057da:	f043 0301 	orr.w	r3, r3, #1
 80057de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80057e2:	e00f      	b.n	8005804 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80057e4:	4b11      	ldr	r3, [pc, #68]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80057e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057ea:	4a10      	ldr	r2, [pc, #64]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80057f4:	4b0d      	ldr	r3, [pc, #52]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80057f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057fa:	4a0c      	ldr	r2, [pc, #48]	; (800582c <HAL_RCC_OscConfig+0x7e4>)
 80057fc:	f023 0304 	bic.w	r3, r3, #4
 8005800:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d058      	beq.n	80058be <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800580c:	f7fb ff48 	bl	80016a0 <HAL_GetTick>
 8005810:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005812:	e00f      	b.n	8005834 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005814:	f7fb ff44 	bl	80016a0 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005822:	4293      	cmp	r3, r2
 8005824:	d906      	bls.n	8005834 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e2de      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
 800582a:	bf00      	nop
 800582c:	46020c00 	.word	0x46020c00
 8005830:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005834:	4b9c      	ldr	r3, [pc, #624]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0e8      	beq.n	8005814 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584a:	2b00      	cmp	r3, #0
 800584c:	d01b      	beq.n	8005886 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800584e:	4b96      	ldr	r3, [pc, #600]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005854:	4a94      	ldr	r2, [pc, #592]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800585e:	e00a      	b.n	8005876 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005860:	f7fb ff1e 	bl	80016a0 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	f241 3288 	movw	r2, #5000	; 0x1388
 800586e:	4293      	cmp	r3, r2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e2b8      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005876:	4b8c      	ldr	r3, [pc, #560]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800587c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ed      	beq.n	8005860 <HAL_RCC_OscConfig+0x818>
 8005884:	e053      	b.n	800592e <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005886:	4b88      	ldr	r3, [pc, #544]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800588c:	4a86      	ldr	r2, [pc, #536]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 800588e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005892:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005896:	e00a      	b.n	80058ae <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005898:	f7fb ff02 	bl	80016a0 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e29c      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80058ae:	4b7e      	ldr	r3, [pc, #504]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 80058b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1ed      	bne.n	8005898 <HAL_RCC_OscConfig+0x850>
 80058bc:	e037      	b.n	800592e <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80058be:	f7fb feef 	bl	80016a0 <HAL_GetTick>
 80058c2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058c4:	e00a      	b.n	80058dc <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c6:	f7fb feeb 	bl	80016a0 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e285      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058dc:	4b72      	ldr	r3, [pc, #456]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 80058de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1ed      	bne.n	80058c6 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80058ea:	4b6f      	ldr	r3, [pc, #444]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 80058ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01a      	beq.n	800592e <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80058f8:	4b6b      	ldr	r3, [pc, #428]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 80058fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058fe:	4a6a      	ldr	r2, [pc, #424]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005904:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005908:	e00a      	b.n	8005920 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800590a:	f7fb fec9 	bl	80016a0 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	f241 3288 	movw	r2, #5000	; 0x1388
 8005918:	4293      	cmp	r3, r2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e263      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005920:	4b61      	ldr	r3, [pc, #388]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1ed      	bne.n	800590a <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800592e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005932:	2b01      	cmp	r3, #1
 8005934:	d107      	bne.n	8005946 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005936:	4b5c      	ldr	r3, [pc, #368]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800593c:	4a5a      	ldr	r2, [pc, #360]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 800593e:	f023 0304 	bic.w	r3, r3, #4
 8005942:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d036      	beq.n	80059c0 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d019      	beq.n	800598e <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800595a:	4b53      	ldr	r3, [pc, #332]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a52      	ldr	r2, [pc, #328]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005964:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005966:	f7fb fe9b 	bl	80016a0 <HAL_GetTick>
 800596a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800596e:	f7fb fe97 	bl	80016a0 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e233      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005980:	4b49      	ldr	r3, [pc, #292]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <HAL_RCC_OscConfig+0x926>
 800598c:	e018      	b.n	80059c0 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800598e:	4b46      	ldr	r3, [pc, #280]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a45      	ldr	r2, [pc, #276]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005998:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800599a:	f7fb fe81 	bl	80016a0 <HAL_GetTick>
 800599e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80059a0:	e008      	b.n	80059b4 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059a2:	f7fb fe7d 	bl	80016a0 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e219      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80059b4:	4b3c      	ldr	r3, [pc, #240]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1f0      	bne.n	80059a2 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d036      	beq.n	8005a3a <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d019      	beq.n	8005a08 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80059d4:	4b34      	ldr	r3, [pc, #208]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a33      	ldr	r2, [pc, #204]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 80059da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80059e0:	f7fb fe5e 	bl	80016a0 <HAL_GetTick>
 80059e4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80059e8:	f7fb fe5a 	bl	80016a0 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e1f6      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80059fa:	4b2b      	ldr	r3, [pc, #172]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0f0      	beq.n	80059e8 <HAL_RCC_OscConfig+0x9a0>
 8005a06:	e018      	b.n	8005a3a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005a08:	4b27      	ldr	r3, [pc, #156]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a26      	ldr	r2, [pc, #152]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a12:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005a14:	f7fb fe44 	bl	80016a0 <HAL_GetTick>
 8005a18:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005a1c:	f7fb fe40 	bl	80016a0 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e1dc      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005a2e:	4b1e      	ldr	r3, [pc, #120]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d07f      	beq.n	8005b46 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d062      	beq.n	8005b14 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005a4e:	4b16      	ldr	r3, [pc, #88]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005a54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a58:	6093      	str	r3, [r2, #8]
 8005a5a:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	4910      	ldr	r1, [pc, #64]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005a74:	d309      	bcc.n	8005a8a <HAL_RCC_OscConfig+0xa42>
 8005a76:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f023 021f 	bic.w	r2, r3, #31
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	4909      	ldr	r1, [pc, #36]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60cb      	str	r3, [r1, #12]
 8005a88:	e02a      	b.n	8005ae0 <HAL_RCC_OscConfig+0xa98>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	da0c      	bge.n	8005aac <HAL_RCC_OscConfig+0xa64>
 8005a92:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	015b      	lsls	r3, r3, #5
 8005aa0:	4901      	ldr	r1, [pc, #4]	; (8005aa8 <HAL_RCC_OscConfig+0xa60>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60cb      	str	r3, [r1, #12]
 8005aa6:	e01b      	b.n	8005ae0 <HAL_RCC_OscConfig+0xa98>
 8005aa8:	46020c00 	.word	0x46020c00
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab4:	d30a      	bcc.n	8005acc <HAL_RCC_OscConfig+0xa84>
 8005ab6:	4ba5      	ldr	r3, [pc, #660]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	029b      	lsls	r3, r3, #10
 8005ac4:	49a1      	ldr	r1, [pc, #644]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60cb      	str	r3, [r1, #12]
 8005aca:	e009      	b.n	8005ae0 <HAL_RCC_OscConfig+0xa98>
 8005acc:	4b9f      	ldr	r3, [pc, #636]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	03db      	lsls	r3, r3, #15
 8005ada:	499c      	ldr	r1, [pc, #624]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005ae0:	4b9a      	ldr	r3, [pc, #616]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a99      	ldr	r2, [pc, #612]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005ae6:	f043 0310 	orr.w	r3, r3, #16
 8005aea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005aec:	f7fb fdd8 	bl	80016a0 <HAL_GetTick>
 8005af0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005af4:	f7fb fdd4 	bl	80016a0 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e170      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005b06:	4b91      	ldr	r3, [pc, #580]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCC_OscConfig+0xaac>
 8005b12:	e018      	b.n	8005b46 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005b14:	4b8d      	ldr	r3, [pc, #564]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a8c      	ldr	r2, [pc, #560]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005b1a:	f023 0310 	bic.w	r3, r3, #16
 8005b1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005b20:	f7fb fdbe 	bl	80016a0 <HAL_GetTick>
 8005b24:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005b28:	f7fb fdba 	bl	80016a0 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e156      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005b3a:	4b84      	ldr	r3, [pc, #528]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f0      	bne.n	8005b28 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 814b 	beq.w	8005de6 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b56:	4b7d      	ldr	r3, [pc, #500]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
 8005b5e:	2b0c      	cmp	r3, #12
 8005b60:	f000 80fa 	beq.w	8005d58 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	f040 80cc 	bne.w	8005d06 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005b6e:	4b77      	ldr	r3, [pc, #476]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a76      	ldr	r2, [pc, #472]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005b74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b7a:	f7fb fd91 	bl	80016a0 <HAL_GetTick>
 8005b7e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b82:	f7fb fd8d 	bl	80016a0 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e129      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b94:	4b6d      	ldr	r3, [pc, #436]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1f0      	bne.n	8005b82 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ba0:	4b6a      	ldr	r3, [pc, #424]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d111      	bne.n	8005bd2 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005bae:	4b67      	ldr	r3, [pc, #412]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bb4:	4a65      	ldr	r2, [pc, #404]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005bb6:	f043 0304 	orr.w	r3, r3, #4
 8005bba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005bbe:	4b63      	ldr	r3, [pc, #396]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005bd2:	4b5f      	ldr	r3, [pc, #380]	; (8005d50 <HAL_RCC_OscConfig+0xd08>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bde:	d102      	bne.n	8005be6 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005be6:	4b5a      	ldr	r3, [pc, #360]	; (8005d50 <HAL_RCC_OscConfig+0xd08>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	4a59      	ldr	r2, [pc, #356]	; (8005d50 <HAL_RCC_OscConfig+0xd08>)
 8005bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bf0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005bf2:	4b56      	ldr	r3, [pc, #344]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bfa:	f023 0303 	bic.w	r3, r3, #3
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c06:	3a01      	subs	r2, #1
 8005c08:	0212      	lsls	r2, r2, #8
 8005c0a:	4311      	orrs	r1, r2
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c10:	430a      	orrs	r2, r1
 8005c12:	494e      	ldr	r1, [pc, #312]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	628b      	str	r3, [r1, #40]	; 0x28
 8005c18:	4b4c      	ldr	r3, [pc, #304]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1c:	4b4d      	ldr	r3, [pc, #308]	; (8005d54 <HAL_RCC_OscConfig+0xd0c>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c24:	3a01      	subs	r2, #1
 8005c26:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005c2e:	3a01      	subs	r2, #1
 8005c30:	0252      	lsls	r2, r2, #9
 8005c32:	b292      	uxth	r2, r2
 8005c34:	4311      	orrs	r1, r2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c3a:	3a01      	subs	r2, #1
 8005c3c:	0412      	lsls	r2, r2, #16
 8005c3e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005c42:	4311      	orrs	r1, r2
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005c48:	3a01      	subs	r2, #1
 8005c4a:	0612      	lsls	r2, r2, #24
 8005c4c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005c50:	430a      	orrs	r2, r1
 8005c52:	493e      	ldr	r1, [pc, #248]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005c58:	4b3c      	ldr	r3, [pc, #240]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5c:	4a3b      	ldr	r2, [pc, #236]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005c5e:	f023 0310 	bic.w	r3, r3, #16
 8005c62:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005c64:	4b39      	ldr	r3, [pc, #228]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005c74:	00d2      	lsls	r2, r2, #3
 8005c76:	4935      	ldr	r1, [pc, #212]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005c7c:	4b33      	ldr	r3, [pc, #204]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	4a32      	ldr	r2, [pc, #200]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005c82:	f043 0310 	orr.w	r3, r3, #16
 8005c86:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005c88:	4b30      	ldr	r3, [pc, #192]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	f023 020c 	bic.w	r2, r3, #12
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c94:	492d      	ldr	r1, [pc, #180]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005c9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d105      	bne.n	8005cae <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005ca2:	4b2b      	ldr	r3, [pc, #172]	; (8005d50 <HAL_RCC_OscConfig+0xd08>)
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	4a2a      	ldr	r2, [pc, #168]	; (8005d50 <HAL_RCC_OscConfig+0xd08>)
 8005ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cac:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005cae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d107      	bne.n	8005cc6 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005cb6:	4b25      	ldr	r3, [pc, #148]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cbc:	4a23      	ldr	r2, [pc, #140]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005cbe:	f023 0304 	bic.w	r3, r3, #4
 8005cc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005cc6:	4b21      	ldr	r3, [pc, #132]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	4a20      	ldr	r2, [pc, #128]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cd0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005cd2:	4b1e      	ldr	r3, [pc, #120]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1d      	ldr	r2, [pc, #116]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005cd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cdc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005cde:	f7fb fcdf 	bl	80016a0 <HAL_GetTick>
 8005ce2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce6:	f7fb fcdb 	bl	80016a0 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e077      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005cf8:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f0      	beq.n	8005ce6 <HAL_RCC_OscConfig+0xc9e>
 8005d04:	e06f      	b.n	8005de6 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005d06:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a10      	ldr	r2, [pc, #64]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005d0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d10:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005d12:	f7fb fcc5 	bl	80016a0 <HAL_GetTick>
 8005d16:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1a:	f7fb fcc1 	bl	80016a0 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e05d      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005d2c:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1f0      	bne.n	8005d1a <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005d38:	4b04      	ldr	r3, [pc, #16]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3c:	4a03      	ldr	r2, [pc, #12]	; (8005d4c <HAL_RCC_OscConfig+0xd04>)
 8005d3e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005d42:	f023 0303 	bic.w	r3, r3, #3
 8005d46:	6293      	str	r3, [r2, #40]	; 0x28
 8005d48:	e04d      	b.n	8005de6 <HAL_RCC_OscConfig+0xd9e>
 8005d4a:	bf00      	nop
 8005d4c:	46020c00 	.word	0x46020c00
 8005d50:	46020800 	.word	0x46020800
 8005d54:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005d58:	4b25      	ldr	r3, [pc, #148]	; (8005df0 <HAL_RCC_OscConfig+0xda8>)
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d5e:	4b24      	ldr	r3, [pc, #144]	; (8005df0 <HAL_RCC_OscConfig+0xda8>)
 8005d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d62:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d03a      	beq.n	8005de2 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f003 0203 	and.w	r2, r3, #3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d133      	bne.n	8005de2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	0a1b      	lsrs	r3, r3, #8
 8005d7e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d12a      	bne.n	8005de2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	0b1b      	lsrs	r3, r3, #12
 8005d90:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d122      	bne.n	8005de2 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d11a      	bne.n	8005de2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	0a5b      	lsrs	r3, r3, #9
 8005db0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d111      	bne.n	8005de2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	0c1b      	lsrs	r3, r3, #16
 8005dc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d108      	bne.n	8005de2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	0e1b      	lsrs	r3, r3, #24
 8005dd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ddc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d001      	beq.n	8005de6 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3738      	adds	r7, #56	; 0x38
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	46020c00 	.word	0x46020c00

08005df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e1d9      	b.n	80061bc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e08:	4b9b      	ldr	r3, [pc, #620]	; (8006078 <HAL_RCC_ClockConfig+0x284>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d910      	bls.n	8005e38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e16:	4b98      	ldr	r3, [pc, #608]	; (8006078 <HAL_RCC_ClockConfig+0x284>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f023 020f 	bic.w	r2, r3, #15
 8005e1e:	4996      	ldr	r1, [pc, #600]	; (8006078 <HAL_RCC_ClockConfig+0x284>)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e26:	4b94      	ldr	r3, [pc, #592]	; (8006078 <HAL_RCC_ClockConfig+0x284>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d001      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e1c1      	b.n	80061bc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0310 	and.w	r3, r3, #16
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d010      	beq.n	8005e66 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695a      	ldr	r2, [r3, #20]
 8005e48:	4b8c      	ldr	r3, [pc, #560]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d908      	bls.n	8005e66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005e54:	4b89      	ldr	r3, [pc, #548]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	4986      	ldr	r1, [pc, #536]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d012      	beq.n	8005e98 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	4b81      	ldr	r3, [pc, #516]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	091b      	lsrs	r3, r3, #4
 8005e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d909      	bls.n	8005e98 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005e84:	4b7d      	ldr	r3, [pc, #500]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	497a      	ldr	r1, [pc, #488]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d010      	beq.n	8005ec6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	4b74      	ldr	r3, [pc, #464]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d908      	bls.n	8005ec6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005eb4:	4b71      	ldr	r3, [pc, #452]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	496e      	ldr	r1, [pc, #440]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d010      	beq.n	8005ef4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	4b69      	ldr	r3, [pc, #420]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d908      	bls.n	8005ef4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005ee2:	4b66      	ldr	r3, [pc, #408]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f023 020f 	bic.w	r2, r3, #15
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	4963      	ldr	r1, [pc, #396]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80d2 	beq.w	80060a6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005f02:	2300      	movs	r3, #0
 8005f04:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d143      	bne.n	8005f96 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f0e:	4b5b      	ldr	r3, [pc, #364]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d110      	bne.n	8005f3e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005f1c:	4b57      	ldr	r3, [pc, #348]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f22:	4a56      	ldr	r2, [pc, #344]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005f24:	f043 0304 	orr.w	r3, r3, #4
 8005f28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005f2c:	4b53      	ldr	r3, [pc, #332]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	60bb      	str	r3, [r7, #8]
 8005f38:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005f3e:	f7fb fbaf 	bl	80016a0 <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005f44:	4b4e      	ldr	r3, [pc, #312]	; (8006080 <HAL_RCC_ClockConfig+0x28c>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00f      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005f50:	e008      	b.n	8005f64 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005f52:	f7fb fba5 	bl	80016a0 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e12b      	b.n	80061bc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005f64:	4b46      	ldr	r3, [pc, #280]	; (8006080 <HAL_RCC_ClockConfig+0x28c>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0f0      	beq.n	8005f52 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005f70:	7dfb      	ldrb	r3, [r7, #23]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d107      	bne.n	8005f86 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005f76:	4b41      	ldr	r3, [pc, #260]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f7c:	4a3f      	ldr	r2, [pc, #252]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005f7e:	f023 0304 	bic.w	r3, r3, #4
 8005f82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005f86:	4b3d      	ldr	r3, [pc, #244]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d121      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e112      	b.n	80061bc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d107      	bne.n	8005fae <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f9e:	4b37      	ldr	r3, [pc, #220]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d115      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e106      	b.n	80061bc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d107      	bne.n	8005fc6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005fb6:	4b31      	ldr	r3, [pc, #196]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d109      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e0fa      	b.n	80061bc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fc6:	4b2d      	ldr	r3, [pc, #180]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e0f2      	b.n	80061bc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005fd6:	4b29      	ldr	r3, [pc, #164]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f023 0203 	bic.w	r2, r3, #3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	4926      	ldr	r1, [pc, #152]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005fe8:	f7fb fb5a 	bl	80016a0 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d112      	bne.n	800601c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ff6:	e00a      	b.n	800600e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff8:	f7fb fb52 	bl	80016a0 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	f241 3288 	movw	r2, #5000	; 0x1388
 8006006:	4293      	cmp	r3, r2
 8006008:	d901      	bls.n	800600e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e0d6      	b.n	80061bc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800600e:	4b1b      	ldr	r3, [pc, #108]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f003 030c 	and.w	r3, r3, #12
 8006016:	2b0c      	cmp	r3, #12
 8006018:	d1ee      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0x204>
 800601a:	e044      	b.n	80060a6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d112      	bne.n	800604a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006024:	e00a      	b.n	800603c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006026:	f7fb fb3b 	bl	80016a0 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	f241 3288 	movw	r2, #5000	; 0x1388
 8006034:	4293      	cmp	r3, r2
 8006036:	d901      	bls.n	800603c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e0bf      	b.n	80061bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800603c:	4b0f      	ldr	r3, [pc, #60]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f003 030c 	and.w	r3, r3, #12
 8006044:	2b08      	cmp	r3, #8
 8006046:	d1ee      	bne.n	8006026 <HAL_RCC_ClockConfig+0x232>
 8006048:	e02d      	b.n	80060a6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d123      	bne.n	800609a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006052:	e00a      	b.n	800606a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006054:	f7fb fb24 	bl	80016a0 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006062:	4293      	cmp	r3, r2
 8006064:	d901      	bls.n	800606a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e0a8      	b.n	80061bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800606a:	4b04      	ldr	r3, [pc, #16]	; (800607c <HAL_RCC_ClockConfig+0x288>)
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f003 030c 	and.w	r3, r3, #12
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1ee      	bne.n	8006054 <HAL_RCC_ClockConfig+0x260>
 8006076:	e016      	b.n	80060a6 <HAL_RCC_ClockConfig+0x2b2>
 8006078:	40022000 	.word	0x40022000
 800607c:	46020c00 	.word	0x46020c00
 8006080:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006084:	f7fb fb0c 	bl	80016a0 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006092:	4293      	cmp	r3, r2
 8006094:	d901      	bls.n	800609a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e090      	b.n	80061bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800609a:	4b4a      	ldr	r3, [pc, #296]	; (80061c4 <HAL_RCC_ClockConfig+0x3d0>)
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	f003 030c 	and.w	r3, r3, #12
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d1ee      	bne.n	8006084 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d010      	beq.n	80060d4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	689a      	ldr	r2, [r3, #8]
 80060b6:	4b43      	ldr	r3, [pc, #268]	; (80061c4 <HAL_RCC_ClockConfig+0x3d0>)
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	429a      	cmp	r2, r3
 80060c0:	d208      	bcs.n	80060d4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80060c2:	4b40      	ldr	r3, [pc, #256]	; (80061c4 <HAL_RCC_ClockConfig+0x3d0>)
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	f023 020f 	bic.w	r2, r3, #15
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	493d      	ldr	r1, [pc, #244]	; (80061c4 <HAL_RCC_ClockConfig+0x3d0>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060d4:	4b3c      	ldr	r3, [pc, #240]	; (80061c8 <HAL_RCC_ClockConfig+0x3d4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d210      	bcs.n	8006104 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e2:	4b39      	ldr	r3, [pc, #228]	; (80061c8 <HAL_RCC_ClockConfig+0x3d4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f023 020f 	bic.w	r2, r3, #15
 80060ea:	4937      	ldr	r1, [pc, #220]	; (80061c8 <HAL_RCC_ClockConfig+0x3d4>)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f2:	4b35      	ldr	r3, [pc, #212]	; (80061c8 <HAL_RCC_ClockConfig+0x3d4>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e05b      	b.n	80061bc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d010      	beq.n	8006132 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	4b2b      	ldr	r3, [pc, #172]	; (80061c4 <HAL_RCC_ClockConfig+0x3d0>)
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800611c:	429a      	cmp	r2, r3
 800611e:	d208      	bcs.n	8006132 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006120:	4b28      	ldr	r3, [pc, #160]	; (80061c4 <HAL_RCC_ClockConfig+0x3d0>)
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	4925      	ldr	r1, [pc, #148]	; (80061c4 <HAL_RCC_ClockConfig+0x3d0>)
 800612e:	4313      	orrs	r3, r2
 8006130:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0308 	and.w	r3, r3, #8
 800613a:	2b00      	cmp	r3, #0
 800613c:	d012      	beq.n	8006164 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	4b20      	ldr	r3, [pc, #128]	; (80061c4 <HAL_RCC_ClockConfig+0x3d0>)
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	091b      	lsrs	r3, r3, #4
 8006148:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800614c:	429a      	cmp	r2, r3
 800614e:	d209      	bcs.n	8006164 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006150:	4b1c      	ldr	r3, [pc, #112]	; (80061c4 <HAL_RCC_ClockConfig+0x3d0>)
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	4919      	ldr	r1, [pc, #100]	; (80061c4 <HAL_RCC_ClockConfig+0x3d0>)
 8006160:	4313      	orrs	r3, r2
 8006162:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	2b00      	cmp	r3, #0
 800616e:	d010      	beq.n	8006192 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	695a      	ldr	r2, [r3, #20]
 8006174:	4b13      	ldr	r3, [pc, #76]	; (80061c4 <HAL_RCC_ClockConfig+0x3d0>)
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800617c:	429a      	cmp	r2, r3
 800617e:	d208      	bcs.n	8006192 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006180:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <HAL_RCC_ClockConfig+0x3d0>)
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	490d      	ldr	r1, [pc, #52]	; (80061c4 <HAL_RCC_ClockConfig+0x3d0>)
 800618e:	4313      	orrs	r3, r2
 8006190:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006192:	f000 f821 	bl	80061d8 <HAL_RCC_GetSysClockFreq>
 8006196:	4602      	mov	r2, r0
 8006198:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <HAL_RCC_ClockConfig+0x3d0>)
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	490a      	ldr	r1, [pc, #40]	; (80061cc <HAL_RCC_ClockConfig+0x3d8>)
 80061a2:	5ccb      	ldrb	r3, [r1, r3]
 80061a4:	fa22 f303 	lsr.w	r3, r2, r3
 80061a8:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <HAL_RCC_ClockConfig+0x3dc>)
 80061aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061ac:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <HAL_RCC_ClockConfig+0x3e0>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fb f961 	bl	8001478 <HAL_InitTick>
 80061b6:	4603      	mov	r3, r0
 80061b8:	73fb      	strb	r3, [r7, #15]

  return status;
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	46020c00 	.word	0x46020c00
 80061c8:	40022000 	.word	0x40022000
 80061cc:	08008f88 	.word	0x08008f88
 80061d0:	20000014 	.word	0x20000014
 80061d4:	20000018 	.word	0x20000018

080061d8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	b08b      	sub	sp, #44	; 0x2c
 80061dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061e6:	4b7b      	ldr	r3, [pc, #492]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	f003 030c 	and.w	r3, r3, #12
 80061ee:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061f0:	4b78      	ldr	r3, [pc, #480]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	f003 0303 	and.w	r3, r3, #3
 80061f8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_RCC_GetSysClockFreq+0x34>
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	2b0c      	cmp	r3, #12
 8006204:	d121      	bne.n	800624a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d11e      	bne.n	800624a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800620c:	4b71      	ldr	r3, [pc, #452]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d107      	bne.n	8006228 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006218:	4b6e      	ldr	r3, [pc, #440]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800621a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800621e:	0b1b      	lsrs	r3, r3, #12
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
 8006226:	e005      	b.n	8006234 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006228:	4b6a      	ldr	r3, [pc, #424]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	0f1b      	lsrs	r3, r3, #28
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006234:	4a68      	ldr	r2, [pc, #416]	; (80063d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800623c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d110      	bne.n	8006266 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006248:	e00d      	b.n	8006266 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800624a:	4b62      	ldr	r3, [pc, #392]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f003 030c 	and.w	r3, r3, #12
 8006252:	2b04      	cmp	r3, #4
 8006254:	d102      	bne.n	800625c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006256:	4b61      	ldr	r3, [pc, #388]	; (80063dc <HAL_RCC_GetSysClockFreq+0x204>)
 8006258:	623b      	str	r3, [r7, #32]
 800625a:	e004      	b.n	8006266 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	2b08      	cmp	r3, #8
 8006260:	d101      	bne.n	8006266 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006262:	4b5e      	ldr	r3, [pc, #376]	; (80063dc <HAL_RCC_GetSysClockFreq+0x204>)
 8006264:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b0c      	cmp	r3, #12
 800626a:	f040 80ac 	bne.w	80063c6 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800626e:	4b59      	ldr	r3, [pc, #356]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006278:	4b56      	ldr	r3, [pc, #344]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800627a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627c:	0a1b      	lsrs	r3, r3, #8
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006286:	4b53      	ldr	r3, [pc, #332]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628a:	091b      	lsrs	r3, r3, #4
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006292:	4b50      	ldr	r3, [pc, #320]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	08db      	lsrs	r3, r3, #3
 8006298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	fb02 f303 	mul.w	r3, r2, r3
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062aa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8086 	beq.w	80063c2 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d003      	beq.n	80062c4 <HAL_RCC_GetSysClockFreq+0xec>
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d022      	beq.n	8006308 <HAL_RCC_GetSysClockFreq+0x130>
 80062c2:	e043      	b.n	800634c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ce:	eddf 6a44 	vldr	s13, [pc, #272]	; 80063e0 <HAL_RCC_GetSysClockFreq+0x208>
 80062d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d6:	4b3f      	ldr	r3, [pc, #252]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80062d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80062e6:	ed97 6a01 	vldr	s12, [r7, #4]
 80062ea:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80063e4 <HAL_RCC_GetSysClockFreq+0x20c>
 80062ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80062f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006302:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8006306:	e046      	b.n	8006396 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006312:	eddf 6a33 	vldr	s13, [pc, #204]	; 80063e0 <HAL_RCC_GetSysClockFreq+0x208>
 8006316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631a:	4b2e      	ldr	r3, [pc, #184]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800631c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800632a:	ed97 6a01 	vldr	s12, [r7, #4]
 800632e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80063e4 <HAL_RCC_GetSysClockFreq+0x20c>
 8006332:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006336:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800633a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800633e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006346:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800634a:	e024      	b.n	8006396 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	ee07 3a90 	vmov	s15, r3
 800635c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006364:	4b1b      	ldr	r3, [pc, #108]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800636c:	ee07 3a90 	vmov	s15, r3
 8006370:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006374:	ed97 6a01 	vldr	s12, [r7, #4]
 8006378:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80063e4 <HAL_RCC_GetSysClockFreq+0x20c>
 800637c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006380:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006384:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006388:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800638c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006390:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8006394:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006396:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639a:	0e1b      	lsrs	r3, r3, #24
 800639c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a0:	3301      	adds	r3, #1
 80063a2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80063b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ba:	ee17 3a90 	vmov	r3, s15
 80063be:	623b      	str	r3, [r7, #32]
 80063c0:	e001      	b.n	80063c6 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80063c6:	6a3b      	ldr	r3, [r7, #32]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	372c      	adds	r7, #44	; 0x2c
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	46020c00 	.word	0x46020c00
 80063d8:	08008fa0 	.word	0x08008fa0
 80063dc:	00f42400 	.word	0x00f42400
 80063e0:	4b742400 	.word	0x4b742400
 80063e4:	46000000 	.word	0x46000000

080063e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80063ec:	f7ff fef4 	bl	80061d8 <HAL_RCC_GetSysClockFreq>
 80063f0:	4602      	mov	r2, r0
 80063f2:	4b07      	ldr	r3, [pc, #28]	; (8006410 <HAL_RCC_GetHCLKFreq+0x28>)
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	4906      	ldr	r1, [pc, #24]	; (8006414 <HAL_RCC_GetHCLKFreq+0x2c>)
 80063fc:	5ccb      	ldrb	r3, [r1, r3]
 80063fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006402:	4a05      	ldr	r2, [pc, #20]	; (8006418 <HAL_RCC_GetHCLKFreq+0x30>)
 8006404:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006406:	4b04      	ldr	r3, [pc, #16]	; (8006418 <HAL_RCC_GetHCLKFreq+0x30>)
 8006408:	681b      	ldr	r3, [r3, #0]
}
 800640a:	4618      	mov	r0, r3
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	46020c00 	.word	0x46020c00
 8006414:	08008f88 	.word	0x08008f88
 8006418:	20000014 	.word	0x20000014

0800641c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006420:	f7ff ffe2 	bl	80063e8 <HAL_RCC_GetHCLKFreq>
 8006424:	4602      	mov	r2, r0
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	091b      	lsrs	r3, r3, #4
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	4903      	ldr	r1, [pc, #12]	; (8006440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006432:	5ccb      	ldrb	r3, [r1, r3]
 8006434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006438:	4618      	mov	r0, r3
 800643a:	bd80      	pop	{r7, pc}
 800643c:	46020c00 	.word	0x46020c00
 8006440:	08008f98 	.word	0x08008f98

08006444 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	221f      	movs	r2, #31
 8006452:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006454:	4b15      	ldr	r3, [pc, #84]	; (80064ac <HAL_RCC_GetClockConfig+0x68>)
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	f003 0203 	and.w	r2, r3, #3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006460:	4b12      	ldr	r3, [pc, #72]	; (80064ac <HAL_RCC_GetClockConfig+0x68>)
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	f003 020f 	and.w	r2, r3, #15
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800646c:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <HAL_RCC_GetClockConfig+0x68>)
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8006478:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <HAL_RCC_GetClockConfig+0x68>)
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8006486:	4b09      	ldr	r3, [pc, #36]	; (80064ac <HAL_RCC_GetClockConfig+0x68>)
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006492:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <HAL_RCC_GetClockConfig+0x6c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 020f 	and.w	r2, r3, #15
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	601a      	str	r2, [r3, #0]
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	46020c00 	.word	0x46020c00
 80064b0:	40022000 	.word	0x40022000

080064b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80064bc:	4b3e      	ldr	r3, [pc, #248]	; (80065b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80064be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064c2:	f003 0304 	and.w	r3, r3, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064ca:	f7fe fd7f 	bl	8004fcc <HAL_PWREx_GetVoltageRange>
 80064ce:	6178      	str	r0, [r7, #20]
 80064d0:	e019      	b.n	8006506 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064d2:	4b39      	ldr	r3, [pc, #228]	; (80065b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80064d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064d8:	4a37      	ldr	r2, [pc, #220]	; (80065b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80064da:	f043 0304 	orr.w	r3, r3, #4
 80064de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80064e2:	4b35      	ldr	r3, [pc, #212]	; (80065b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80064e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80064f0:	f7fe fd6c 	bl	8004fcc <HAL_PWREx_GetVoltageRange>
 80064f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80064f6:	4b30      	ldr	r3, [pc, #192]	; (80065b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80064f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064fc:	4a2e      	ldr	r2, [pc, #184]	; (80065b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80064fe:	f023 0304 	bic.w	r3, r3, #4
 8006502:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800650c:	d003      	beq.n	8006516 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006514:	d109      	bne.n	800652a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800651c:	d202      	bcs.n	8006524 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800651e:	2301      	movs	r3, #1
 8006520:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006522:	e033      	b.n	800658c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006524:	2300      	movs	r3, #0
 8006526:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006528:	e030      	b.n	800658c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006530:	d208      	bcs.n	8006544 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006538:	d102      	bne.n	8006540 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800653a:	2303      	movs	r3, #3
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	e025      	b.n	800658c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e035      	b.n	80065b0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800654a:	d90f      	bls.n	800656c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d109      	bne.n	8006566 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006558:	d902      	bls.n	8006560 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800655a:	2300      	movs	r3, #0
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	e015      	b.n	800658c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006560:	2301      	movs	r3, #1
 8006562:	613b      	str	r3, [r7, #16]
 8006564:	e012      	b.n	800658c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006566:	2300      	movs	r3, #0
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	e00f      	b.n	800658c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006572:	d109      	bne.n	8006588 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800657a:	d102      	bne.n	8006582 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800657c:	2301      	movs	r3, #1
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	e004      	b.n	800658c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006582:	2302      	movs	r3, #2
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	e001      	b.n	800658c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006588:	2301      	movs	r3, #1
 800658a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800658c:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f023 020f 	bic.w	r2, r3, #15
 8006594:	4909      	ldr	r1, [pc, #36]	; (80065bc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800659c:	4b07      	ldr	r3, [pc, #28]	; (80065bc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 030f 	and.w	r3, r3, #15
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d001      	beq.n	80065ae <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	46020c00 	.word	0x46020c00
 80065bc:	40022000 	.word	0x40022000

080065c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80065c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065c4:	b0ba      	sub	sp, #232	; 0xe8
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065d2:	2300      	movs	r3, #0
 80065d4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	f002 0401 	and.w	r4, r2, #1
 80065e4:	2500      	movs	r5, #0
 80065e6:	ea54 0305 	orrs.w	r3, r4, r5
 80065ea:	d00b      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80065ec:	4bcb      	ldr	r3, [pc, #812]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065f2:	f023 0103 	bic.w	r1, r3, #3
 80065f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fc:	4ac7      	ldr	r2, [pc, #796]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065fe:	430b      	orrs	r3, r1
 8006600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	f002 0802 	and.w	r8, r2, #2
 8006610:	f04f 0900 	mov.w	r9, #0
 8006614:	ea58 0309 	orrs.w	r3, r8, r9
 8006618:	d00b      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800661a:	4bc0      	ldr	r3, [pc, #768]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800661c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006620:	f023 010c 	bic.w	r1, r3, #12
 8006624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662a:	4abc      	ldr	r2, [pc, #752]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800662c:	430b      	orrs	r3, r1
 800662e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f002 0a04 	and.w	sl, r2, #4
 800663e:	f04f 0b00 	mov.w	fp, #0
 8006642:	ea5a 030b 	orrs.w	r3, sl, fp
 8006646:	d00b      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006648:	4bb4      	ldr	r3, [pc, #720]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800664a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800664e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006658:	4ab0      	ldr	r2, [pc, #704]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800665a:	430b      	orrs	r3, r1
 800665c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f002 0308 	and.w	r3, r2, #8
 800666c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006670:	2300      	movs	r3, #0
 8006672:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006676:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800667a:	460b      	mov	r3, r1
 800667c:	4313      	orrs	r3, r2
 800667e:	d00b      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006680:	4ba6      	ldr	r3, [pc, #664]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006686:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800668a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800668e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006690:	4aa2      	ldr	r2, [pc, #648]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006692:	430b      	orrs	r3, r1
 8006694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006698:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	f002 0310 	and.w	r3, r2, #16
 80066a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066a8:	2300      	movs	r3, #0
 80066aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4313      	orrs	r3, r2
 80066b6:	d00b      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80066b8:	4b98      	ldr	r3, [pc, #608]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c8:	4a94      	ldr	r2, [pc, #592]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066ca:	430b      	orrs	r3, r1
 80066cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f002 0320 	and.w	r3, r2, #32
 80066dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066e0:	2300      	movs	r3, #0
 80066e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80066ea:	460b      	mov	r3, r1
 80066ec:	4313      	orrs	r3, r2
 80066ee:	d00b      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80066f0:	4b8a      	ldr	r3, [pc, #552]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066f6:	f023 0107 	bic.w	r1, r3, #7
 80066fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006700:	4a86      	ldr	r2, [pc, #536]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006702:	430b      	orrs	r3, r1
 8006704:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006718:	2300      	movs	r3, #0
 800671a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800671e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006722:	460b      	mov	r3, r1
 8006724:	4313      	orrs	r3, r2
 8006726:	d00b      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006728:	4b7c      	ldr	r3, [pc, #496]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800672a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800672e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006738:	4a78      	ldr	r2, [pc, #480]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800673a:	430b      	orrs	r3, r1
 800673c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800674c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006750:	2300      	movs	r3, #0
 8006752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006756:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800675a:	460b      	mov	r3, r1
 800675c:	4313      	orrs	r3, r2
 800675e:	d00b      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006760:	4b6e      	ldr	r3, [pc, #440]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800676a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800676e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006770:	4a6a      	ldr	r2, [pc, #424]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006772:	430b      	orrs	r3, r1
 8006774:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006778:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8006784:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006788:	2300      	movs	r3, #0
 800678a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800678e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006792:	460b      	mov	r3, r1
 8006794:	4313      	orrs	r3, r2
 8006796:	d00b      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006798:	4b60      	ldr	r3, [pc, #384]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800679a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800679e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a8:	4a5c      	ldr	r2, [pc, #368]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067aa:	430b      	orrs	r3, r1
 80067ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80067bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067c0:	2300      	movs	r3, #0
 80067c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80067ca:	460b      	mov	r3, r1
 80067cc:	4313      	orrs	r3, r2
 80067ce:	d00b      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80067d0:	4b52      	ldr	r3, [pc, #328]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067d6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80067da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e0:	4a4e      	ldr	r2, [pc, #312]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067e2:	430b      	orrs	r3, r1
 80067e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80067e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80067f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067f8:	2300      	movs	r3, #0
 80067fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006802:	460b      	mov	r3, r1
 8006804:	4313      	orrs	r3, r2
 8006806:	d00b      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006808:	4b44      	ldr	r3, [pc, #272]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800680a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800680e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006818:	4a40      	ldr	r2, [pc, #256]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800681a:	430b      	orrs	r3, r1
 800681c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006820:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800682c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006830:	2300      	movs	r3, #0
 8006832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006836:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800683a:	460b      	mov	r3, r1
 800683c:	4313      	orrs	r3, r2
 800683e:	d00b      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006840:	4b36      	ldr	r3, [pc, #216]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006846:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800684a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800684e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006850:	4a32      	ldr	r2, [pc, #200]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006852:	430b      	orrs	r3, r1
 8006854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006858:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006868:	2300      	movs	r3, #0
 800686a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800686e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006872:	460b      	mov	r3, r1
 8006874:	4313      	orrs	r3, r2
 8006876:	d00c      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006878:	4b28      	ldr	r3, [pc, #160]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800687a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800687e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800688a:	4a24      	ldr	r2, [pc, #144]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800688c:	430b      	orrs	r3, r1
 800688e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800689e:	67bb      	str	r3, [r7, #120]	; 0x78
 80068a0:	2300      	movs	r3, #0
 80068a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80068a8:	460b      	mov	r3, r1
 80068aa:	4313      	orrs	r3, r2
 80068ac:	d04f      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80068ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b6:	2b80      	cmp	r3, #128	; 0x80
 80068b8:	d02d      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80068ba:	2b80      	cmp	r3, #128	; 0x80
 80068bc:	d827      	bhi.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80068be:	2b60      	cmp	r3, #96	; 0x60
 80068c0:	d02e      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80068c2:	2b60      	cmp	r3, #96	; 0x60
 80068c4:	d823      	bhi.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80068c6:	2b40      	cmp	r3, #64	; 0x40
 80068c8:	d006      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80068ca:	2b40      	cmp	r3, #64	; 0x40
 80068cc:	d81f      	bhi.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d009      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	d011      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80068d6:	e01a      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068d8:	4b10      	ldr	r3, [pc, #64]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	4a0f      	ldr	r2, [pc, #60]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068e2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80068e4:	e01d      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ea:	3308      	adds	r3, #8
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fc27 	bl	8007140 <RCCEx_PLL2_Config>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80068f8:	e013      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068fe:	332c      	adds	r3, #44	; 0x2c
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fcb5 	bl	8007270 <RCCEx_PLL3_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800690c:	e009      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006914:	e005      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8006916:	bf00      	nop
 8006918:	e003      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800691a:	bf00      	nop
 800691c:	46020c00 	.word	0x46020c00
        break;
 8006920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006922:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10d      	bne.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800692a:	4bb6      	ldr	r3, [pc, #728]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800692c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006930:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8006934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693c:	4ab1      	ldr	r2, [pc, #708]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800693e:	430b      	orrs	r3, r1
 8006940:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006944:	e003      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006946:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800694a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800694e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006956:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800695a:	673b      	str	r3, [r7, #112]	; 0x70
 800695c:	2300      	movs	r3, #0
 800695e:	677b      	str	r3, [r7, #116]	; 0x74
 8006960:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006964:	460b      	mov	r3, r1
 8006966:	4313      	orrs	r3, r2
 8006968:	d053      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800696a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800696e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006976:	d033      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697c:	d82c      	bhi.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800697e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006982:	d02f      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006988:	d826      	bhi.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800698a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800698e:	d008      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006994:	d820      	bhi.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800699a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699e:	d011      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80069a0:	e01a      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069a2:	4b98      	ldr	r3, [pc, #608]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	4a97      	ldr	r2, [pc, #604]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80069a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ac:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80069ae:	e01a      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069b4:	3308      	adds	r3, #8
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fbc2 	bl	8007140 <RCCEx_PLL2_Config>
 80069bc:	4603      	mov	r3, r0
 80069be:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80069c2:	e010      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069c8:	332c      	adds	r3, #44	; 0x2c
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fc50 	bl	8007270 <RCCEx_PLL3_Config>
 80069d0:	4603      	mov	r3, r0
 80069d2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80069d6:	e006      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80069de:	e002      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80069e0:	bf00      	nop
 80069e2:	e000      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80069e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10d      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80069ee:	4b85      	ldr	r3, [pc, #532]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80069f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80069f4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80069f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a00:	4a80      	ldr	r2, [pc, #512]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a02:	430b      	orrs	r3, r1
 8006a04:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006a08:	e003      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a0e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006a1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a20:	2300      	movs	r3, #0
 8006a22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a24:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	d046      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a36:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006a3a:	d028      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006a3c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006a40:	d821      	bhi.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a46:	d022      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a4c:	d81b      	bhi.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006a4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a52:	d01c      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006a54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a58:	d815      	bhi.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a5e:	d008      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a64:	d80f      	bhi.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d011      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6e:	d00e      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006a70:	e009      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a76:	3308      	adds	r3, #8
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fb61 	bl	8007140 <RCCEx_PLL2_Config>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a84:	e004      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a8c:	e000      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8006a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a90:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10d      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006a98:	4b5a      	ldr	r3, [pc, #360]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a9e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006aaa:	4a56      	ldr	r2, [pc, #344]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006aac:	430b      	orrs	r3, r1
 8006aae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006ab2:	e003      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ab8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006abc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006ac8:	663b      	str	r3, [r7, #96]	; 0x60
 8006aca:	2300      	movs	r3, #0
 8006acc:	667b      	str	r3, [r7, #100]	; 0x64
 8006ace:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	d03f      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d81e      	bhi.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006ae4:	a201      	add	r2, pc, #4	; (adr r2, 8006aec <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aea:	bf00      	nop
 8006aec:	08006b2b 	.word	0x08006b2b
 8006af0:	08006b01 	.word	0x08006b01
 8006af4:	08006b0f 	.word	0x08006b0f
 8006af8:	08006b2b 	.word	0x08006b2b
 8006afc:	08006b2b 	.word	0x08006b2b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b00:	4b40      	ldr	r3, [pc, #256]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	4a3f      	ldr	r2, [pc, #252]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b0a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006b0c:	e00e      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b12:	332c      	adds	r3, #44	; 0x2c
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 fbab 	bl	8007270 <RCCEx_PLL3_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006b20:	e004      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006b28:	e000      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8006b2a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006b2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10d      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006b34:	4b33      	ldr	r3, [pc, #204]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b3a:	f023 0107 	bic.w	r1, r3, #7
 8006b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b46:	4a2f      	ldr	r2, [pc, #188]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006b4e:	e003      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b50:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b54:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006b64:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b66:	2300      	movs	r3, #0
 8006b68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b6a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4313      	orrs	r3, r2
 8006b72:	d04d      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006b74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b80:	d028      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006b82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b86:	d821      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006b88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b8c:	d024      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006b8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b92:	d81b      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006b94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b98:	d00e      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8006b9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b9e:	d815      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01b      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8006ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba8:	d110      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006baa:	4b16      	ldr	r3, [pc, #88]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bae:	4a15      	ldr	r2, [pc, #84]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bb4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006bb6:	e012      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006bb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bbc:	332c      	adds	r3, #44	; 0x2c
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fb56 	bl	8007270 <RCCEx_PLL3_Config>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006bca:	e008      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006bd2:	e004      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006bd4:	bf00      	nop
 8006bd6:	e002      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006bd8:	bf00      	nop
 8006bda:	e000      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006bdc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006bde:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d110      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006be6:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006bf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bf8:	4a02      	ldr	r2, [pc, #8]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006c00:	e006      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006c02:	bf00      	nop
 8006c04:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c08:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c0c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006c1c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c1e:	2300      	movs	r3, #0
 8006c20:	657b      	str	r3, [r7, #84]	; 0x54
 8006c22:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006c26:	460b      	mov	r3, r1
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f000 80b5 	beq.w	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c34:	4b9d      	ldr	r3, [pc, #628]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c3a:	f003 0304 	and.w	r3, r3, #4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d113      	bne.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c42:	4b9a      	ldr	r3, [pc, #616]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c48:	4a98      	ldr	r2, [pc, #608]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c4a:	f043 0304 	orr.w	r3, r3, #4
 8006c4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006c52:	4b96      	ldr	r3, [pc, #600]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006c64:	2301      	movs	r3, #1
 8006c66:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006c6a:	4b91      	ldr	r3, [pc, #580]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6e:	4a90      	ldr	r2, [pc, #576]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006c70:	f043 0301 	orr.w	r3, r3, #1
 8006c74:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c76:	f7fa fd13 	bl	80016a0 <HAL_GetTick>
 8006c7a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c7e:	e00b      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c80:	f7fa fd0e 	bl	80016a0 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d903      	bls.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006c96:	e005      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c98:	4b85      	ldr	r3, [pc, #532]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0ed      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8006ca4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d165      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006cac:	4b7f      	ldr	r3, [pc, #508]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d023      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8006cc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cc6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d01b      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cd2:	4b76      	ldr	r3, [pc, #472]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ce0:	4b72      	ldr	r3, [pc, #456]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ce6:	4a71      	ldr	r2, [pc, #452]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cf0:	4b6e      	ldr	r3, [pc, #440]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cf6:	4a6d      	ldr	r2, [pc, #436]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cfc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d00:	4a6a      	ldr	r2, [pc, #424]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d019      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d16:	f7fa fcc3 	bl	80016a0 <HAL_GetTick>
 8006d1a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d1e:	e00d      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d20:	f7fa fcbe 	bl	80016a0 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d2a:	1ad2      	subs	r2, r2, r3
 8006d2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d903      	bls.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006d3a:	e006      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d3c:	4b5b      	ldr	r3, [pc, #364]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0ea      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006d4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10d      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006d52:	4b56      	ldr	r3, [pc, #344]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d58:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006d64:	4a51      	ldr	r2, [pc, #324]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d66:	430b      	orrs	r3, r1
 8006d68:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006d6c:	e008      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d72:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006d76:	e003      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d78:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d7c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d80:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d107      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d88:	4b48      	ldr	r3, [pc, #288]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d8e:	4a47      	ldr	r2, [pc, #284]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d90:	f023 0304 	bic.w	r3, r3, #4
 8006d94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006d98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006da4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006da6:	2300      	movs	r3, #0
 8006da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006daa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006dae:	460b      	mov	r3, r1
 8006db0:	4313      	orrs	r3, r2
 8006db2:	d042      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006db4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006db8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dbc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006dc0:	d022      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006dc2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006dc6:	d81b      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dcc:	d011      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dd2:	d815      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d019      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006dd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ddc:	d110      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006de2:	3308      	adds	r3, #8
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 f9ab 	bl	8007140 <RCCEx_PLL2_Config>
 8006dea:	4603      	mov	r3, r0
 8006dec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006df0:	e00d      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df2:	4b2e      	ldr	r3, [pc, #184]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	4a2d      	ldr	r2, [pc, #180]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dfc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006dfe:	e006      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006e06:	e002      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006e08:	bf00      	nop
 8006e0a:	e000      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006e0c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006e0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10d      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006e16:	4b25      	ldr	r3, [pc, #148]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e1c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e28:	4a20      	ldr	r2, [pc, #128]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e2a:	430b      	orrs	r3, r1
 8006e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e30:	e003      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e32:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006e36:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006e46:	643b      	str	r3, [r7, #64]	; 0x40
 8006e48:	2300      	movs	r3, #0
 8006e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e4c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006e50:	460b      	mov	r3, r1
 8006e52:	4313      	orrs	r3, r2
 8006e54:	d032      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e62:	d00b      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e68:	d804      	bhi.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d008      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e72:	d007      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006e7a:	e004      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006e7c:	bf00      	nop
 8006e7e:	e002      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006e80:	bf00      	nop
 8006e82:	e000      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006e84:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006e86:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d112      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ea0:	4a02      	ldr	r2, [pc, #8]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006ea8:	e008      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006eaa:	bf00      	nop
 8006eac:	46020c00 	.word	0x46020c00
 8006eb0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006eb8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006ebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006ec8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eca:	2300      	movs	r3, #0
 8006ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ece:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	d00c      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006ed8:	4b98      	ldr	r3, [pc, #608]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006eda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ede:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006eea:	4a94      	ldr	r2, [pc, #592]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006eec:	430b      	orrs	r3, r1
 8006eee:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006efe:	633b      	str	r3, [r7, #48]	; 0x30
 8006f00:	2300      	movs	r3, #0
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
 8006f04:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	d019      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f1a:	d105      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f1c:	4b87      	ldr	r3, [pc, #540]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f20:	4a86      	ldr	r2, [pc, #536]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f26:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006f28:	4b84      	ldr	r3, [pc, #528]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f2e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f3a:	4a80      	ldr	r2, [pc, #512]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f50:	2300      	movs	r3, #0
 8006f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	d00c      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006f5e:	4b77      	ldr	r3, [pc, #476]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f70:	4972      	ldr	r1, [pc, #456]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006f78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006f84:	623b      	str	r3, [r7, #32]
 8006f86:	2300      	movs	r3, #0
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
 8006f8a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4313      	orrs	r3, r2
 8006f92:	d00c      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006f94:	4b69      	ldr	r3, [pc, #420]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fa2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006fa6:	4965      	ldr	r1, [pc, #404]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006fba:	61bb      	str	r3, [r7, #24]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	d00c      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006fca:	4b5c      	ldr	r3, [pc, #368]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006fd0:	f023 0218 	bic.w	r2, r3, #24
 8006fd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fd8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006fdc:	4957      	ldr	r1, [pc, #348]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006fe4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	d032      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007004:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800700c:	d105      	bne.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800700e:	4b4b      	ldr	r3, [pc, #300]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	4a4a      	ldr	r2, [pc, #296]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007018:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800701a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800701e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007022:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007026:	d108      	bne.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800702c:	3308      	adds	r3, #8
 800702e:	4618      	mov	r0, r3
 8007030:	f000 f886 	bl	8007140 <RCCEx_PLL2_Config>
 8007034:	4603      	mov	r3, r0
 8007036:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800703a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10d      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007042:	4b3e      	ldr	r3, [pc, #248]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007044:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800704c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007050:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007054:	4939      	ldr	r1, [pc, #228]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007056:	4313      	orrs	r3, r2
 8007058:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800705c:	e003      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007062:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8007072:	60bb      	str	r3, [r7, #8]
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800707c:	460b      	mov	r3, r1
 800707e:	4313      	orrs	r3, r2
 8007080:	d03a      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800708a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800708e:	d00e      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8007090:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007094:	d815      	bhi.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007096:	2b00      	cmp	r3, #0
 8007098:	d017      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800709a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800709e:	d110      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070a0:	4b26      	ldr	r3, [pc, #152]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a4:	4a25      	ldr	r2, [pc, #148]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070aa:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80070ac:	e00e      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070b2:	3308      	adds	r3, #8
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 f843 	bl	8007140 <RCCEx_PLL2_Config>
 80070ba:	4603      	mov	r3, r0
 80070bc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80070c0:	e004      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80070c8:	e000      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80070ca:	bf00      	nop
    }
    if (ret == HAL_OK)
 80070cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10d      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80070d4:	4b19      	ldr	r3, [pc, #100]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80070de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e6:	4915      	ldr	r1, [pc, #84]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80070ee:	e003      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80070f4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80070f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007104:	603b      	str	r3, [r7, #0]
 8007106:	2300      	movs	r3, #0
 8007108:	607b      	str	r3, [r7, #4]
 800710a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800710e:	460b      	mov	r3, r1
 8007110:	4313      	orrs	r3, r2
 8007112:	d00c      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007114:	4b09      	ldr	r3, [pc, #36]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800711a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800711e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007122:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007126:	4905      	ldr	r1, [pc, #20]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007128:	4313      	orrs	r3, r2
 800712a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800712e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8007132:	4618      	mov	r0, r3
 8007134:	37e8      	adds	r7, #232	; 0xe8
 8007136:	46bd      	mov	sp, r7
 8007138:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800713c:	46020c00 	.word	0x46020c00

08007140 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007148:	4b47      	ldr	r3, [pc, #284]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a46      	ldr	r2, [pc, #280]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 800714e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007152:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007154:	f7fa faa4 	bl	80016a0 <HAL_GetTick>
 8007158:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800715a:	e008      	b.n	800716e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800715c:	f7fa faa0 	bl	80016a0 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e077      	b.n	800725e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800716e:	4b3e      	ldr	r3, [pc, #248]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f0      	bne.n	800715c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800717a:	4b3b      	ldr	r3, [pc, #236]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007182:	f023 0303 	bic.w	r3, r3, #3
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6811      	ldr	r1, [r2, #0]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6852      	ldr	r2, [r2, #4]
 800718e:	3a01      	subs	r2, #1
 8007190:	0212      	lsls	r2, r2, #8
 8007192:	430a      	orrs	r2, r1
 8007194:	4934      	ldr	r1, [pc, #208]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 8007196:	4313      	orrs	r3, r2
 8007198:	62cb      	str	r3, [r1, #44]	; 0x2c
 800719a:	4b33      	ldr	r3, [pc, #204]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 800719c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800719e:	4b33      	ldr	r3, [pc, #204]	; (800726c <RCCEx_PLL2_Config+0x12c>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6892      	ldr	r2, [r2, #8]
 80071a6:	3a01      	subs	r2, #1
 80071a8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	68d2      	ldr	r2, [r2, #12]
 80071b0:	3a01      	subs	r2, #1
 80071b2:	0252      	lsls	r2, r2, #9
 80071b4:	b292      	uxth	r2, r2
 80071b6:	4311      	orrs	r1, r2
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	6912      	ldr	r2, [r2, #16]
 80071bc:	3a01      	subs	r2, #1
 80071be:	0412      	lsls	r2, r2, #16
 80071c0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80071c4:	4311      	orrs	r1, r2
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6952      	ldr	r2, [r2, #20]
 80071ca:	3a01      	subs	r2, #1
 80071cc:	0612      	lsls	r2, r2, #24
 80071ce:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80071d2:	430a      	orrs	r2, r1
 80071d4:	4924      	ldr	r1, [pc, #144]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80071da:	4b23      	ldr	r3, [pc, #140]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 80071dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071de:	f023 020c 	bic.w	r2, r3, #12
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	4920      	ldr	r1, [pc, #128]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80071ec:	4b1e      	ldr	r3, [pc, #120]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 80071ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	491c      	ldr	r1, [pc, #112]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80071fa:	4b1b      	ldr	r3, [pc, #108]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 80071fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fe:	4a1a      	ldr	r2, [pc, #104]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 8007200:	f023 0310 	bic.w	r3, r3, #16
 8007204:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007206:	4b18      	ldr	r3, [pc, #96]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800720e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	69d2      	ldr	r2, [r2, #28]
 8007216:	00d2      	lsls	r2, r2, #3
 8007218:	4913      	ldr	r1, [pc, #76]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 800721a:	4313      	orrs	r3, r2
 800721c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800721e:	4b12      	ldr	r3, [pc, #72]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 8007220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007222:	4a11      	ldr	r2, [pc, #68]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 8007224:	f043 0310 	orr.w	r3, r3, #16
 8007228:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800722a:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a0e      	ldr	r2, [pc, #56]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 8007230:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007234:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007236:	f7fa fa33 	bl	80016a0 <HAL_GetTick>
 800723a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800723c:	e008      	b.n	8007250 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800723e:	f7fa fa2f 	bl	80016a0 <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	2b02      	cmp	r3, #2
 800724a:	d901      	bls.n	8007250 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e006      	b.n	800725e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007250:	4b05      	ldr	r3, [pc, #20]	; (8007268 <RCCEx_PLL2_Config+0x128>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0f0      	beq.n	800723e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800725c:	2300      	movs	r3, #0

}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	46020c00 	.word	0x46020c00
 800726c:	80800000 	.word	0x80800000

08007270 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007278:	4b47      	ldr	r3, [pc, #284]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a46      	ldr	r2, [pc, #280]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 800727e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007282:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007284:	f7fa fa0c 	bl	80016a0 <HAL_GetTick>
 8007288:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800728a:	e008      	b.n	800729e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800728c:	f7fa fa08 	bl	80016a0 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d901      	bls.n	800729e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e077      	b.n	800738e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800729e:	4b3e      	ldr	r3, [pc, #248]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f0      	bne.n	800728c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80072aa:	4b3b      	ldr	r3, [pc, #236]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80072b2:	f023 0303 	bic.w	r3, r3, #3
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6811      	ldr	r1, [r2, #0]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	6852      	ldr	r2, [r2, #4]
 80072be:	3a01      	subs	r2, #1
 80072c0:	0212      	lsls	r2, r2, #8
 80072c2:	430a      	orrs	r2, r1
 80072c4:	4934      	ldr	r1, [pc, #208]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	630b      	str	r3, [r1, #48]	; 0x30
 80072ca:	4b33      	ldr	r3, [pc, #204]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 80072cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ce:	4b33      	ldr	r3, [pc, #204]	; (800739c <RCCEx_PLL3_Config+0x12c>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	6892      	ldr	r2, [r2, #8]
 80072d6:	3a01      	subs	r2, #1
 80072d8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	68d2      	ldr	r2, [r2, #12]
 80072e0:	3a01      	subs	r2, #1
 80072e2:	0252      	lsls	r2, r2, #9
 80072e4:	b292      	uxth	r2, r2
 80072e6:	4311      	orrs	r1, r2
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	6912      	ldr	r2, [r2, #16]
 80072ec:	3a01      	subs	r2, #1
 80072ee:	0412      	lsls	r2, r2, #16
 80072f0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80072f4:	4311      	orrs	r1, r2
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	6952      	ldr	r2, [r2, #20]
 80072fa:	3a01      	subs	r2, #1
 80072fc:	0612      	lsls	r2, r2, #24
 80072fe:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007302:	430a      	orrs	r2, r1
 8007304:	4924      	ldr	r1, [pc, #144]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 8007306:	4313      	orrs	r3, r2
 8007308:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800730a:	4b23      	ldr	r3, [pc, #140]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	f023 020c 	bic.w	r2, r3, #12
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	4920      	ldr	r1, [pc, #128]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 8007318:	4313      	orrs	r3, r2
 800731a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800731c:	4b1e      	ldr	r3, [pc, #120]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 800731e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	491c      	ldr	r1, [pc, #112]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 8007326:	4313      	orrs	r3, r2
 8007328:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800732a:	4b1b      	ldr	r3, [pc, #108]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 800732c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732e:	4a1a      	ldr	r2, [pc, #104]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 8007330:	f023 0310 	bic.w	r3, r3, #16
 8007334:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007336:	4b18      	ldr	r3, [pc, #96]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 8007338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800733e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	69d2      	ldr	r2, [r2, #28]
 8007346:	00d2      	lsls	r2, r2, #3
 8007348:	4913      	ldr	r1, [pc, #76]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 800734a:	4313      	orrs	r3, r2
 800734c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800734e:	4b12      	ldr	r3, [pc, #72]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	4a11      	ldr	r2, [pc, #68]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 8007354:	f043 0310 	orr.w	r3, r3, #16
 8007358:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800735a:	4b0f      	ldr	r3, [pc, #60]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a0e      	ldr	r2, [pc, #56]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 8007360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007364:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007366:	f7fa f99b 	bl	80016a0 <HAL_GetTick>
 800736a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800736c:	e008      	b.n	8007380 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800736e:	f7fa f997 	bl	80016a0 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e006      	b.n	800738e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007380:	4b05      	ldr	r3, [pc, #20]	; (8007398 <RCCEx_PLL3_Config+0x128>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0f0      	beq.n	800736e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	46020c00 	.word	0x46020c00
 800739c:	80800000 	.word	0x80800000

080073a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e049      	b.n	8007446 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d106      	bne.n	80073cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f841 	bl	800744e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3304      	adds	r3, #4
 80073dc:	4619      	mov	r1, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	f000 fa88 	bl	80078f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
	...

08007464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	d001      	beq.n	800747c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e072      	b.n	8007562 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0201 	orr.w	r2, r2, #1
 8007492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a35      	ldr	r2, [pc, #212]	; (8007570 <HAL_TIM_Base_Start_IT+0x10c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d040      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xbc>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a34      	ldr	r2, [pc, #208]	; (8007574 <HAL_TIM_Base_Start_IT+0x110>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d03b      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xbc>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b0:	d036      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xbc>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074ba:	d031      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xbc>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a2d      	ldr	r2, [pc, #180]	; (8007578 <HAL_TIM_Base_Start_IT+0x114>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d02c      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xbc>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a2c      	ldr	r2, [pc, #176]	; (800757c <HAL_TIM_Base_Start_IT+0x118>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d027      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xbc>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a2a      	ldr	r2, [pc, #168]	; (8007580 <HAL_TIM_Base_Start_IT+0x11c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d022      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xbc>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a29      	ldr	r2, [pc, #164]	; (8007584 <HAL_TIM_Base_Start_IT+0x120>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d01d      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xbc>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a27      	ldr	r2, [pc, #156]	; (8007588 <HAL_TIM_Base_Start_IT+0x124>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d018      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xbc>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a26      	ldr	r2, [pc, #152]	; (800758c <HAL_TIM_Base_Start_IT+0x128>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d013      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xbc>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a24      	ldr	r2, [pc, #144]	; (8007590 <HAL_TIM_Base_Start_IT+0x12c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d00e      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xbc>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a23      	ldr	r2, [pc, #140]	; (8007594 <HAL_TIM_Base_Start_IT+0x130>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d009      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xbc>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a21      	ldr	r2, [pc, #132]	; (8007598 <HAL_TIM_Base_Start_IT+0x134>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d004      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xbc>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a20      	ldr	r2, [pc, #128]	; (800759c <HAL_TIM_Base_Start_IT+0x138>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d115      	bne.n	800754c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	4b1e      	ldr	r3, [pc, #120]	; (80075a0 <HAL_TIM_Base_Start_IT+0x13c>)
 8007528:	4013      	ands	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b06      	cmp	r3, #6
 8007530:	d015      	beq.n	800755e <HAL_TIM_Base_Start_IT+0xfa>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007538:	d011      	beq.n	800755e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f042 0201 	orr.w	r2, r2, #1
 8007548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800754a:	e008      	b.n	800755e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0201 	orr.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	e000      	b.n	8007560 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800755e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	40012c00 	.word	0x40012c00
 8007574:	50012c00 	.word	0x50012c00
 8007578:	40000400 	.word	0x40000400
 800757c:	50000400 	.word	0x50000400
 8007580:	40000800 	.word	0x40000800
 8007584:	50000800 	.word	0x50000800
 8007588:	40000c00 	.word	0x40000c00
 800758c:	50000c00 	.word	0x50000c00
 8007590:	40013400 	.word	0x40013400
 8007594:	50013400 	.word	0x50013400
 8007598:	40014000 	.word	0x40014000
 800759c:	50014000 	.word	0x50014000
 80075a0:	00010007 	.word	0x00010007

080075a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d122      	bne.n	8007600 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d11b      	bne.n	8007600 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f06f 0202 	mvn.w	r2, #2
 80075d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	f003 0303 	and.w	r3, r3, #3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f965 	bl	80078b6 <HAL_TIM_IC_CaptureCallback>
 80075ec:	e005      	b.n	80075fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f957 	bl	80078a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f968 	bl	80078ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f003 0304 	and.w	r3, r3, #4
 800760a:	2b04      	cmp	r3, #4
 800760c:	d122      	bne.n	8007654 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b04      	cmp	r3, #4
 800761a:	d11b      	bne.n	8007654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f06f 0204 	mvn.w	r2, #4
 8007624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f93b 	bl	80078b6 <HAL_TIM_IC_CaptureCallback>
 8007640:	e005      	b.n	800764e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f92d 	bl	80078a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f93e 	bl	80078ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b08      	cmp	r3, #8
 8007660:	d122      	bne.n	80076a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f003 0308 	and.w	r3, r3, #8
 800766c:	2b08      	cmp	r3, #8
 800766e:	d11b      	bne.n	80076a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f06f 0208 	mvn.w	r2, #8
 8007678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2204      	movs	r2, #4
 800767e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	f003 0303 	and.w	r3, r3, #3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f911 	bl	80078b6 <HAL_TIM_IC_CaptureCallback>
 8007694:	e005      	b.n	80076a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f903 	bl	80078a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f914 	bl	80078ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	f003 0310 	and.w	r3, r3, #16
 80076b2:	2b10      	cmp	r3, #16
 80076b4:	d122      	bne.n	80076fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f003 0310 	and.w	r3, r3, #16
 80076c0:	2b10      	cmp	r3, #16
 80076c2:	d11b      	bne.n	80076fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f06f 0210 	mvn.w	r2, #16
 80076cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2208      	movs	r2, #8
 80076d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f8e7 	bl	80078b6 <HAL_TIM_IC_CaptureCallback>
 80076e8:	e005      	b.n	80076f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f8d9 	bl	80078a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f8ea 	bl	80078ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b01      	cmp	r3, #1
 8007708:	d10e      	bne.n	8007728 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b01      	cmp	r3, #1
 8007716:	d107      	bne.n	8007728 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f06f 0201 	mvn.w	r2, #1
 8007720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7f9 fe12 	bl	800134c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007732:	2b80      	cmp	r3, #128	; 0x80
 8007734:	d10e      	bne.n	8007754 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007740:	2b80      	cmp	r3, #128	; 0x80
 8007742:	d107      	bne.n	8007754 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800774c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f9d4 	bl	8007afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007762:	d10e      	bne.n	8007782 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776e:	2b80      	cmp	r3, #128	; 0x80
 8007770:	d107      	bne.n	8007782 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800777a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f9c7 	bl	8007b10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778c:	2b40      	cmp	r3, #64	; 0x40
 800778e:	d10e      	bne.n	80077ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779a:	2b40      	cmp	r3, #64	; 0x40
 800779c:	d107      	bne.n	80077ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f898 	bl	80078de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f003 0320 	and.w	r3, r3, #32
 80077b8:	2b20      	cmp	r3, #32
 80077ba:	d10e      	bne.n	80077da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d107      	bne.n	80077da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f06f 0220 	mvn.w	r2, #32
 80077d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f987 	bl	8007ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077e8:	d10f      	bne.n	800780a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077f8:	d107      	bne.n	800780a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f98d 	bl	8007b24 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007814:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007818:	d10f      	bne.n	800783a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007828:	d107      	bne.n	800783a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f97f 	bl	8007b38 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007848:	d10f      	bne.n	800786a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007858:	d107      	bne.n	800786a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f971 	bl	8007b4c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007874:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007878:	d10f      	bne.n	800789a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007884:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007888:	d107      	bne.n	800789a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f963 	bl	8007b60 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800789a:	bf00      	nop
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b083      	sub	sp, #12
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078aa:	bf00      	nop
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078d2:	bf00      	nop
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
	...

080078f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a68      	ldr	r2, [pc, #416]	; (8007aa8 <TIM_Base_SetConfig+0x1b4>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d02b      	beq.n	8007964 <TIM_Base_SetConfig+0x70>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a67      	ldr	r2, [pc, #412]	; (8007aac <TIM_Base_SetConfig+0x1b8>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d027      	beq.n	8007964 <TIM_Base_SetConfig+0x70>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791a:	d023      	beq.n	8007964 <TIM_Base_SetConfig+0x70>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007922:	d01f      	beq.n	8007964 <TIM_Base_SetConfig+0x70>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a62      	ldr	r2, [pc, #392]	; (8007ab0 <TIM_Base_SetConfig+0x1bc>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d01b      	beq.n	8007964 <TIM_Base_SetConfig+0x70>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a61      	ldr	r2, [pc, #388]	; (8007ab4 <TIM_Base_SetConfig+0x1c0>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d017      	beq.n	8007964 <TIM_Base_SetConfig+0x70>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a60      	ldr	r2, [pc, #384]	; (8007ab8 <TIM_Base_SetConfig+0x1c4>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d013      	beq.n	8007964 <TIM_Base_SetConfig+0x70>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a5f      	ldr	r2, [pc, #380]	; (8007abc <TIM_Base_SetConfig+0x1c8>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d00f      	beq.n	8007964 <TIM_Base_SetConfig+0x70>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a5e      	ldr	r2, [pc, #376]	; (8007ac0 <TIM_Base_SetConfig+0x1cc>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d00b      	beq.n	8007964 <TIM_Base_SetConfig+0x70>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a5d      	ldr	r2, [pc, #372]	; (8007ac4 <TIM_Base_SetConfig+0x1d0>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d007      	beq.n	8007964 <TIM_Base_SetConfig+0x70>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a5c      	ldr	r2, [pc, #368]	; (8007ac8 <TIM_Base_SetConfig+0x1d4>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d003      	beq.n	8007964 <TIM_Base_SetConfig+0x70>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a5b      	ldr	r2, [pc, #364]	; (8007acc <TIM_Base_SetConfig+0x1d8>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d108      	bne.n	8007976 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a4b      	ldr	r2, [pc, #300]	; (8007aa8 <TIM_Base_SetConfig+0x1b4>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d043      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a4a      	ldr	r2, [pc, #296]	; (8007aac <TIM_Base_SetConfig+0x1b8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d03f      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800798c:	d03b      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007994:	d037      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a45      	ldr	r2, [pc, #276]	; (8007ab0 <TIM_Base_SetConfig+0x1bc>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d033      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a44      	ldr	r2, [pc, #272]	; (8007ab4 <TIM_Base_SetConfig+0x1c0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d02f      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a43      	ldr	r2, [pc, #268]	; (8007ab8 <TIM_Base_SetConfig+0x1c4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d02b      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a42      	ldr	r2, [pc, #264]	; (8007abc <TIM_Base_SetConfig+0x1c8>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d027      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a41      	ldr	r2, [pc, #260]	; (8007ac0 <TIM_Base_SetConfig+0x1cc>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d023      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a40      	ldr	r2, [pc, #256]	; (8007ac4 <TIM_Base_SetConfig+0x1d0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d01f      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a3f      	ldr	r2, [pc, #252]	; (8007ac8 <TIM_Base_SetConfig+0x1d4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d01b      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a3e      	ldr	r2, [pc, #248]	; (8007acc <TIM_Base_SetConfig+0x1d8>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d017      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a3d      	ldr	r2, [pc, #244]	; (8007ad0 <TIM_Base_SetConfig+0x1dc>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d013      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a3c      	ldr	r2, [pc, #240]	; (8007ad4 <TIM_Base_SetConfig+0x1e0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00f      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a3b      	ldr	r2, [pc, #236]	; (8007ad8 <TIM_Base_SetConfig+0x1e4>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d00b      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a3a      	ldr	r2, [pc, #232]	; (8007adc <TIM_Base_SetConfig+0x1e8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d007      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a39      	ldr	r2, [pc, #228]	; (8007ae0 <TIM_Base_SetConfig+0x1ec>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d003      	beq.n	8007a06 <TIM_Base_SetConfig+0x112>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a38      	ldr	r2, [pc, #224]	; (8007ae4 <TIM_Base_SetConfig+0x1f0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d108      	bne.n	8007a18 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a1a      	ldr	r2, [pc, #104]	; (8007aa8 <TIM_Base_SetConfig+0x1b4>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d023      	beq.n	8007a8c <TIM_Base_SetConfig+0x198>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a19      	ldr	r2, [pc, #100]	; (8007aac <TIM_Base_SetConfig+0x1b8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d01f      	beq.n	8007a8c <TIM_Base_SetConfig+0x198>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a1e      	ldr	r2, [pc, #120]	; (8007ac8 <TIM_Base_SetConfig+0x1d4>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d01b      	beq.n	8007a8c <TIM_Base_SetConfig+0x198>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a1d      	ldr	r2, [pc, #116]	; (8007acc <TIM_Base_SetConfig+0x1d8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d017      	beq.n	8007a8c <TIM_Base_SetConfig+0x198>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a1c      	ldr	r2, [pc, #112]	; (8007ad0 <TIM_Base_SetConfig+0x1dc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d013      	beq.n	8007a8c <TIM_Base_SetConfig+0x198>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a1b      	ldr	r2, [pc, #108]	; (8007ad4 <TIM_Base_SetConfig+0x1e0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00f      	beq.n	8007a8c <TIM_Base_SetConfig+0x198>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a1a      	ldr	r2, [pc, #104]	; (8007ad8 <TIM_Base_SetConfig+0x1e4>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00b      	beq.n	8007a8c <TIM_Base_SetConfig+0x198>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a19      	ldr	r2, [pc, #100]	; (8007adc <TIM_Base_SetConfig+0x1e8>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d007      	beq.n	8007a8c <TIM_Base_SetConfig+0x198>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a18      	ldr	r2, [pc, #96]	; (8007ae0 <TIM_Base_SetConfig+0x1ec>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_Base_SetConfig+0x198>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a17      	ldr	r2, [pc, #92]	; (8007ae4 <TIM_Base_SetConfig+0x1f0>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d103      	bne.n	8007a94 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	691a      	ldr	r2, [r3, #16]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	615a      	str	r2, [r3, #20]
}
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40012c00 	.word	0x40012c00
 8007aac:	50012c00 	.word	0x50012c00
 8007ab0:	40000400 	.word	0x40000400
 8007ab4:	50000400 	.word	0x50000400
 8007ab8:	40000800 	.word	0x40000800
 8007abc:	50000800 	.word	0x50000800
 8007ac0:	40000c00 	.word	0x40000c00
 8007ac4:	50000c00 	.word	0x50000c00
 8007ac8:	40013400 	.word	0x40013400
 8007acc:	50013400 	.word	0x50013400
 8007ad0:	40014000 	.word	0x40014000
 8007ad4:	50014000 	.word	0x50014000
 8007ad8:	40014400 	.word	0x40014400
 8007adc:	50014400 	.word	0x50014400
 8007ae0:	40014800 	.word	0x40014800
 8007ae4:	50014800 	.word	0x50014800

08007ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08e      	sub	sp, #56	; 0x38
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
 8007b80:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8007b82:	2234      	movs	r2, #52	; 0x34
 8007b84:	2100      	movs	r1, #0
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f001 f9c2 	bl	8008f10 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f023 0303 	bic.w	r3, r3, #3
 8007b92:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	f1a3 0208 	sub.w	r2, r3, #8
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8007bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	4413      	add	r3, r2
 8007bcc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8007bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd0:	3b04      	subs	r3, #4
 8007bd2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8007bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007be0:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8007be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be4:	3b04      	subs	r3, #4
 8007be6:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8007be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bfe:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8007c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c06:	3304      	adds	r3, #4
 8007c08:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8007c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	4a1f      	ldr	r2, [pc, #124]	; (8007c90 <_tx_byte_pool_create+0x11c>)
 8007c12:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c1e:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8007c20:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8007c22:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8007c24:	b672      	cpsid	i
#endif
    return(int_posture);
 8007c26:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4a19      	ldr	r2, [pc, #100]	; (8007c94 <_tx_byte_pool_create+0x120>)
 8007c2e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8007c30:	4b19      	ldr	r3, [pc, #100]	; (8007c98 <_tx_byte_pool_create+0x124>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d109      	bne.n	8007c4c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8007c38:	4a18      	ldr	r2, [pc, #96]	; (8007c9c <_tx_byte_pool_create+0x128>)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	631a      	str	r2, [r3, #48]	; 0x30
 8007c4a:	e011      	b.n	8007c70 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8007c4c:	4b13      	ldr	r3, [pc, #76]	; (8007c9c <_tx_byte_pool_create+0x128>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c56:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	69fa      	ldr	r2, [r7, #28]
 8007c68:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a3a      	ldr	r2, [r7, #32]
 8007c6e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8007c70:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <_tx_byte_pool_create+0x124>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3301      	adds	r3, #1
 8007c76:	4a08      	ldr	r2, [pc, #32]	; (8007c98 <_tx_byte_pool_create+0x124>)
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f383 8810 	msr	PRIMASK, r3
}
 8007c84:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3738      	adds	r7, #56	; 0x38
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	ffffeeee 	.word	0xffffeeee
 8007c94:	42595445 	.word	0x42595445
 8007c98:	20001010 	.word	0x20001010
 8007c9c:	2000100c 	.word	0x2000100c

08007ca0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8007ca4:	f000 f960 	bl	8007f68 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8007ca8:	f000 fd68 	bl	800877c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8007cac:	4b12      	ldr	r3, [pc, #72]	; (8007cf8 <_tx_initialize_high_level+0x58>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
 8007cb2:	4b12      	ldr	r3, [pc, #72]	; (8007cfc <_tx_initialize_high_level+0x5c>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8007cb8:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <_tx_initialize_high_level+0x60>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	4b11      	ldr	r3, [pc, #68]	; (8007d04 <_tx_initialize_high_level+0x64>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8007cc4:	4b10      	ldr	r3, [pc, #64]	; (8007d08 <_tx_initialize_high_level+0x68>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	4b10      	ldr	r3, [pc, #64]	; (8007d0c <_tx_initialize_high_level+0x6c>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8007cd0:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <_tx_initialize_high_level+0x70>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	4b0f      	ldr	r3, [pc, #60]	; (8007d14 <_tx_initialize_high_level+0x74>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8007cdc:	4b0e      	ldr	r3, [pc, #56]	; (8007d18 <_tx_initialize_high_level+0x78>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	4b0e      	ldr	r3, [pc, #56]	; (8007d1c <_tx_initialize_high_level+0x7c>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8007ce8:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <_tx_initialize_high_level+0x80>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	4b0d      	ldr	r3, [pc, #52]	; (8007d24 <_tx_initialize_high_level+0x84>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	601a      	str	r2, [r3, #0]
#endif
}
 8007cf4:	bf00      	nop
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	20000fe4 	.word	0x20000fe4
 8007cfc:	20000fe8 	.word	0x20000fe8
 8007d00:	20000fec 	.word	0x20000fec
 8007d04:	20000ff0 	.word	0x20000ff0
 8007d08:	20000ff4 	.word	0x20000ff4
 8007d0c:	20000ff8 	.word	0x20000ff8
 8007d10:	20001004 	.word	0x20001004
 8007d14:	20001008 	.word	0x20001008
 8007d18:	2000100c 	.word	0x2000100c
 8007d1c:	20001010 	.word	0x20001010
 8007d20:	20000ffc 	.word	0x20000ffc
 8007d24:	20001000 	.word	0x20001000

08007d28 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8007d2c:	4b10      	ldr	r3, [pc, #64]	; (8007d70 <_tx_initialize_kernel_enter+0x48>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8007d34:	d00c      	beq.n	8007d50 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8007d36:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <_tx_initialize_kernel_enter+0x48>)
 8007d38:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8007d3c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8007d3e:	f7f8 fa9b 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8007d42:	f7ff ffad 	bl	8007ca0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8007d46:	4b0b      	ldr	r3, [pc, #44]	; (8007d74 <_tx_initialize_kernel_enter+0x4c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	4a09      	ldr	r2, [pc, #36]	; (8007d74 <_tx_initialize_kernel_enter+0x4c>)
 8007d4e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <_tx_initialize_kernel_enter+0x48>)
 8007d52:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8007d56:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8007d58:	4b07      	ldr	r3, [pc, #28]	; (8007d78 <_tx_initialize_kernel_enter+0x50>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7f8 ffc1 	bl	8000ce4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8007d62:	4b03      	ldr	r3, [pc, #12]	; (8007d70 <_tx_initialize_kernel_enter+0x48>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8007d68:	f7f8 fac2 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8007d6c:	bf00      	nop
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20000020 	.word	0x20000020
 8007d74:	200010b4 	.word	0x200010b4
 8007d78:	20001014 	.word	0x20001014

08007d7c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b092      	sub	sp, #72	; 0x48
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8007d8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d90:	21ef      	movs	r1, #239	; 0xef
 8007d92:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007d94:	f001 f8bc 	bl	8008f10 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8007d98:	22b0      	movs	r2, #176	; 0xb0
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f001 f8b7 	bl	8008f10 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007db8:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007dbe:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dc4:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dd2:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dd8:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8007de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de4:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8007de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007de8:	3b01      	subs	r3, #1
 8007dea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007dec:	4413      	add	r3, r2
 8007dee:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007df4:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8007df6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d007      	beq.n	8007e0e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007e0c:	e006      	b.n	8007e1c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e12:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e18:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2203      	movs	r2, #3
 8007e20:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4a48      	ldr	r2, [pc, #288]	; (8007f48 <_tx_thread_create+0x1cc>)
 8007e26:	655a      	str	r2, [r3, #84]	; 0x54
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8007e2e:	4947      	ldr	r1, [pc, #284]	; (8007f4c <_tx_thread_create+0x1d0>)
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f7f8 fac3 	bl	80003bc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007e36:	f3ef 8310 	mrs	r3, PRIMASK
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8007e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007e40:	b672      	cpsid	i
    return(int_posture);
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8007e44:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	4a41      	ldr	r2, [pc, #260]	; (8007f50 <_tx_thread_create+0x1d4>)
 8007e4a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8007e4c:	4b41      	ldr	r3, [pc, #260]	; (8007f54 <_tx_thread_create+0x1d8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10b      	bne.n	8007e6c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8007e54:	4a40      	ldr	r2, [pc, #256]	; (8007f58 <_tx_thread_create+0x1dc>)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007e6a:	e016      	b.n	8007e9a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8007e6c:	4b3a      	ldr	r3, [pc, #232]	; (8007f58 <_tx_thread_create+0x1dc>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8007e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e78:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8007e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8007e9a:	4b2e      	ldr	r3, [pc, #184]	; (8007f54 <_tx_thread_create+0x1d8>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	4a2c      	ldr	r2, [pc, #176]	; (8007f54 <_tx_thread_create+0x1d8>)
 8007ea2:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007ea4:	4b2d      	ldr	r3, [pc, #180]	; (8007f5c <_tx_thread_create+0x1e0>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	4a2c      	ldr	r2, [pc, #176]	; (8007f5c <_tx_thread_create+0x1e0>)
 8007eac:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8007eae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d129      	bne.n	8007f08 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007eb4:	f3ef 8305 	mrs	r3, IPSR
 8007eb8:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8007eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8007ebc:	4b28      	ldr	r3, [pc, #160]	; (8007f60 <_tx_thread_create+0x1e4>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007ec6:	d30d      	bcc.n	8007ee4 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8007ec8:	4b26      	ldr	r3, [pc, #152]	; (8007f64 <_tx_thread_create+0x1e8>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8007ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d009      	beq.n	8007ee8 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8007ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed8:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8007eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee0:	63da      	str	r2, [r3, #60]	; 0x3c
 8007ee2:	e001      	b.n	8007ee8 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	f383 8810 	msr	PRIMASK, r3
}
 8007ef2:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 f979 	bl	80081ec <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8007efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01e      	beq.n	8007f3e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8007f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f04:	63da      	str	r2, [r3, #60]	; 0x3c
 8007f06:	e01a      	b.n	8007f3e <_tx_thread_create+0x1c2>
 8007f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f383 8810 	msr	PRIMASK, r3
}
 8007f12:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007f14:	f3ef 8310 	mrs	r3, PRIMASK
 8007f18:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007f1a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007f1c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007f1e:	b672      	cpsid	i
    return(int_posture);
 8007f20:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8007f22:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8007f24:	4b0d      	ldr	r3, [pc, #52]	; (8007f5c <_tx_thread_create+0x1e0>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	4a0c      	ldr	r2, [pc, #48]	; (8007f5c <_tx_thread_create+0x1e0>)
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f30:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	f383 8810 	msr	PRIMASK, r3
}
 8007f38:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007f3a:	f000 f91d 	bl	8008178 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3748      	adds	r7, #72	; 0x48
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	080086c1 	.word	0x080086c1
 8007f4c:	08007fe1 	.word	0x08007fe1
 8007f50:	54485244 	.word	0x54485244
 8007f54:	20001028 	.word	0x20001028
 8007f58:	20001024 	.word	0x20001024
 8007f5c:	200010b4 	.word	0x200010b4
 8007f60:	20000020 	.word	0x20000020
 8007f64:	20001020 	.word	0x20001020

08007f68 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8007f6c:	4b12      	ldr	r3, [pc, #72]	; (8007fb8 <_tx_thread_initialize+0x50>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8007f72:	4b12      	ldr	r3, [pc, #72]	; (8007fbc <_tx_thread_initialize+0x54>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	4b11      	ldr	r3, [pc, #68]	; (8007fc0 <_tx_thread_initialize+0x58>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007f7e:	4b11      	ldr	r3, [pc, #68]	; (8007fc4 <_tx_thread_initialize+0x5c>)
 8007f80:	2220      	movs	r2, #32
 8007f82:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8007f84:	2280      	movs	r2, #128	; 0x80
 8007f86:	2100      	movs	r1, #0
 8007f88:	480f      	ldr	r0, [pc, #60]	; (8007fc8 <_tx_thread_initialize+0x60>)
 8007f8a:	f000 ffc1 	bl	8008f10 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8007f8e:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <_tx_thread_initialize+0x64>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8007f94:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <_tx_thread_initialize+0x68>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8007f9a:	4b0e      	ldr	r3, [pc, #56]	; (8007fd4 <_tx_thread_initialize+0x6c>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8007fa0:	4b0d      	ldr	r3, [pc, #52]	; (8007fd8 <_tx_thread_initialize+0x70>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8007fa6:	4b0d      	ldr	r3, [pc, #52]	; (8007fdc <_tx_thread_initialize+0x74>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8007fae:	4a0b      	ldr	r2, [pc, #44]	; (8007fdc <_tx_thread_initialize+0x74>)
 8007fb0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8007fb2:	bf00      	nop
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	2000101c 	.word	0x2000101c
 8007fbc:	20001020 	.word	0x20001020
 8007fc0:	2000102c 	.word	0x2000102c
 8007fc4:	20001030 	.word	0x20001030
 8007fc8:	20001034 	.word	0x20001034
 8007fcc:	20001024 	.word	0x20001024
 8007fd0:	20001028 	.word	0x20001028
 8007fd4:	200010b4 	.word	0x200010b4
 8007fd8:	200010b8 	.word	0x200010b8
 8007fdc:	200010bc 	.word	0x200010bc

08007fe0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8007fe6:	4b21      	ldr	r3, [pc, #132]	; (800806c <_tx_thread_shell_entry+0x8c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff0:	69fa      	ldr	r2, [r7, #28]
 8007ff2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8007ff8:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <_tx_thread_shell_entry+0x90>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d003      	beq.n	8008008 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8008000:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <_tx_thread_shell_entry+0x90>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	69f8      	ldr	r0, [r7, #28]
 8008006:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008008:	f3ef 8310 	mrs	r3, PRIMASK
 800800c:	607b      	str	r3, [r7, #4]
    return(posture);
 800800e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8008010:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008012:	b672      	cpsid	i
    return(int_posture);
 8008014:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8008016:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	2201      	movs	r2, #1
 800801c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	2201      	movs	r2, #1
 8008022:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	2200      	movs	r2, #0
 8008028:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800802a:	4b12      	ldr	r3, [pc, #72]	; (8008074 <_tx_thread_shell_entry+0x94>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3301      	adds	r3, #1
 8008030:	4a10      	ldr	r2, [pc, #64]	; (8008074 <_tx_thread_shell_entry+0x94>)
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	f383 8810 	msr	PRIMASK, r3
}
 800803e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8008040:	f3ef 8314 	mrs	r3, CONTROL
 8008044:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8008046:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8008048:	617b      	str	r3, [r7, #20]
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f023 0304 	bic.w	r3, r3, #4
 8008050:	617b      	str	r3, [r7, #20]
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f383 8814 	msr	CONTROL, r3
}
 800805c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800805e:	69f8      	ldr	r0, [r7, #28]
 8008060:	f000 f9c4 	bl	80083ec <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8008064:	bf00      	nop
 8008066:	3720      	adds	r7, #32
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	2000101c 	.word	0x2000101c
 8008070:	200010b8 	.word	0x200010b8
 8008074:	200010b4 	.word	0x200010b4

08008078 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b08e      	sub	sp, #56	; 0x38
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008080:	f3ef 8310 	mrs	r3, PRIMASK
 8008084:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800808a:	b672      	cpsid	i
    return(int_posture);
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800808e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008090:	4b35      	ldr	r3, [pc, #212]	; (8008168 <_tx_thread_sleep+0xf0>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d108      	bne.n	80080ae <_tx_thread_sleep+0x36>
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	f383 8810 	msr	PRIMASK, r3
}
 80080a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80080a8:	2313      	movs	r3, #19
 80080aa:	637b      	str	r3, [r7, #52]	; 0x34
 80080ac:	e056      	b.n	800815c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80080ae:	f3ef 8305 	mrs	r3, IPSR
 80080b2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80080b4:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80080b6:	4b2d      	ldr	r3, [pc, #180]	; (800816c <_tx_thread_sleep+0xf4>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d008      	beq.n	80080d2 <_tx_thread_sleep+0x5a>
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	f383 8810 	msr	PRIMASK, r3
}
 80080ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80080cc:	2313      	movs	r3, #19
 80080ce:	637b      	str	r3, [r7, #52]	; 0x34
 80080d0:	e044      	b.n	800815c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80080d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d4:	4a26      	ldr	r2, [pc, #152]	; (8008170 <_tx_thread_sleep+0xf8>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d108      	bne.n	80080ec <_tx_thread_sleep+0x74>
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f383 8810 	msr	PRIMASK, r3
}
 80080e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80080e6:	2313      	movs	r3, #19
 80080e8:	637b      	str	r3, [r7, #52]	; 0x34
 80080ea:	e037      	b.n	800815c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d108      	bne.n	8008104 <_tx_thread_sleep+0x8c>
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f383 8810 	msr	PRIMASK, r3
}
 80080fc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80080fe:	2300      	movs	r3, #0
 8008100:	637b      	str	r3, [r7, #52]	; 0x34
 8008102:	e02b      	b.n	800815c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8008104:	4b1b      	ldr	r3, [pc, #108]	; (8008174 <_tx_thread_sleep+0xfc>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d008      	beq.n	800811e <_tx_thread_sleep+0xa6>
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f383 8810 	msr	PRIMASK, r3
}
 8008116:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8008118:	2313      	movs	r3, #19
 800811a:	637b      	str	r3, [r7, #52]	; 0x34
 800811c:	e01e      	b.n	800815c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	2204      	movs	r2, #4
 8008122:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008126:	2201      	movs	r2, #1
 8008128:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	2200      	movs	r2, #0
 800812e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8008132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008138:	4b0e      	ldr	r3, [pc, #56]	; (8008174 <_tx_thread_sleep+0xfc>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3301      	adds	r3, #1
 800813e:	4a0d      	ldr	r2, [pc, #52]	; (8008174 <_tx_thread_sleep+0xfc>)
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f383 8810 	msr	PRIMASK, r3
}
 800814c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800814e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008150:	f000 f94c 	bl	80083ec <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800815a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800815c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800815e:	4618      	mov	r0, r3
 8008160:	3738      	adds	r7, #56	; 0x38
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	2000101c 	.word	0x2000101c
 800816c:	20000020 	.word	0x20000020
 8008170:	20001164 	.word	0x20001164
 8008174:	200010b4 	.word	0x200010b4

08008178 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8008178:	b480      	push	{r7}
 800817a:	b089      	sub	sp, #36	; 0x24
 800817c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800817e:	4b17      	ldr	r3, [pc, #92]	; (80081dc <_tx_thread_system_preempt_check+0x64>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d121      	bne.n	80081ce <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800818a:	4b15      	ldr	r3, [pc, #84]	; (80081e0 <_tx_thread_system_preempt_check+0x68>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8008190:	4b14      	ldr	r3, [pc, #80]	; (80081e4 <_tx_thread_system_preempt_check+0x6c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	429a      	cmp	r2, r3
 800819c:	d017      	beq.n	80081ce <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800819e:	4b12      	ldr	r3, [pc, #72]	; (80081e8 <_tx_thread_system_preempt_check+0x70>)
 80081a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80081a6:	f3ef 8305 	mrs	r3, IPSR
 80081aa:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80081ac:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10c      	bne.n	80081cc <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80081b2:	f3ef 8310 	mrs	r3, PRIMASK
 80081b6:	60fb      	str	r3, [r7, #12]
    return(posture);
 80081b8:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80081ba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80081bc:	b662      	cpsie	i
}
 80081be:	bf00      	nop
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f383 8810 	msr	PRIMASK, r3
}
 80081ca:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80081cc:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80081ce:	bf00      	nop
 80081d0:	3724      	adds	r7, #36	; 0x24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	200010b4 	.word	0x200010b4
 80081e0:	2000101c 	.word	0x2000101c
 80081e4:	20001020 	.word	0x20001020
 80081e8:	e000ed04 	.word	0xe000ed04

080081ec <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b096      	sub	sp, #88	; 0x58
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80081f4:	f3ef 8310 	mrs	r3, PRIMASK
 80081f8:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80081fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80081fc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80081fe:	b672      	cpsid	i
    return(int_posture);
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8008202:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008208:	2b00      	cmp	r3, #0
 800820a:	d005      	beq.n	8008218 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	334c      	adds	r3, #76	; 0x4c
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fb91 	bl	8008938 <_tx_timer_system_deactivate>
 8008216:	e002      	b.n	800821e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800821e:	4b6c      	ldr	r3, [pc, #432]	; (80083d0 <_tx_thread_system_resume+0x1e4>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3b01      	subs	r3, #1
 8008224:	4a6a      	ldr	r2, [pc, #424]	; (80083d0 <_tx_thread_system_resume+0x1e4>)
 8008226:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822c:	2b00      	cmp	r3, #0
 800822e:	f040 8083 	bne.w	8008338 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 8097 	beq.w	800836a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008240:	2b00      	cmp	r3, #0
 8008242:	d172      	bne.n	800832a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8008250:	4a60      	ldr	r2, [pc, #384]	; (80083d4 <_tx_thread_system_resume+0x1e8>)
 8008252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008258:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800825a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800825c:	2b00      	cmp	r3, #0
 800825e:	d154      	bne.n	800830a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8008260:	495c      	ldr	r1, [pc, #368]	; (80083d4 <_tx_thread_system_resume+0x1e8>)
 8008262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8008276:	2201      	movs	r2, #1
 8008278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800827a:	fa02 f303 	lsl.w	r3, r2, r3
 800827e:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8008280:	4b55      	ldr	r3, [pc, #340]	; (80083d8 <_tx_thread_system_resume+0x1ec>)
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008286:	4313      	orrs	r3, r2
 8008288:	4a53      	ldr	r2, [pc, #332]	; (80083d8 <_tx_thread_system_resume+0x1ec>)
 800828a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800828c:	4b53      	ldr	r3, [pc, #332]	; (80083dc <_tx_thread_system_resume+0x1f0>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008292:	429a      	cmp	r2, r3
 8008294:	d269      	bcs.n	800836a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8008296:	4a51      	ldr	r2, [pc, #324]	; (80083dc <_tx_thread_system_resume+0x1f0>)
 8008298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800829a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800829c:	4b50      	ldr	r3, [pc, #320]	; (80083e0 <_tx_thread_system_resume+0x1f4>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80082a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d103      	bne.n	80082b0 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80082a8:	4a4d      	ldr	r2, [pc, #308]	; (80083e0 <_tx_thread_system_resume+0x1f4>)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6013      	str	r3, [r2, #0]
 80082ae:	e05c      	b.n	800836a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80082b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d257      	bcs.n	800836a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80082ba:	4a49      	ldr	r2, [pc, #292]	; (80083e0 <_tx_thread_system_resume+0x1f4>)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80082c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c6:	f383 8810 	msr	PRIMASK, r3
}
 80082ca:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80082cc:	4b40      	ldr	r3, [pc, #256]	; (80083d0 <_tx_thread_system_resume+0x1e4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80082d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d174      	bne.n	80083c2 <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80082d8:	4b42      	ldr	r3, [pc, #264]	; (80083e4 <_tx_thread_system_resume+0x1f8>)
 80082da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082de:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80082e0:	f3ef 8305 	mrs	r3, IPSR
 80082e4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80082e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10c      	bne.n	8008306 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80082ec:	f3ef 8310 	mrs	r3, PRIMASK
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 80082f4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80082f6:	b662      	cpsie	i
}
 80082f8:	bf00      	nop
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	f383 8810 	msr	PRIMASK, r3
}
 8008304:	bf00      	nop
}
 8008306:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8008308:	e05b      	b.n	80083c2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800830a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8008310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8008316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008320:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008326:	621a      	str	r2, [r3, #32]
 8008328:	e01f      	b.n	800836a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2203      	movs	r2, #3
 8008334:	631a      	str	r2, [r3, #48]	; 0x30
 8008336:	e018      	b.n	800836a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833c:	2b01      	cmp	r3, #1
 800833e:	d014      	beq.n	800836a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008344:	2b02      	cmp	r3, #2
 8008346:	d010      	beq.n	800836a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834c:	2b00      	cmp	r3, #0
 800834e:	d106      	bne.n	800835e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	631a      	str	r2, [r3, #48]	; 0x30
 800835c:	e005      	b.n	800836a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2203      	movs	r2, #3
 8008368:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800836a:	4b1f      	ldr	r3, [pc, #124]	; (80083e8 <_tx_thread_system_resume+0x1fc>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008372:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	f383 8810 	msr	PRIMASK, r3
}
 800837a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800837c:	4b18      	ldr	r3, [pc, #96]	; (80083e0 <_tx_thread_system_resume+0x1f4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008382:	429a      	cmp	r2, r3
 8008384:	d020      	beq.n	80083c8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008386:	4b12      	ldr	r3, [pc, #72]	; (80083d0 <_tx_thread_system_resume+0x1e4>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800838c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800838e:	2b00      	cmp	r3, #0
 8008390:	d11a      	bne.n	80083c8 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008392:	4b14      	ldr	r3, [pc, #80]	; (80083e4 <_tx_thread_system_resume+0x1f8>)
 8008394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008398:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800839a:	f3ef 8305 	mrs	r3, IPSR
 800839e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80083a0:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10f      	bne.n	80083c6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80083a6:	f3ef 8310 	mrs	r3, PRIMASK
 80083aa:	613b      	str	r3, [r7, #16]
    return(posture);
 80083ac:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80083ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80083b0:	b662      	cpsie	i
}
 80083b2:	bf00      	nop
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f383 8810 	msr	PRIMASK, r3
}
 80083be:	bf00      	nop
}
 80083c0:	e001      	b.n	80083c6 <_tx_thread_system_resume+0x1da>
                                return;
 80083c2:	bf00      	nop
 80083c4:	e000      	b.n	80083c8 <_tx_thread_system_resume+0x1dc>
 80083c6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80083c8:	3758      	adds	r7, #88	; 0x58
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	200010b4 	.word	0x200010b4
 80083d4:	20001034 	.word	0x20001034
 80083d8:	2000102c 	.word	0x2000102c
 80083dc:	20001030 	.word	0x20001030
 80083e0:	20001020 	.word	0x20001020
 80083e4:	e000ed04 	.word	0xe000ed04
 80083e8:	2000101c 	.word	0x2000101c

080083ec <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b09e      	sub	sp, #120	; 0x78
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80083f4:	4b81      	ldr	r3, [pc, #516]	; (80085fc <_tx_thread_system_suspend+0x210>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80083fa:	f3ef 8310 	mrs	r3, PRIMASK
 80083fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8008400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8008402:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8008404:	b672      	cpsid	i
    return(int_posture);
 8008406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8008408:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800840e:	429a      	cmp	r2, r3
 8008410:	d112      	bne.n	8008438 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008416:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8008418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d008      	beq.n	8008430 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800841e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008424:	d004      	beq.n	8008430 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	334c      	adds	r3, #76	; 0x4c
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fa22 	bl	8008874 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	4a72      	ldr	r2, [pc, #456]	; (8008600 <_tx_thread_system_suspend+0x214>)
 8008436:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8008438:	4b72      	ldr	r3, [pc, #456]	; (8008604 <_tx_thread_system_suspend+0x218>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3b01      	subs	r3, #1
 800843e:	4a71      	ldr	r2, [pc, #452]	; (8008604 <_tx_thread_system_suspend+0x218>)
 8008440:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	2b01      	cmp	r3, #1
 8008448:	f040 80a6 	bne.w	8008598 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008456:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800845e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	429a      	cmp	r2, r3
 8008464:	d015      	beq.n	8008492 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800846c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800846e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008470:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8008472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008474:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008476:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8008478:	4a63      	ldr	r2, [pc, #396]	; (8008608 <_tx_thread_system_suspend+0x21c>)
 800847a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800847c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	429a      	cmp	r2, r3
 8008484:	d157      	bne.n	8008536 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8008486:	4960      	ldr	r1, [pc, #384]	; (8008608 <_tx_thread_system_suspend+0x21c>)
 8008488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800848a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800848c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008490:	e051      	b.n	8008536 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8008492:	4a5d      	ldr	r2, [pc, #372]	; (8008608 <_tx_thread_system_suspend+0x21c>)
 8008494:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008496:	2100      	movs	r1, #0
 8008498:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800849c:	2201      	movs	r2, #1
 800849e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084a0:	fa02 f303 	lsl.w	r3, r2, r3
 80084a4:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80084a6:	4b59      	ldr	r3, [pc, #356]	; (800860c <_tx_thread_system_suspend+0x220>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084ac:	43db      	mvns	r3, r3
 80084ae:	4013      	ands	r3, r2
 80084b0:	4a56      	ldr	r2, [pc, #344]	; (800860c <_tx_thread_system_suspend+0x220>)
 80084b2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80084b4:	2300      	movs	r3, #0
 80084b6:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80084b8:	4b54      	ldr	r3, [pc, #336]	; (800860c <_tx_thread_system_suspend+0x220>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80084be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d12b      	bne.n	800851c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80084c4:	4b52      	ldr	r3, [pc, #328]	; (8008610 <_tx_thread_system_suspend+0x224>)
 80084c6:	2220      	movs	r2, #32
 80084c8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80084ca:	4b52      	ldr	r3, [pc, #328]	; (8008614 <_tx_thread_system_suspend+0x228>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084d2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80084d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d6:	f383 8810 	msr	PRIMASK, r3
}
 80084da:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80084dc:	4b49      	ldr	r3, [pc, #292]	; (8008604 <_tx_thread_system_suspend+0x218>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 80084e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f040 8081 	bne.w	80085ec <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80084ea:	4b4b      	ldr	r3, [pc, #300]	; (8008618 <_tx_thread_system_suspend+0x22c>)
 80084ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80084f2:	f3ef 8305 	mrs	r3, IPSR
 80084f6:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 80084f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10c      	bne.n	8008518 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80084fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8008504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8008506:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008508:	b662      	cpsie	i
}
 800850a:	bf00      	nop
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	f383 8810 	msr	PRIMASK, r3
}
 8008516:	bf00      	nop
}
 8008518:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800851a:	e067      	b.n	80085ec <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800851c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800851e:	fa93 f3a3 	rbit	r3, r3
 8008522:	65bb      	str	r3, [r7, #88]	; 0x58
 8008524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008526:	fab3 f383 	clz	r3, r3
 800852a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800852c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800852e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008530:	4413      	add	r3, r2
 8008532:	4a37      	ldr	r2, [pc, #220]	; (8008610 <_tx_thread_system_suspend+0x224>)
 8008534:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8008536:	4b37      	ldr	r3, [pc, #220]	; (8008614 <_tx_thread_system_suspend+0x228>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	429a      	cmp	r2, r3
 800853e:	d12b      	bne.n	8008598 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008540:	4b33      	ldr	r3, [pc, #204]	; (8008610 <_tx_thread_system_suspend+0x224>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a30      	ldr	r2, [pc, #192]	; (8008608 <_tx_thread_system_suspend+0x21c>)
 8008546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800854a:	4a32      	ldr	r2, [pc, #200]	; (8008614 <_tx_thread_system_suspend+0x228>)
 800854c:	6013      	str	r3, [r2, #0]
 800854e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008550:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	f383 8810 	msr	PRIMASK, r3
}
 8008558:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800855a:	4b2a      	ldr	r3, [pc, #168]	; (8008604 <_tx_thread_system_suspend+0x218>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8008560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008562:	2b00      	cmp	r3, #0
 8008564:	d144      	bne.n	80085f0 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008566:	4b2c      	ldr	r3, [pc, #176]	; (8008618 <_tx_thread_system_suspend+0x22c>)
 8008568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800856c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800856e:	f3ef 8305 	mrs	r3, IPSR
 8008572:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8008574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10c      	bne.n	8008594 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800857a:	f3ef 8310 	mrs	r3, PRIMASK
 800857e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8008580:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8008582:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008584:	b662      	cpsie	i
}
 8008586:	bf00      	nop
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800858c:	6a3b      	ldr	r3, [r7, #32]
 800858e:	f383 8810 	msr	PRIMASK, r3
}
 8008592:	bf00      	nop
}
 8008594:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8008596:	e02b      	b.n	80085f0 <_tx_thread_system_suspend+0x204>
 8008598:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800859a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	f383 8810 	msr	PRIMASK, r3
}
 80085a2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80085a4:	4b1b      	ldr	r3, [pc, #108]	; (8008614 <_tx_thread_system_suspend+0x228>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d022      	beq.n	80085f4 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80085ae:	4b15      	ldr	r3, [pc, #84]	; (8008604 <_tx_thread_system_suspend+0x218>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 80085b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d11c      	bne.n	80085f4 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80085ba:	4b17      	ldr	r3, [pc, #92]	; (8008618 <_tx_thread_system_suspend+0x22c>)
 80085bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80085c2:	f3ef 8305 	mrs	r3, IPSR
 80085c6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80085c8:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10c      	bne.n	80085e8 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80085ce:	f3ef 8310 	mrs	r3, PRIMASK
 80085d2:	617b      	str	r3, [r7, #20]
    return(posture);
 80085d4:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 80085d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80085d8:	b662      	cpsie	i
}
 80085da:	bf00      	nop
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f383 8810 	msr	PRIMASK, r3
}
 80085e6:	bf00      	nop
}
 80085e8:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80085ea:	e003      	b.n	80085f4 <_tx_thread_system_suspend+0x208>
                return;
 80085ec:	bf00      	nop
 80085ee:	e002      	b.n	80085f6 <_tx_thread_system_suspend+0x20a>
            return;
 80085f0:	bf00      	nop
 80085f2:	e000      	b.n	80085f6 <_tx_thread_system_suspend+0x20a>
    return;
 80085f4:	bf00      	nop
}
 80085f6:	3778      	adds	r7, #120	; 0x78
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	2000101c 	.word	0x2000101c
 8008600:	20001620 	.word	0x20001620
 8008604:	200010b4 	.word	0x200010b4
 8008608:	20001034 	.word	0x20001034
 800860c:	2000102c 	.word	0x2000102c
 8008610:	20001030 	.word	0x20001030
 8008614:	20001020 	.word	0x20001020
 8008618:	e000ed04 	.word	0xe000ed04

0800861c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008622:	4b21      	ldr	r3, [pc, #132]	; (80086a8 <_tx_thread_time_slice+0x8c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008628:	f3ef 8310 	mrs	r3, PRIMASK
 800862c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800862e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8008630:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008632:	b672      	cpsid	i
    return(int_posture);
 8008634:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8008636:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8008638:	4b1c      	ldr	r3, [pc, #112]	; (80086ac <_tx_thread_time_slice+0x90>)
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d024      	beq.n	800868e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008648:	2b00      	cmp	r3, #0
 800864a:	d120      	bne.n	800868e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	69da      	ldr	r2, [r3, #28]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	4a15      	ldr	r2, [pc, #84]	; (80086b0 <_tx_thread_time_slice+0x94>)
 800865a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	6a1b      	ldr	r3, [r3, #32]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	429a      	cmp	r2, r3
 8008664:	d013      	beq.n	800868e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866e:	429a      	cmp	r2, r3
 8008670:	d10d      	bne.n	800868e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	6a12      	ldr	r2, [r2, #32]
 800867a:	490e      	ldr	r1, [pc, #56]	; (80086b4 <_tx_thread_time_slice+0x98>)
 800867c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008680:	4b0d      	ldr	r3, [pc, #52]	; (80086b8 <_tx_thread_time_slice+0x9c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a0b      	ldr	r2, [pc, #44]	; (80086b4 <_tx_thread_time_slice+0x98>)
 8008686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800868a:	4a0c      	ldr	r2, [pc, #48]	; (80086bc <_tx_thread_time_slice+0xa0>)
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f383 8810 	msr	PRIMASK, r3
}
 8008698:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800869a:	bf00      	nop
 800869c:	371c      	adds	r7, #28
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	2000101c 	.word	0x2000101c
 80086ac:	200010c4 	.word	0x200010c4
 80086b0:	20001620 	.word	0x20001620
 80086b4:	20001034 	.word	0x20001034
 80086b8:	20001030 	.word	0x20001030
 80086bc:	20001020 	.word	0x20001020

080086c0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08a      	sub	sp, #40	; 0x28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80086cc:	f3ef 8310 	mrs	r3, PRIMASK
 80086d0:	617b      	str	r3, [r7, #20]
    return(posture);
 80086d2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80086d4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80086d6:	b672      	cpsid	i
    return(int_posture);
 80086d8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80086da:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	d10e      	bne.n	8008702 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80086e4:	4b13      	ldr	r3, [pc, #76]	; (8008734 <_tx_thread_timeout+0x74>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3301      	adds	r3, #1
 80086ea:	4a12      	ldr	r2, [pc, #72]	; (8008734 <_tx_thread_timeout+0x74>)
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f383 8810 	msr	PRIMASK, r3
}
 80086f8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80086fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086fc:	f7ff fd76 	bl	80081ec <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8008700:	e013      	b.n	800872a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008706:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800870e:	61bb      	str	r3, [r7, #24]
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f383 8810 	msr	PRIMASK, r3
}
 800871a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d003      	beq.n	800872a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	69b9      	ldr	r1, [r7, #24]
 8008726:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008728:	4798      	blx	r3
}
 800872a:	bf00      	nop
 800872c:	3728      	adds	r7, #40	; 0x28
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	200010b4 	.word	0x200010b4

08008738 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800873e:	f3ef 8310 	mrs	r3, PRIMASK
 8008742:	607b      	str	r3, [r7, #4]
    return(posture);
 8008744:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8008746:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008748:	b672      	cpsid	i
    return(int_posture);
 800874a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800874c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800874e:	4b09      	ldr	r3, [pc, #36]	; (8008774 <_tx_timer_expiration_process+0x3c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3301      	adds	r3, #1
 8008754:	4a07      	ldr	r2, [pc, #28]	; (8008774 <_tx_timer_expiration_process+0x3c>)
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f383 8810 	msr	PRIMASK, r3
}
 8008762:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8008764:	4804      	ldr	r0, [pc, #16]	; (8008778 <_tx_timer_expiration_process+0x40>)
 8008766:	f7ff fd41 	bl	80081ec <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800876a:	bf00      	nop
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	200010b4 	.word	0x200010b4
 8008778:	20001164 	.word	0x20001164

0800877c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800877c:	b590      	push	{r4, r7, lr}
 800877e:	b089      	sub	sp, #36	; 0x24
 8008780:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8008782:	4b28      	ldr	r3, [pc, #160]	; (8008824 <_tx_timer_initialize+0xa8>)
 8008784:	2200      	movs	r2, #0
 8008786:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8008788:	4b27      	ldr	r3, [pc, #156]	; (8008828 <_tx_timer_initialize+0xac>)
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800878e:	4b27      	ldr	r3, [pc, #156]	; (800882c <_tx_timer_initialize+0xb0>)
 8008790:	2200      	movs	r2, #0
 8008792:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8008794:	4b26      	ldr	r3, [pc, #152]	; (8008830 <_tx_timer_initialize+0xb4>)
 8008796:	2200      	movs	r2, #0
 8008798:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800879a:	4b26      	ldr	r3, [pc, #152]	; (8008834 <_tx_timer_initialize+0xb8>)
 800879c:	2200      	movs	r2, #0
 800879e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 80087a0:	2280      	movs	r2, #128	; 0x80
 80087a2:	2100      	movs	r1, #0
 80087a4:	4824      	ldr	r0, [pc, #144]	; (8008838 <_tx_timer_initialize+0xbc>)
 80087a6:	f000 fbb3 	bl	8008f10 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80087aa:	4b24      	ldr	r3, [pc, #144]	; (800883c <_tx_timer_initialize+0xc0>)
 80087ac:	4a22      	ldr	r2, [pc, #136]	; (8008838 <_tx_timer_initialize+0xbc>)
 80087ae:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80087b0:	4b23      	ldr	r3, [pc, #140]	; (8008840 <_tx_timer_initialize+0xc4>)
 80087b2:	4a21      	ldr	r2, [pc, #132]	; (8008838 <_tx_timer_initialize+0xbc>)
 80087b4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80087b6:	4b23      	ldr	r3, [pc, #140]	; (8008844 <_tx_timer_initialize+0xc8>)
 80087b8:	4a23      	ldr	r2, [pc, #140]	; (8008848 <_tx_timer_initialize+0xcc>)
 80087ba:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80087bc:	4b21      	ldr	r3, [pc, #132]	; (8008844 <_tx_timer_initialize+0xc8>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3304      	adds	r3, #4
 80087c2:	4a20      	ldr	r2, [pc, #128]	; (8008844 <_tx_timer_initialize+0xc8>)
 80087c4:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80087c6:	4b21      	ldr	r3, [pc, #132]	; (800884c <_tx_timer_initialize+0xd0>)
 80087c8:	4a21      	ldr	r2, [pc, #132]	; (8008850 <_tx_timer_initialize+0xd4>)
 80087ca:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80087cc:	4b21      	ldr	r3, [pc, #132]	; (8008854 <_tx_timer_initialize+0xd8>)
 80087ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087d2:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80087d4:	4b20      	ldr	r3, [pc, #128]	; (8008858 <_tx_timer_initialize+0xdc>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80087da:	4b1c      	ldr	r3, [pc, #112]	; (800884c <_tx_timer_initialize+0xd0>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a1d      	ldr	r2, [pc, #116]	; (8008854 <_tx_timer_initialize+0xd8>)
 80087e0:	6812      	ldr	r2, [r2, #0]
 80087e2:	491d      	ldr	r1, [pc, #116]	; (8008858 <_tx_timer_initialize+0xdc>)
 80087e4:	6809      	ldr	r1, [r1, #0]
 80087e6:	481c      	ldr	r0, [pc, #112]	; (8008858 <_tx_timer_initialize+0xdc>)
 80087e8:	6800      	ldr	r0, [r0, #0]
 80087ea:	2400      	movs	r4, #0
 80087ec:	9405      	str	r4, [sp, #20]
 80087ee:	2400      	movs	r4, #0
 80087f0:	9404      	str	r4, [sp, #16]
 80087f2:	9003      	str	r0, [sp, #12]
 80087f4:	9102      	str	r1, [sp, #8]
 80087f6:	9201      	str	r2, [sp, #4]
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	4b18      	ldr	r3, [pc, #96]	; (800885c <_tx_timer_initialize+0xe0>)
 80087fc:	4a18      	ldr	r2, [pc, #96]	; (8008860 <_tx_timer_initialize+0xe4>)
 80087fe:	4919      	ldr	r1, [pc, #100]	; (8008864 <_tx_timer_initialize+0xe8>)
 8008800:	4819      	ldr	r0, [pc, #100]	; (8008868 <_tx_timer_initialize+0xec>)
 8008802:	f7ff fabb 	bl	8007d7c <_tx_thread_create>
 8008806:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e5      	bne.n	80087da <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800880e:	4b17      	ldr	r3, [pc, #92]	; (800886c <_tx_timer_initialize+0xf0>)
 8008810:	2200      	movs	r2, #0
 8008812:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8008814:	4b16      	ldr	r3, [pc, #88]	; (8008870 <_tx_timer_initialize+0xf4>)
 8008816:	2200      	movs	r2, #0
 8008818:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800881a:	bf00      	nop
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	bd90      	pop	{r4, r7, pc}
 8008822:	bf00      	nop
 8008824:	200010c0 	.word	0x200010c0
 8008828:	20001620 	.word	0x20001620
 800882c:	200010c4 	.word	0x200010c4
 8008830:	20001154 	.word	0x20001154
 8008834:	20001160 	.word	0x20001160
 8008838:	200010c8 	.word	0x200010c8
 800883c:	20001148 	.word	0x20001148
 8008840:	20001150 	.word	0x20001150
 8008844:	2000114c 	.word	0x2000114c
 8008848:	20001144 	.word	0x20001144
 800884c:	20001214 	.word	0x20001214
 8008850:	20001220 	.word	0x20001220
 8008854:	20001218 	.word	0x20001218
 8008858:	2000121c 	.word	0x2000121c
 800885c:	4154494d 	.word	0x4154494d
 8008860:	080089a9 	.word	0x080089a9
 8008864:	08008f74 	.word	0x08008f74
 8008868:	20001164 	.word	0x20001164
 800886c:	20001158 	.word	0x20001158
 8008870:	2000115c 	.word	0x2000115c

08008874 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8008874:	b480      	push	{r7}
 8008876:	b089      	sub	sp, #36	; 0x24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d04a      	beq.n	800891e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800888e:	d046      	beq.n	800891e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d142      	bne.n	800891e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	2b20      	cmp	r3, #32
 800889c:	d902      	bls.n	80088a4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800889e:	231f      	movs	r3, #31
 80088a0:	61bb      	str	r3, [r7, #24]
 80088a2:	e002      	b.n	80088aa <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80088aa:	4b20      	ldr	r3, [pc, #128]	; (800892c <_tx_timer_system_activate+0xb8>)
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80088b6:	4b1e      	ldr	r3, [pc, #120]	; (8008930 <_tx_timer_system_activate+0xbc>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d30b      	bcc.n	80088d8 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80088c0:	4b1b      	ldr	r3, [pc, #108]	; (8008930 <_tx_timer_system_activate+0xbc>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	69fa      	ldr	r2, [r7, #28]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	109b      	asrs	r3, r3, #2
 80088ca:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80088cc:	4b19      	ldr	r3, [pc, #100]	; (8008934 <_tx_timer_system_activate+0xc0>)
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d109      	bne.n	80088f4 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	e011      	b.n	8008918 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800891e:	bf00      	nop
 8008920:	3724      	adds	r7, #36	; 0x24
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	20001150 	.word	0x20001150
 8008930:	2000114c 	.word	0x2000114c
 8008934:	20001148 	.word	0x20001148

08008938 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d026      	beq.n	800899a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	429a      	cmp	r2, r3
 8008958:	d108      	bne.n	800896c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	429a      	cmp	r2, r3
 8008962:	d117      	bne.n	8008994 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	2200      	movs	r2, #0
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	e013      	b.n	8008994 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	429a      	cmp	r2, r3
 8008986:	d105      	bne.n	8008994 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	619a      	str	r2, [r3, #24]
    }
}
 800899a:	bf00      	nop
 800899c:	371c      	adds	r7, #28
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
	...

080089a8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b098      	sub	sp, #96	; 0x60
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80089b0:	2300      	movs	r3, #0
 80089b2:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a73      	ldr	r2, [pc, #460]	; (8008b84 <_tx_timer_thread_entry+0x1dc>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	f040 80de 	bne.w	8008b7a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80089be:	f3ef 8310 	mrs	r3, PRIMASK
 80089c2:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80089c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80089c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80089c8:	b672      	cpsid	i
    return(int_posture);
 80089ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80089cc:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80089ce:	4b6e      	ldr	r3, [pc, #440]	; (8008b88 <_tx_timer_thread_entry+0x1e0>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f107 020c 	add.w	r2, r7, #12
 80089e2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80089e4:	4b68      	ldr	r3, [pc, #416]	; (8008b88 <_tx_timer_thread_entry+0x1e0>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80089ec:	4b66      	ldr	r3, [pc, #408]	; (8008b88 <_tx_timer_thread_entry+0x1e0>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	3304      	adds	r3, #4
 80089f2:	4a65      	ldr	r2, [pc, #404]	; (8008b88 <_tx_timer_thread_entry+0x1e0>)
 80089f4:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80089f6:	4b64      	ldr	r3, [pc, #400]	; (8008b88 <_tx_timer_thread_entry+0x1e0>)
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	4b64      	ldr	r3, [pc, #400]	; (8008b8c <_tx_timer_thread_entry+0x1e4>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d103      	bne.n	8008a0a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8008a02:	4b63      	ldr	r3, [pc, #396]	; (8008b90 <_tx_timer_thread_entry+0x1e8>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a60      	ldr	r2, [pc, #384]	; (8008b88 <_tx_timer_thread_entry+0x1e0>)
 8008a08:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8008a0a:	4b62      	ldr	r3, [pc, #392]	; (8008b94 <_tx_timer_thread_entry+0x1ec>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a12:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a16:	f383 8810 	msr	PRIMASK, r3
}
 8008a1a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a20:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8008a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8008a24:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8008a26:	b672      	cpsid	i
    return(int_posture);
 8008a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8008a2a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8008a2c:	e07f      	b.n	8008b2e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8008a3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d102      	bne.n	8008a4a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8008a44:	2300      	movs	r3, #0
 8008a46:	60fb      	str	r3, [r7, #12]
 8008a48:	e00e      	b.n	8008a68 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8008a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8008a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a54:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8008a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a5a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8008a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a5e:	f107 020c 	add.w	r2, r7, #12
 8008a62:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8008a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a66:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8008a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b20      	cmp	r3, #32
 8008a6e:	d911      	bls.n	8008a94 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8008a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8008a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a7a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8008a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a82:	f107 0208 	add.w	r2, r7, #8
 8008a86:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8008a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a8c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8008a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a90:	60bb      	str	r3, [r7, #8]
 8008a92:	e01a      	b.n	8008aca <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8008a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8008a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8008aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aa6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8008aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d009      	beq.n	8008ac4 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8008ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ab2:	f107 0208 	add.w	r2, r7, #8
 8008ab6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8008ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008abc:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8008abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac0:	60bb      	str	r3, [r7, #8]
 8008ac2:	e002      	b.n	8008aca <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8008ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8008aca:	4a33      	ldr	r2, [pc, #204]	; (8008b98 <_tx_timer_thread_entry+0x1f0>)
 8008acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	f383 8810 	msr	PRIMASK, r3
}
 8008ada:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8008adc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8008ae2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ae4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008ae6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8008aec:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8008aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8008af0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8008af2:	b672      	cpsid	i
    return(int_posture);
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8008af6:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8008af8:	4b27      	ldr	r3, [pc, #156]	; (8008b98 <_tx_timer_thread_entry+0x1f0>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d105      	bne.n	8008b12 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8008b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b08:	2200      	movs	r2, #0
 8008b0a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8008b0c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008b0e:	f7ff feb1 	bl	8008874 <_tx_timer_system_activate>
 8008b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b14:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	f383 8810 	msr	PRIMASK, r3
}
 8008b1c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b22:	623b      	str	r3, [r7, #32]
    return(posture);
 8008b24:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008b26:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008b28:	b672      	cpsid	i
    return(int_posture);
 8008b2a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8008b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f47f af7c 	bne.w	8008a2e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8008b36:	4b17      	ldr	r3, [pc, #92]	; (8008b94 <_tx_timer_thread_entry+0x1ec>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d116      	bne.n	8008b6c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8008b3e:	4b17      	ldr	r3, [pc, #92]	; (8008b9c <_tx_timer_thread_entry+0x1f4>)
 8008b40:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8008b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b44:	2203      	movs	r2, #3
 8008b46:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8008b4e:	4b14      	ldr	r3, [pc, #80]	; (8008ba0 <_tx_timer_thread_entry+0x1f8>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	3301      	adds	r3, #1
 8008b54:	4a12      	ldr	r2, [pc, #72]	; (8008ba0 <_tx_timer_thread_entry+0x1f8>)
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b5a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	f383 8810 	msr	PRIMASK, r3
}
 8008b62:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8008b64:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008b66:	f7ff fc41 	bl	80083ec <_tx_thread_system_suspend>
 8008b6a:	e728      	b.n	80089be <_tx_timer_thread_entry+0x16>
 8008b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b6e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	f383 8810 	msr	PRIMASK, r3
}
 8008b76:	bf00      	nop
            TX_DISABLE
 8008b78:	e721      	b.n	80089be <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8008b7a:	bf00      	nop
 8008b7c:	3760      	adds	r7, #96	; 0x60
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	4154494d 	.word	0x4154494d
 8008b88:	20001150 	.word	0x20001150
 8008b8c:	2000114c 	.word	0x2000114c
 8008b90:	20001148 	.word	0x20001148
 8008b94:	20001154 	.word	0x20001154
 8008b98:	20001160 	.word	0x20001160
 8008b9c:	20001164 	.word	0x20001164
 8008ba0:	200010b4 	.word	0x200010b4

08008ba4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b092      	sub	sp, #72	; 0x48
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
 8008bb0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d102      	bne.n	8008bc2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8008bc0:	e075      	b.n	8008cae <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8008bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bc4:	2b34      	cmp	r3, #52	; 0x34
 8008bc6:	d002      	beq.n	8008bce <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008bc8:	2302      	movs	r3, #2
 8008bca:	647b      	str	r3, [r7, #68]	; 0x44
 8008bcc:	e06f      	b.n	8008cae <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008bce:	f3ef 8310 	mrs	r3, PRIMASK
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8008bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8008bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008bd8:	b672      	cpsid	i
    return(int_posture);
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008bdc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008bde:	4b3b      	ldr	r3, [pc, #236]	; (8008ccc <_txe_byte_pool_create+0x128>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3301      	adds	r3, #1
 8008be4:	4a39      	ldr	r2, [pc, #228]	; (8008ccc <_txe_byte_pool_create+0x128>)
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bee:	f383 8810 	msr	PRIMASK, r3
}
 8008bf2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8008bf4:	4b36      	ldr	r3, [pc, #216]	; (8008cd0 <_txe_byte_pool_create+0x12c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8008bfe:	e009      	b.n	8008c14 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d00b      	beq.n	8008c20 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8008c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8008c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c10:	3301      	adds	r3, #1
 8008c12:	643b      	str	r3, [r7, #64]	; 0x40
 8008c14:	4b2f      	ldr	r3, [pc, #188]	; (8008cd4 <_txe_byte_pool_create+0x130>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d3f0      	bcc.n	8008c00 <_txe_byte_pool_create+0x5c>
 8008c1e:	e000      	b.n	8008c22 <_txe_byte_pool_create+0x7e>
                break;
 8008c20:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c22:	f3ef 8310 	mrs	r3, PRIMASK
 8008c26:	623b      	str	r3, [r7, #32]
    return(posture);
 8008c28:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008c2a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c2c:	b672      	cpsid	i
    return(int_posture);
 8008c2e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008c30:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8008c32:	4b26      	ldr	r3, [pc, #152]	; (8008ccc <_txe_byte_pool_create+0x128>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	4a24      	ldr	r2, [pc, #144]	; (8008ccc <_txe_byte_pool_create+0x128>)
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	f383 8810 	msr	PRIMASK, r3
}
 8008c46:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008c48:	f7ff fa96 	bl	8008178 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d102      	bne.n	8008c5a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8008c54:	2302      	movs	r3, #2
 8008c56:	647b      	str	r3, [r7, #68]	; 0x44
 8008c58:	e029      	b.n	8008cae <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d102      	bne.n	8008c66 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8008c60:	2303      	movs	r3, #3
 8008c62:	647b      	str	r3, [r7, #68]	; 0x44
 8008c64:	e023      	b.n	8008cae <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b63      	cmp	r3, #99	; 0x63
 8008c6a:	d802      	bhi.n	8008c72 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8008c6c:	2305      	movs	r3, #5
 8008c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8008c70:	e01d      	b.n	8008cae <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8008c72:	4b19      	ldr	r3, [pc, #100]	; (8008cd8 <_txe_byte_pool_create+0x134>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8008c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7a:	4a18      	ldr	r2, [pc, #96]	; (8008cdc <_txe_byte_pool_create+0x138>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d101      	bne.n	8008c84 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008c80:	2313      	movs	r3, #19
 8008c82:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008c84:	f3ef 8305 	mrs	r3, IPSR
 8008c88:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008c8a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008c8c:	4b14      	ldr	r3, [pc, #80]	; (8008ce0 <_txe_byte_pool_create+0x13c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00b      	beq.n	8008cae <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008c96:	f3ef 8305 	mrs	r3, IPSR
 8008c9a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008c9c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008c9e:	4b10      	ldr	r3, [pc, #64]	; (8008ce0 <_txe_byte_pool_create+0x13c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008ca8:	d201      	bcs.n	8008cae <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8008caa:	2313      	movs	r3, #19
 8008cac:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d106      	bne.n	8008cc2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	68b9      	ldr	r1, [r7, #8]
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f7fe ff5a 	bl	8007b74 <_tx_byte_pool_create>
 8008cc0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8008cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3748      	adds	r7, #72	; 0x48
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	200010b4 	.word	0x200010b4
 8008cd0:	2000100c 	.word	0x2000100c
 8008cd4:	20001010 	.word	0x20001010
 8008cd8:	2000101c 	.word	0x2000101c
 8008cdc:	20001164 	.word	0x20001164
 8008ce0:	20000020 	.word	0x20000020

08008ce4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b09a      	sub	sp, #104	; 0x68
 8008ce8:	af06      	add	r7, sp, #24
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d102      	bne.n	8008d02 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8008cfc:	230e      	movs	r3, #14
 8008cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d00:	e0bb      	b.n	8008e7a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8008d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d04:	2bb0      	cmp	r3, #176	; 0xb0
 8008d06:	d002      	beq.n	8008d0e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8008d08:	230e      	movs	r3, #14
 8008d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d0c:	e0b5      	b.n	8008e7a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d12:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d18:	b672      	cpsid	i
    return(int_posture);
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008d1c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008d1e:	4b64      	ldr	r3, [pc, #400]	; (8008eb0 <_txe_thread_create+0x1cc>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3301      	adds	r3, #1
 8008d24:	4a62      	ldr	r2, [pc, #392]	; (8008eb0 <_txe_thread_create+0x1cc>)
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2e:	f383 8810 	msr	PRIMASK, r3
}
 8008d32:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8008d34:	2300      	movs	r3, #0
 8008d36:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8008d38:	4b5e      	ldr	r3, [pc, #376]	; (8008eb4 <_txe_thread_create+0x1d0>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8008d3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d40:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8008d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d44:	3b01      	subs	r3, #1
 8008d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d48:	4413      	add	r3, r2
 8008d4a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8008d50:	2300      	movs	r3, #0
 8008d52:	647b      	str	r3, [r7, #68]	; 0x44
 8008d54:	e02b      	b.n	8008dae <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d101      	bne.n	8008d62 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8008d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d028      	beq.n	8008dba <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8008d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d308      	bcc.n	8008d84 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8008d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d203      	bcs.n	8008d84 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8008d80:	2301      	movs	r3, #1
 8008d82:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8008d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d308      	bcc.n	8008da0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8008d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d203      	bcs.n	8008da0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8008da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da6:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8008da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008daa:	3301      	adds	r3, #1
 8008dac:	647b      	str	r3, [r7, #68]	; 0x44
 8008dae:	4b42      	ldr	r3, [pc, #264]	; (8008eb8 <_txe_thread_create+0x1d4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d3ce      	bcc.n	8008d56 <_txe_thread_create+0x72>
 8008db8:	e000      	b.n	8008dbc <_txe_thread_create+0xd8>
                break;
 8008dba:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8008dc0:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008dc2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008dc4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008dc6:	b672      	cpsid	i
    return(int_posture);
 8008dc8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008dca:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8008dcc:	4b38      	ldr	r3, [pc, #224]	; (8008eb0 <_txe_thread_create+0x1cc>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	4a37      	ldr	r2, [pc, #220]	; (8008eb0 <_txe_thread_create+0x1cc>)
 8008dd4:	6013      	str	r3, [r2, #0]
 8008dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	f383 8810 	msr	PRIMASK, r3
}
 8008de0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008de2:	f7ff f9c9 	bl	8008178 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d102      	bne.n	8008df4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8008dee:	230e      	movs	r3, #14
 8008df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008df2:	e042      	b.n	8008e7a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8008df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d102      	bne.n	8008e00 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dfe:	e03c      	b.n	8008e7a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d102      	bne.n	8008e0c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8008e06:	2303      	movs	r3, #3
 8008e08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e0a:	e036      	b.n	8008e7a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8008e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e0e:	2bc7      	cmp	r3, #199	; 0xc7
 8008e10:	d802      	bhi.n	8008e18 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8008e12:	2305      	movs	r3, #5
 8008e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e16:	e030      	b.n	8008e7a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8008e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e1a:	2b1f      	cmp	r3, #31
 8008e1c:	d902      	bls.n	8008e24 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8008e1e:	230f      	movs	r3, #15
 8008e20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e22:	e02a      	b.n	8008e7a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8008e24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d902      	bls.n	8008e32 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8008e2c:	2318      	movs	r3, #24
 8008e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e30:	e023      	b.n	8008e7a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8008e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d902      	bls.n	8008e3e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8008e38:	2310      	movs	r3, #16
 8008e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e3c:	e01d      	b.n	8008e7a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8008e3e:	4b1f      	ldr	r3, [pc, #124]	; (8008ebc <_txe_thread_create+0x1d8>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	4a1e      	ldr	r2, [pc, #120]	; (8008ec0 <_txe_thread_create+0x1dc>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d101      	bne.n	8008e50 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008e4c:	2313      	movs	r3, #19
 8008e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008e50:	f3ef 8305 	mrs	r3, IPSR
 8008e54:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008e56:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008e58:	4b1a      	ldr	r3, [pc, #104]	; (8008ec4 <_txe_thread_create+0x1e0>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00b      	beq.n	8008e7a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008e62:	f3ef 8305 	mrs	r3, IPSR
 8008e66:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008e68:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008e6a:	4b16      	ldr	r3, [pc, #88]	; (8008ec4 <_txe_thread_create+0x1e0>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008e74:	d201      	bcs.n	8008e7a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8008e76:	2313      	movs	r3, #19
 8008e78:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d112      	bne.n	8008ea6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8008e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e82:	9305      	str	r3, [sp, #20]
 8008e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e86:	9304      	str	r3, [sp, #16]
 8008e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e8a:	9303      	str	r3, [sp, #12]
 8008e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e8e:	9302      	str	r3, [sp, #8]
 8008e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e92:	9301      	str	r3, [sp, #4]
 8008e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f7fe ff6c 	bl	8007d7c <_tx_thread_create>
 8008ea4:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8008ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3750      	adds	r7, #80	; 0x50
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	200010b4 	.word	0x200010b4
 8008eb4:	20001024 	.word	0x20001024
 8008eb8:	20001028 	.word	0x20001028
 8008ebc:	2000101c 	.word	0x2000101c
 8008ec0:	20001164 	.word	0x20001164
 8008ec4:	20000020 	.word	0x20000020

08008ec8 <__libc_init_array>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	4d0d      	ldr	r5, [pc, #52]	; (8008f00 <__libc_init_array+0x38>)
 8008ecc:	2600      	movs	r6, #0
 8008ece:	4c0d      	ldr	r4, [pc, #52]	; (8008f04 <__libc_init_array+0x3c>)
 8008ed0:	1b64      	subs	r4, r4, r5
 8008ed2:	10a4      	asrs	r4, r4, #2
 8008ed4:	42a6      	cmp	r6, r4
 8008ed6:	d109      	bne.n	8008eec <__libc_init_array+0x24>
 8008ed8:	4d0b      	ldr	r5, [pc, #44]	; (8008f08 <__libc_init_array+0x40>)
 8008eda:	2600      	movs	r6, #0
 8008edc:	4c0b      	ldr	r4, [pc, #44]	; (8008f0c <__libc_init_array+0x44>)
 8008ede:	f000 f81f 	bl	8008f20 <_init>
 8008ee2:	1b64      	subs	r4, r4, r5
 8008ee4:	10a4      	asrs	r4, r4, #2
 8008ee6:	42a6      	cmp	r6, r4
 8008ee8:	d105      	bne.n	8008ef6 <__libc_init_array+0x2e>
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef0:	3601      	adds	r6, #1
 8008ef2:	4798      	blx	r3
 8008ef4:	e7ee      	b.n	8008ed4 <__libc_init_array+0xc>
 8008ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008efa:	3601      	adds	r6, #1
 8008efc:	4798      	blx	r3
 8008efe:	e7f2      	b.n	8008ee6 <__libc_init_array+0x1e>
 8008f00:	08009060 	.word	0x08009060
 8008f04:	08009060 	.word	0x08009060
 8008f08:	08009060 	.word	0x08009060
 8008f0c:	08009064 	.word	0x08009064

08008f10 <memset>:
 8008f10:	4402      	add	r2, r0
 8008f12:	4603      	mov	r3, r0
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d100      	bne.n	8008f1a <memset+0xa>
 8008f18:	4770      	bx	lr
 8008f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f1e:	e7f9      	b.n	8008f14 <memset+0x4>

08008f20 <_init>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	bf00      	nop
 8008f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f26:	bc08      	pop	{r3}
 8008f28:	469e      	mov	lr, r3
 8008f2a:	4770      	bx	lr

08008f2c <_fini>:
 8008f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2e:	bf00      	nop
 8008f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f32:	bc08      	pop	{r3}
 8008f34:	469e      	mov	lr, r3
 8008f36:	4770      	bx	lr
